<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.openspcoop2</groupId>
	<version>${revision}</version>
	<artifactId>org.openspcoop2.dependencies</artifactId>
	<packaging>pom</packaging>
	<name>dependencies</name>

	<parent>
		<groupId>org.openspcoop2</groupId>
		<artifactId>org.openspcoop2</artifactId>
		<version>${revision}</version>
		<relativePath>../../pom.xml</relativePath>
	</parent>

	<properties>		
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- owasp config -->
		<owasp.falsePositives.dir>mvn/dependencies/owasp/falsePositives</owasp.falsePositives.dir>
		<owasp.output.dir>../../dependency-check-result</owasp.output.dir>

	</properties>

	<modules>
		<module>ant</module>
		<module>antinstaller</module>
		<module>angus</module>
		<module>bean-validation</module>
		<module>cxf</module>
		<module>commons</module>
		<module>console</module>
		<module>git</module>
		<module>httpcore</module>
		<module>jackson</module>
		<module>jakarta</module>
		<module>jaxb</module>
		<module>jetty</module>
		<module>jmx</module>
		<module>json</module>
		<module>log</module>
		<module>lucene</module>
		<module>openapi4j</module>
		<module>opensaml</module>
		<module>pdf</module>
		<module>redis</module>
		<module>reports</module>
		<module>saaj</module>
		<module>security</module>
		<module>shared</module>
		<module>spring</module>
		<module>spring-ldap</module>
		<module>spring-security</module>
		<module>swagger</module>
		<module>swagger-codegen</module>
		<module>wss4j</module>
		<module>testsuite</module>
	</modules>

	<profiles>

		<!-- Caso true -> fail su qualsiasi vulnerabilità -->
		<profile>
			<id>owasp-fail-all</id>
			<activation>
				<property>
					<name>owasp.plugin.failBuildOnAnyVulnerability</name>
					<value>true</value>
				</property>
			</activation>
			<properties>
				<owasp.plugin.failBuildOnCVSS>0</owasp.plugin.failBuildOnCVSS>
			</properties>
		</profile>

		<!-- Caso false -> non fallire mai -->
		<profile>
			<id>owasp-ignore</id>
			<activation>
				<property>
					<name>owasp.plugin.failBuildOnAnyVulnerability</name>
					<value>false</value>
				</property>
			</activation>
			<properties>
				<owasp.plugin.failBuildOnCVSS>11</owasp.plugin.failBuildOnCVSS>
			</properties>
		</profile>
		
	</profiles>

	<build>
		<plugins>
			<plugin>
				<!-- per evitare 429: richiesta verso ossindex -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>${maven-antrun-plugin}</version>
				<executions>
					<execution>
						<id>sleep-for-a-while</id>
						<phase>${owasp}</phase>
							<configuration>
								<target name="owasp-root">
									<sleep seconds="${owasp.ossindex.prevents429.sleep}" />
								</target>
							</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.owasp</groupId>
				<artifactId>dependency-check-maven</artifactId>
				<version>${owasp.plugin.version}</version>
				<executions>
					<execution>
						<id>check owasp</id>
						<phase>${owasp}</phase>
						<configuration>
							<autoUpdate>${owasp.plugin.autoUpdate}</autoUpdate> <!-- Impostare a false quando ci sono problemi su repository NIST -->
							<!-- <failBuildOnAnyVulnerability>${owasp.plugin.failBuildOnAnyVulnerability}</failBuildOnAnyVulnerability> 
							      failBuildOnAnyVulnerability è deprecato, deve essere usato failBuildOnCVSS valorizzato come segue
							      - 0 equivale a failBuildOnAnyVulnerability=true, poichè fallirà per qualsiasi vulnerabilità
							      - 11 equivale a failBuildOnAnyVulnerability=false, poichè significa non fallire mai visto che il massimo CVSS è 10. 
							        In alternativa si può anche non definire l'elemento 'failBuildOnCVSS'
							-->
							<failBuildOnCVSS>${owasp.plugin.failBuildOnCVSS}</failBuildOnCVSS>
							<outputDirectory>${owasp.output.dir}</outputDirectory>
							<format>ALL</format>
							<suppressionFiles>
								<suppressionFile>${owasp.falsePositives.dir}/swagger-codegen-linkit.xml</suppressionFile>
								<suppressionFile>${owasp.falsePositives.dir}/xercesImpl.xml</suppressionFile>
								<suppressionFile>${owasp.falsePositives.dir}/CVE-2025-48976.xml</suppressionFile>
							</suppressionFiles>
							<!--
								Per eliminare il warning
								[WARNING] No lock file exists - this will result in false negatives; please run `npm install \-\-package-lock`
								[WARNING] Analyzing `/tmp/dctempf0629e0d-f705-4679-abf5-ebc3ee3408e7/check13553886643871381811tmp/238/META-INF/resources/webjars/jquery-ui/1.14.1/package.json` - 			however, the node_modules directory does not exist. Please run `npm install` prior to running dependency-check
								Il tool sta trattando i package.json nei WebJars come se fossero un progetto Node.js.
								In un JAR non ci saranno mai node_modules, quindi questi warning sono normali e non indicano un problema reale.
								Il jar 'jquery-ui-1.14.1.jar', essendo un archivio jar, è già sotto controllo su NVD.
							-->
							<nodeAnalyzerEnabled>false</nodeAnalyzerEnabled>
							<!-- per gestire ritardi dovuti al NVD server -->
							<nvdApiDelay>120000</nvdApiDelay><!-- 2 minuti -->
							<nvdMaxRetryCount>3</nvdMaxRetryCount> <!-- 3 max tentativi visto il timeout alto -->
						</configuration>
						<goals>
							<goal>aggregate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- 
				Il plugin seguente serve a risolvere il problema del plugin di owasp della versione in uso, 
				che ignora la configurazione 'outputDirectory' 
			-->
			<!--
			Non funzionava correttamente, lasciare anzi le directory inutili in ./mvn/dependencies/testsuite/dependency-check-result , ./mvn/dependencies/dependency-check-result e ./mvn/dependency-check-result
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven-resources-plugin}</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>${owasp}</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${owasp.output.dir}</outputDirectory>
							<resources>          
								<resource>
									<directory>${project.parent.parent.basedir}/mvn/dependencies/target</directory>
								</resource>
							</resources>              
						</configuration>            
					</execution>
				</executions>
			</plugin>
			-->

		</plugins>
	</build>

</project>
