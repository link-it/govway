
<project name="setup-distrib" basedir=".">
	
	<description>
        	SETUP DISTRIB
	</description>

	<import file="../../commons/utils.xml" />
	
	<!-- per mantenere vecchio codice, se si disabilita -->
	<var name="use_govway_nodirun_properties" value="true"/>

	<target name="make-distrib">
		
		<!-- Installazione GovWay -->		
		<if>
			<matches string="${antinstaller_as}" pattern="wildfly.*"/>
			<then>
				<if>
					<equals arg1="${build_openspcoop_archive_suffix}" arg2="stateless"/>
					<then>
						<copy file="${deploy_resources}/${build_openspcoop_archive_suffix}/INSTALL_WILDFLY" tofile="${dist}/INSTALL.txt" />
					</then>
					<else>
						<if>
							<copy file="${deploy_resources}/${build_openspcoop_archive_suffix}/INSTALL_WILDFLY" tofile="${dist}/INSTALL.txt" />
						</if>
						<mkdir dir="${dist}/jms" />
						<copy todir="${dist}/jms" flatten="true">
							<fileset dir="${deploy_jms}/${antinstaller_as}">
								<include name="*"/>
								<type type="file"/>
							</fileset>
						</copy>
					</else>
				</if>
			</then>
		</if>
		<if>
			<matches string="${antinstaller_as}" pattern="tomcat.*"/>
			<then>
				<copy file="${deploy_resources}/${build_openspcoop_archive_suffix}/INSTALL_TOMCAT" tofile="${dist}/INSTALL.txt" />
			</then>
		</if>
		<replace file="${dist}/INSTALL.txt" token="/etc/govway/" value="${work_dir}"/>
		
		<!-- Datasource -->
		<mkdir dir="${dist}/datasource"/>
		<copy todir="${dist}/datasource">
		    <fileset dir="${tmp_ds}">
		      <include name="*.xml"/>
		    </fileset>
		</copy>
		<if>
			<equals arg1="${antinstaller_console_env}" arg2="manager"/>
			<then>
				<mkdir dir="${dist}/datasource/manager"/>
				<mkdir dir="${dist}/datasource/runtime"/>

				<!-- copio datasource in manager -->
				<copy todir="${dist}/datasource/manager">
					<fileset dir="${dist}/datasource">
						<!-- ci vuole per govwayConsole monitoraggio messaggi in carico <exclude name="govway-ds.xml"/> -->
						<exclude name="domibus-ds.xml"/>
						<exclude name="govway.xml"/>
						<exclude name="govwaySec.xml"/>
						<exclude name="manager"/>
						<exclude name="runtime"/>
					</fileset>
				</copy>

				<!-- elimino datasource che non servono in runtime -->
				<if>
					<matches string="${antinstaller_as}" pattern="tomcat.*"/>
					<then>
						<delete>
							<fileset dir="${dist}/datasource">
								<exclude name="govway.xml"/>
								<exclude name="govwaySec.xml"/>
								<exclude name="manager"/>
								<exclude name="manager/**"/>
								<exclude name="runtime"/>
							</fileset>
						</delete>
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${antinstaller_log_db}" arg2="runtime"/>
						<equals arg1="${antinstaller_config_db}" arg2="config"/>
					</and>
					<then>
						<delete file="${dist}/datasource/govway_tracciamento-ds.xml"/>
					</then>
				</if>
				<!--
				Il datasource delle statistiche serve al runtime per il controllo del traffico
				<if>
					<equals arg1="${antinstaller_stats_env}" arg2="batch"/>
					<then>
						<delete file="${dist}/datasource/govway_statistiche-ds.xml"/>
					</then>
				</if>
				-->

				<!-- copio datasource in runtime -->
				<move todir="${dist}/datasource/runtime">
					<fileset dir="${dist}/datasource">
						<exclude name="manager"/>
						<exclude name="manager/**"/>
						<exclude name="runtime"/>
					</fileset>
				</move>
				<replace dir="${dist}/datasource/manager" 
					token="&lt;min-pool-size>10&lt;/min-pool-size>" 
					value="&lt;min-pool-size>5&lt;/min-pool-size>"/>
				<replace dir="${dist}/datasource/manager" 
					token="&lt;max-pool-size>50&lt;/max-pool-size>" 
					value="&lt;max-pool-size>20&lt;/max-pool-size>"/>
			</then>
		</if>
		<if>
			<or>
				<equals arg1="${antinstaller_integration_manager}" arg2="true" />
				<equals arg1="${antinstaller_timer_consegna}" arg2="true" />
			</or>
			<then>
				<if>
					<equals arg1="${antinstaller_console_env}" arg2="manager"/>
					<then>
						<var name="datasource_dir_ds_creati" value="${dist}/datasource/runtime"/>
					</then>
					<else>
						<var name="datasource_dir_ds_creati" value="${dist}/datasource"/>
					</else>
				</if>

				<if>
					<matches string="${antinstaller_as}" pattern="tomcat.*"/>
					<then>
						<loadfile
						    encoding="UTF-8"
						    property="propDataSourceGovWayRuntimeFile"
						    srcFile="${datasource_dir_ds_creati}/govway.xml" />
						<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSource" 
							override="true"
							input="${propDataSourceGovWayRuntimeFile}"
							regexp="[\sA-Za-z0-9 ]*Datasource per i dati di runtime di GovWay[\sA-Za-z0-9&lt;>\- ]*(&lt;Resource[\sA-Za-z0-9&lt;>\- &quot;=.\/:_@?;]*\/>).*"
							select="\1"/>
						
						<if>
							<equals arg1="${antinstaller_log_db}" arg2="log"/>
							<then>
								<propertyregex property="propDataSourceGovWayTracciamentoFileSingleDataSource" 
									override="true"
									input="${propDataSourceGovWayRuntimeFile}"
									regexp="[\sA-Za-z0-9 ]*Datasouce contenente le tracce di GovWay[\sA-Za-z0-9&lt;>\- ]*(&lt;Resource[\sA-Za-z0-9&lt;>\- &quot;=.\/:_@?;]*\/>).*"
									select="\1"/>
							</then>
						</if>

						<if>
							<equals arg1="${antinstaller_timer_consegna}" arg2="true" />
							<then>

								<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSourceRuntimeConsegnaAsincrona"
									       input="${propDataSourceGovWayRuntimeFileSingleDataSource}"
									       regexp="datasource"
									       replace="datasource.runtime.consegnaAsincrona"
									       global="true" />
								<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSourceRuntimeConsegnaAsincrona"
									       override="true"
										input="${propDataSourceGovWayRuntimeFileSingleDataSourceRuntimeConsegnaAsincrona}"
									       regexp="&quot;10&quot;"
									       replace="&quot;5&quot;"
									       global="true" />
								<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSourceRuntimeConsegnaAsincrona"
									       override="true"
										input="${propDataSourceGovWayRuntimeFileSingleDataSourceRuntimeConsegnaAsincrona}"
									       regexp="&quot;50&quot;"
									       replace="&quot;20&quot;"
									       global="true" />
								<antcall target="replace_token">
								    <param name="file" value="${datasource_dir_ds_creati}/govway.xml"/>
									<param name="token" value="&lt;/Context>"/>
									<param name="value" value="HEADERDATASOURCE${propDataSourceGovWayRuntimeFileSingleDataSourceRuntimeConsegnaAsincrona}ACAPOACAPOACAPO&lt;/Context>"/>
								</antcall>
								<replace file="${datasource_dir_ds_creati}/govway.xml">
									<replacetoken>HEADERDATASOURCE</replacetoken>
									<replacevalue><![CDATA[

	<!-- Datasource utilizzato dal Timer di consegna delle notifiche  -->

	]]></replacevalue>
								</replace>
								<replace file="${datasource_dir_ds_creati}/govway.xml">
									<replacetoken>ACAPOACAPOACAPO&lt;/Context></replacetoken>
									<replacevalue><![CDATA[


</Context>]]></replacevalue>
								</replace>

								<if>
									<equals arg1="${antinstaller_log_db}" arg2="log"/>
									<then>
										<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSourceTracciamentoConsegnaAsincrona"
											       input="${propDataSourceGovWayTracciamentoFileSingleDataSource}"
											       regexp="datasource.tracciamento"
											       replace="datasource.tracciamento.consegnaAsincrona"
											       global="true" />
										<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSourceTracciamentoConsegnaAsincrona"
											       override="true"
												input="${propDataSourceGovWayRuntimeFileSingleDataSourceTracciamentoConsegnaAsincrona}"
											       regexp="&quot;10&quot;"
									       	       replace="&quot;5&quot;"
											       global="true" />
										<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSourceTracciamentoConsegnaAsincrona"
											       override="true"
												input="${propDataSourceGovWayRuntimeFileSingleDataSourceTracciamentoConsegnaAsincrona}"
											       regexp="&quot;50&quot;"
										      	       replace="&quot;20&quot;"
											       global="true" />
										<antcall target="replace_token">
										    <param name="file" value="${datasource_dir_ds_creati}/govway.xml"/>
											<param name="token" value="&lt;/Context>"/>
											<param name="value" value="HEADERDATASOURCE${propDataSourceGovWayRuntimeFileSingleDataSourceTracciamentoConsegnaAsincrona}ACAPOACAPOACAPO&lt;/Context>"/>
										</antcall>
										<replace file="${datasource_dir_ds_creati}/govway.xml">
											<replacetoken>HEADERDATASOURCE</replacetoken>
											<replacevalue><![CDATA[

	<!-- Datasource utilizzato dal Timer di consegna delle notifiche per il tracciamento  -->

	]]></replacevalue>
										</replace>
										<replace file="${datasource_dir_ds_creati}/govway.xml">
											<replacetoken>ACAPOACAPOACAPO&lt;/Context></replacetoken>
											<replacevalue><![CDATA[


</Context>]]></replacevalue>
										</replace>
									</then>
								</if>
							</then>
						</if>

						<if>
							<equals arg1="${antinstaller_integration_manager}" arg2="true" />
							<then>
								<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSourceRuntimeIntegrationManager"
									       input="${propDataSourceGovWayRuntimeFileSingleDataSource}"
									       regexp="datasource"
									       replace="datasource.runtime.messageBoxIM"
									       global="true" />
								<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSourceRuntimeIntegrationManager"
									       override="true"
										input="${propDataSourceGovWayRuntimeFileSingleDataSourceRuntimeIntegrationManager}"
									       regexp="&quot;10&quot;"
							       	       replace="&quot;5&quot;"
									       global="true" />
								<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSourceRuntimeIntegrationManager"
									       override="true"
										input="${propDataSourceGovWayRuntimeFileSingleDataSourceRuntimeIntegrationManager}"
									       regexp="&quot;50&quot;"
									       replace="&quot;20&quot;"
									       global="true" />
								<antcall target="replace_token">
								    <param name="file" value="${datasource_dir_ds_creati}/govway.xml"/>
									<param name="token" value="&lt;/Context>"/>
									<param name="value" value="HEADERDATASOURCE${propDataSourceGovWayRuntimeFileSingleDataSourceRuntimeIntegrationManager}ACAPOACAPOACAPO&lt;/Context>"/>
								</antcall>
								<replace file="${datasource_dir_ds_creati}/govway.xml">
									<replacetoken>HEADERDATASOURCE</replacetoken>
									<replacevalue><![CDATA[

	<!-- Datasource utilizzato dal servizio MessageBox/IntegrationManager  -->

	]]></replacevalue>
								</replace>
								<replace file="${datasource_dir_ds_creati}/govway.xml">
									<replacetoken>ACAPOACAPOACAPO&lt;/Context></replacetoken>
									<replacevalue><![CDATA[


</Context>]]></replacevalue>
								</replace>

								<if>
									<equals arg1="${antinstaller_log_db}" arg2="log"/>
									<then>
										<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSourceTracciamentoIntegrationManager"
											       input="${propDataSourceGovWayTracciamentoFileSingleDataSource}"
											       regexp="datasource.tracciamento"
											       replace="datasource.tracciamento.messageBoxIM"
											       global="true" />
										<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSourceTracciamentoIntegrationManager"
											       override="true"
												input="${propDataSourceGovWayRuntimeFileSingleDataSourceTracciamentoIntegrationManager}"
											       regexp="&quot;10&quot;"
									       	       replace="&quot;5&quot;"
											       global="true" />
										<propertyregex property="propDataSourceGovWayRuntimeFileSingleDataSourceTracciamentoIntegrationManager"
											       override="true"
												input="${propDataSourceGovWayRuntimeFileSingleDataSourceTracciamentoIntegrationManager}"
											       regexp="&quot;50&quot;"
										      	       replace="&quot;20&quot;"
											       global="true" />
										<antcall target="replace_token">
										    <param name="file" value="${datasource_dir_ds_creati}/govway.xml"/>
											<param name="token" value="&lt;/Context>"/>
											<param name="value" value="HEADERDATASOURCE${propDataSourceGovWayRuntimeFileSingleDataSourceTracciamentoIntegrationManager}ACAPOACAPOACAPO&lt;/Context>"/>
										</antcall>
										<replace file="${datasource_dir_ds_creati}/govway.xml">
											<replacetoken>HEADERDATASOURCE</replacetoken>
											<replacevalue><![CDATA[

	<!-- Datasource utilizzato dal servizio MessageBox/IntegrationManager per il tracciamento  -->

	]]></replacevalue>
										</replace>
										<replace file="${datasource_dir_ds_creati}/govway.xml">
											<replacetoken>ACAPOACAPOACAPO&lt;/Context></replacetoken>
											<replacevalue><![CDATA[


</Context>]]></replacevalue>
										</replace>
									</then>
								</if>
							</then>
						</if>

					</then>
					<else>
						<if>
							<equals arg1="${antinstaller_timer_consegna}" arg2="true" />
							<then>
								<copy file="${datasource_dir_ds_creati}/govway-ds.xml" tofile="${datasource_dir_ds_creati}/govway_runtime_consegnaAsincrona-ds.xml" />
								<replace file="${datasource_dir_ds_creati}/govway_runtime_consegnaAsincrona-ds.xml" 
									token="&lt;min-pool-size>10&lt;/min-pool-size>" 
									value="&lt;min-pool-size>5&lt;/min-pool-size>"/>
								<replace file="${datasource_dir_ds_creati}/govway_runtime_consegnaAsincrona-ds.xml" 
									token="&lt;max-pool-size>50&lt;/max-pool-size>" 
									value="&lt;max-pool-size>20&lt;/max-pool-size>"/>
								<replace file="${datasource_dir_ds_creati}/govway_runtime_consegnaAsincrona-ds.xml" 
									token="org.govway.datasource" 
									value="org.govway.datasource.runtime.consegnaAsincrona"/>
								<if>
									<equals arg1="${antinstaller_log_db}" arg2="log"/>
									<then>
										<copy file="${datasource_dir_ds_creati}/govway_tracciamento-ds.xml" tofile="${datasource_dir_ds_creati}/govway_tracciamento_consegnaAsincrona-ds.xml" />
										<replace file="${datasource_dir_ds_creati}/govway_tracciamento_consegnaAsincrona-ds.xml" 
											token="&lt;min-pool-size>10&lt;/min-pool-size>" 
											value="&lt;min-pool-size>5&lt;/min-pool-size>"/>
										<replace file="${datasource_dir_ds_creati}/govway_tracciamento_consegnaAsincrona-ds.xml" 
											token="&lt;max-pool-size>50&lt;/max-pool-size>" 
											value="&lt;max-pool-size>20&lt;/max-pool-size>"/>
										<replace file="${datasource_dir_ds_creati}/govway_tracciamento_consegnaAsincrona-ds.xml" 
											token="org.govway.datasource.tracciamento" 
											value="org.govway.datasource.tracciamento.consegnaAsincrona"/>
									</then>
								</if>
							</then>
						</if>
						<if>
							<equals arg1="${antinstaller_integration_manager}" arg2="true" />
							<then>
								<copy file="${datasource_dir_ds_creati}/govway-ds.xml" tofile="${datasource_dir_ds_creati}/govway_runtime_messageBoxIM-ds.xml" />
								<replace file="${datasource_dir_ds_creati}/govway_runtime_messageBoxIM-ds.xml" 
									token="&lt;min-pool-size>10&lt;/min-pool-size>" 
									value="&lt;min-pool-size>5&lt;/min-pool-size>"/>
								<replace file="${datasource_dir_ds_creati}/govway_runtime_messageBoxIM-ds.xml" 
									token="&lt;max-pool-size>50&lt;/max-pool-size>" 
									value="&lt;max-pool-size>20&lt;/max-pool-size>"/>
								<replace file="${datasource_dir_ds_creati}/govway_runtime_messageBoxIM-ds.xml" 
									token="org.govway.datasource" 
									value="org.govway.datasource.runtime.messageBoxIM"/>
								<if>
									<equals arg1="${antinstaller_log_db}" arg2="log"/>
									<then>
										<copy file="${datasource_dir_ds_creati}/govway_tracciamento-ds.xml" tofile="${datasource_dir_ds_creati}/govway_tracciamento_messageBoxIM-ds.xml" />
										<replace file="${datasource_dir_ds_creati}/govway_tracciamento_messageBoxIM-ds.xml" 
											token="&lt;min-pool-size>10&lt;/min-pool-size>" 
											value="&lt;min-pool-size>5&lt;/min-pool-size>"/>
										<replace file="${datasource_dir_ds_creati}/govway_tracciamento_messageBoxIM-ds.xml" 
											token="&lt;max-pool-size>50&lt;/max-pool-size>" 
											value="&lt;max-pool-size>20&lt;/max-pool-size>"/>
										<replace file="${datasource_dir_ds_creati}/govway_tracciamento_messageBoxIM-ds.xml" 
											token="org.govway.datasource.tracciamento" 
											value="org.govway.datasource.tracciamento.messageBoxIM"/>
									</then>
								</if>
							</then>
						</if>
					</else>
				</if>
			</then>
		</if>
		<if>
			<and>
				<matches string="${build_for_as}" pattern="tomcat.*"/>
				<istrue value="${build_openspcoop_sec_archive}" />
			</and>
			<then>
				<if>
					<equals arg1="${antinstaller_console_env}" arg2="manager"/>
					<then>
						<var name="datasource_dir_ds_creati" value="${dist}/datasource/runtime"/>
					</then>
					<else>
						<var name="datasource_dir_ds_creati" value="${dist}/datasource"/>
					</else>
				</if>
				<copy file="${datasource_dir_ds_creati}/govway.xml" tofile="${datasource_dir_ds_creati}/govwaySec.xml"/>
			</then>
		</if>


		<!-- Cfg -->
		<mkdir dir="${dist}/cfg"/>
		<copy todir="${dist}/cfg">
			<fileset dir="${deploy_resources}/core"/>
		</copy>
		<copy todir="${dist}/cfg">
		    <fileset dir="${tmp_cfg}" />
		</copy>
                <fileset dir="${dist}/cfg" id="distCFG.txt">
                        <include name="*"/>
                </fileset>
		<pathconvert pathsep=" " property="distCFG_list.txt" refid="distCFG.txt">
                        <map from="${dist}/cfg" to=""/>
                </pathconvert>
		<echo message="LIST CFG [${distCFG_list.txt}]"/>
		<if>
			<equals arg1="${distCFG_list.txt}" arg2=""/>
			<then>
				<delete dir="${dist}/cfg"/>
			</then>
		</if>
		<if>
			<not>
				<istrue value="${antinstaller_rs_config}" />
			</not>
			<then>
				<delete file="${dist}/cfg/rs-api-config_local.properties"/>
			</then>
		</if>
		<if>
			<not>
				<istrue value="${antinstaller_rs_monitor}" />
			</not>
			<then>
				<delete file="${dist}/cfg/rs-api-monitor_local.properties"/>
			</then>
		</if>
		<replace file="${dist}/cfg/govway_local.jcs.properties" token="/etc/govway/indexed-disk-cache" value="${work_dir}/indexed-disk-cache"/>

		<if>
			<equals arg1="${antinstaller_modalita_installazione}" arg2="aggiornamento"/>
			<then>
				<mkdir dir="${dist}/cfg/utilities/diff"/>

				<antcall target="_setup_properties_aggiornamento"/>

				<replace dir="${dist}/cfg/utilities/diff" token="/etc/govway/indexed-disk-cache" value="${work_dir}/indexed-disk-cache"/>


				<move todir="${dist}/cfg" includeemptydirs="false">
					<fileset dir="${dist}/cfg">
						<include name="*.properties"/>
					</fileset>
					<mapper type="glob" from="*.properties" to="*.properties.new"/>
				</move>
				<move todir="${dist}/cfg" includeemptydirs="false">
					<fileset dir="${dist}/cfg">
						<include name="*.yaml"/>
					</fileset>
					<mapper type="glob" from="*.yaml" to="*.yaml.new"/>
				</move>

			</then>
		</if>

		<var name="govway_local_properties_name" value="govway_local.properties"/>
		<if>
			<equals arg1="${antinstaller_modalita_installazione}" arg2="aggiornamento"/>
			<then>
				<var name="govway_local_properties_name" value="govway_local.properties.new"/>
			</then>
		</if>
		<antcall target="replace_token">
		    <param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
			<param name="token" value="/govway/SOGGETTO_LOCALE/"/>
			<param name="value" value="/govway/${antinstaller_nomesoggetto}/"/>
		</antcall>
		<if>
			<equals arg1="${antinstaller_stats_env}" arg2="batch"/>
			<then>
				<replaceregexp file="${dist}/cfg/${govway_local_properties_name}"
					       match="([a-zA-Zèéàùìò0-9=&quot;\.:\/@;,?#'_&lt;>\s]*)# Generazione Report[a-zA-Zèéàùìò0-9=&quot;\.:\/@;,?#'_&lt;>\s]*org\.openspcoop2\.pdd\.statistiche\.generazione\.baseMensile\.gestioneUltimoMese=false([a-zA-Zèéàùìò0-9=&quot;\.:\/@;,?#'_&lt;>\s]*)"
					       replace="\1COMMENTOSTATISTICHE\2"
					       byline="false"/>
				<replace file="${dist}/cfg/${govway_local_properties_name}">
							<replacetoken>COMMENTOSTATISTICHE</replacetoken>
							<replacevalue><![CDATA[# Generazione Report
#
# La generazione dei report statistici è disabilitata. Verrà gestita tramite l'applicazione batch.]]></replacevalue>
				</replace>
			</then>
		</if>
		<if>
			<equals arg1="${antinstaller_gestione_nodi}" arg2="dynamic"/>
			<then>
				<replaceregexp file="${dist}/cfg/${govway_local_properties_name}"
					       match="# Identificativo univoco [a-zA-Z].*\s#[a-zA-Z0-9_=\.].*\s\s# [a-zA-Z0-9_\.].*\s# NOTA[a-zA-Z:0-9>&lt;=].*\s#org[a-z0-9_\.].*=NUMERO\s#\s#.*\s#.*\s#.*\s#.*\s#.*\s#org[a-z0-9_\.].*=NUMEROCIFRE"
					       replace="COMMENTOCLUSTERDINAMICO"
					       byline="false"/>
				<replace file="${dist}/cfg/${govway_local_properties_name}">
							<replacetoken>COMMENTOCLUSTERDINAMICO</replacetoken>
							<replacevalue><![CDATA[# Configurazione Cluster Dinamica
org.openspcoop2.pdd.cluster_dinamico.enabled=true
# Refresh della data di registrazione di un nodo (secondi)
org.openspcoop2.pdd.cluster_dinamico.refresh=30
# Identificativo del gruppo dei nodi
org.openspcoop2.pdd.group_id=IDENTIFICATIVOGRUPPO
# Identificativo del nodo
org.openspcoop2.pdd.cluster_id=${HOSTNAME}
org.openspcoop2.pdd.cluster_id.hash.enabled=true
# Cifre utilizzate per l’identificativo univoco numerico
# 1: permette di avere 10 macchine (da 0 a 9)
# 2: permette di avere 100 macchine (da 0 a 99)
org.openspcoop2.pdd.cluster_id.numeric.dinamico.cifre=CIFREIDMESSAGGIO]]></replacevalue>
				</replace>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="IDENTIFICATIVOGRUPPO"/>
					<param name="value" value="${antinstaller_gestione_nodi_group_id}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="CIFREIDMESSAGGIO"/>
					<param name="value" value="${antinstaller_gestione_nodi_numeric_id_cifre}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="#org.openspcoop2.pdd.check.readJMXResources.enabled=true"/>
					<param name="value" value="org.openspcoop2.pdd.check.readJMXResources.enabled=true"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="#org.openspcoop2.pdd.check.readJMXResources.username=USERNAME"/>
					<param name="value" value="org.openspcoop2.pdd.check.readJMXResources.username=${antinstaller_gestione_nodi_check_username}"/>
				</antcall>
				<if>
					<equals arg1="${antinstaller_gestione_nodi_check_password}" arg2=""/>
					<then>
						<java classname="org.openspcoop2.utils.crypt.PasswordGenerator" fork="true" outputproperty="antinstaller_gestione_nodi_check_password_final">
							<classpath>
								<path id="classpath_run">
									<fileset dir="${deploy_sw}" includes="**/openspcoop2_utils_*.jar"/>
									<fileset dir="${deploy_sw}" includes="jars/commons-codec-1.16.0.jar"/>
									<fileset dir="${deploy_sw}" includes="jars/commons-lang-2.6.jar"/>
							   	</path>				
							</classpath>
						</java>
					</then>
					<else>
						<var name="antinstaller_gestione_nodi_check_password_final" value="${antinstaller_gestione_nodi_check_password}"/>
					</else>
				</if>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="#org.openspcoop2.pdd.check.readJMXResources.password=PASSWORD"/>
					<param name="value" value="org.openspcoop2.pdd.check.readJMXResources.password=${antinstaller_gestione_nodi_check_password_final}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="# JMX Resources"/>
					<param name="value" value="COMMENTOJMXRESOURCES"/>
				</antcall>
				<if>
					<equals arg1="${antinstaller_gestione_nodi_proxy_password}" arg2=""/>
					<then>
						<java classname="org.openspcoop2.utils.crypt.PasswordGenerator" fork="true" outputproperty="antinstaller_gestione_nodi_proxy_password_final">
							<classpath>
								<path id="classpath_run">
									<fileset dir="${deploy_sw}" includes="**/openspcoop2_utils_*.jar"/>
									<fileset dir="${deploy_sw}" includes="jars/commons-codec-1.16.0.jar"/>
									<fileset dir="${deploy_sw}" includes="jars/commons-lang-2.6.jar"/>
							   	</path>				
							</classpath>
						</java>
					</then>
					<else>
						<var name="antinstaller_gestione_nodi_proxy_password_final" value="${antinstaller_gestione_nodi_proxy_password}"/>
					</else>
				</if>
				<replace file="${dist}/cfg/${govway_local_properties_name}">
					<replacetoken>COMMENTOJMXRESOURCES</replacetoken>
					<replacevalue><![CDATA[# Configurazione Servizio 'proxy'
org.openspcoop2.pdd.proxyJMXResources.enabled=true
org.openspcoop2.pdd.proxyJMXResources.username=PROXYUSERNAME
org.openspcoop2.pdd.proxyJMXResources.password=PROXYPASSWORD
# Configurazione modalità asincrona del servizio 'proxy'
org.openspcoop2.pdd.proxyJMXResources.asyncUpdate=PROXYASYNCUPDATESTATO
org.openspcoop2.pdd.proxyJMXResources.asyncUpdate.schema=PROXYASYNCUPDATESCHEMA
org.openspcoop2.pdd.proxyJMXResources.asyncUpdate.hostname=PROXYASYNCUPDATEHOSTNAME
org.openspcoop2.pdd.proxyJMXResources.asyncUpdate.port=PROXYASYNCUPDATEPORT
org.openspcoop2.pdd.proxyJMXResources.asyncUpdate.checkInterval=PROXYASYNCUPDATEINTERVAL
#org.openspcoop2.pdd.proxyJMXResources.asyncUpdate.serviceClass=PROXYASYNCUPDATESERVICECLASS
# Configurazione Servizio 'check']]></replacevalue>
				</replace>
				<antcall target="replace_token">
				 	<param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="PROXYUSERNAME"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_username}"/>
				</antcall>
				<antcall target="replace_token">
				    	<param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="PROXYPASSWORD"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_password_final}"/>
				</antcall>
				<antcall target="replace_token">
				    	<param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="PROXYASYNCUPDATESTATO"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_asyncUpdate}"/>
				</antcall>
				<antcall target="replace_token">
				    	<param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="PROXYASYNCUPDATESCHEMA"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_asyncUpdate_schema}"/>
				</antcall>
				<antcall target="replace_token">
				    	<param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="PROXYASYNCUPDATEHOSTNAME"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_asyncUpdate_hostname}"/>
				</antcall>
				<antcall target="replace_token">
				    	<param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="PROXYASYNCUPDATEPORT"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_asyncUpdate_port}"/>
				</antcall>
				<antcall target="replace_token">
				    	<param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="PROXYASYNCUPDATEINTERVAL"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_asyncUpdate_checkInterval}"/>
				</antcall>
				<antcall target="replace_token">
				    	<param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
					<param name="token" value="PROXYASYNCUPDATESERVICECLASS"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_asyncUpdate_classname}"/>
				</antcall>
				<if>
					<not>
						<equals arg1="${antinstaller_gestione_nodi_proxy_asyncUpdate_classname}" arg2=""/>
					</not>
					<then>
						<antcall target="replace_token">
						    	<param name="file" value="${dist}/cfg/${govway_local_properties_name}"/>
							<param name="token" value="#org.openspcoop2.pdd.proxyJMXResources.asyncUpdate.serviceClass"/>
							<param name="value" value="org.openspcoop2.pdd.proxyJMXResources.asyncUpdate.serviceClass"/>
						</antcall>
					</then>
				</if>
			</then>
		</if>

		<var name="govway_fileTrace_log4j2_properties_name" value="govway.fileTrace.log4j2.properties"/>
		<if>
			<equals arg1="${antinstaller_modalita_installazione}" arg2="aggiornamento"/>
			<then>
				<var name="govway_fileTrace_log4j2_properties_name" value="govway.fileTrace.log4j2.properties.new"/>
			</then>
		</if>
		<antcall target="replace_token">
		    <param name="file" value="${dist}/cfg/${govway_fileTrace_log4j2_properties_name}"/>
			<param name="token" value="/var/govway/log"/>
			<param name="value" value="${log_dir}"/>
		</antcall>
		
		<var name="govway_hazelcast_properties_name" value="govway_local.hazelcast.yaml"/>
		<if>
			<equals arg1="${antinstaller_modalita_installazione}" arg2="aggiornamento"/>
			<then>
				<var name="govway_hazelcast_properties_name" value="govway_local.hazelcast.yaml.new"/>
			</then>
		</if>

		<var name="console_local_properties_name" value="console_local.properties"/>
		<if>
			<equals arg1="${antinstaller_modalita_installazione}" arg2="aggiornamento"/>
			<then>
				<var name="console_local_properties_name" value="console_local.properties.new"/>
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${antinstaller_gestione_nodi}" arg2="dynamic"/>
				<equals arg1="${use_govway_nodirun_properties}" arg2="false"/>
			</and>
			<then>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${console_local_properties_name}"/>
					<param name="token" value="# Configurazione PdD in Load Balancing"/>
					<param name="value" value="# Configurazione Cluster Dinamica"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${console_local_properties_name}"/>
					<param name="token" value="#risorseJmxPdd.tipoAccesso=openspcoop"/>
					<param name="value" value="CLUSTERDINAMICO"/>
				</antcall>
				<replace file="${dist}/cfg/${console_local_properties_name}">
					<replacetoken>CLUSTERDINAMICO</replacetoken>
					<replacevalue><![CDATA[cluster_dinamico.enabled=true
risorseJmxPdd.tipoAccesso=openspcoop]]></replacevalue>
				</replace>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${console_local_properties_name}"/>
					<param name="token" value="#risorseJmxPdd.aliases=IDGW1,..,IDGWN"/>
					<param name="value" value="risorseJmxPdd.aliases=${antinstaller_gestione_nodi_group_id}"/>
				</antcall>
				<replaceregexp file="${dist}/cfg/${console_local_properties_name}"
					       match="# Configurazione IDGW1\s.*\s.*\s.*\s.*\s.*\s.*\s.*\s.*\s.*PASSWORDGWN"
					       replace="COMMENTOCLUSTERDINAMICO"
					       byline="false"/>
				<replace file="${dist}/cfg/${console_local_properties_name}">
					<replacetoken>COMMENTOCLUSTERDINAMICO</replacetoken>
					<replacevalue><![CDATA[IDENTIFICATIVOGRUPPO.risorseJmxPdd.descrizione=IDENTIFICATIVOGRUPPO
IDENTIFICATIVOGRUPPO.risorseJmxPdd.remoteAccess.url=URLSERVIZIOPROXY
IDENTIFICATIVOGRUPPO.risorseJmxPdd.remoteAccess.username=USERNAMESERVIZIOPROXY
IDENTIFICATIVOGRUPPO.risorseJmxPdd.remoteAccess.password=PASSWORDSERVIZIOPROXY]]></replacevalue>
				</replace>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${console_local_properties_name}"/>
					<param name="token" value="IDENTIFICATIVOGRUPPO"/>
					<param name="value" value="${antinstaller_gestione_nodi_group_id}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${console_local_properties_name}"/>
					<param name="token" value="URLSERVIZIOPROXY"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_url}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${console_local_properties_name}"/>
					<param name="token" value="USERNAMESERVIZIOPROXY"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_username}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${console_local_properties_name}"/>
					<param name="token" value="PASSWORDSERVIZIOPROXY"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_password_final}"/>
				</antcall>
				<replaceregexp file="${dist}/cfg/${console_local_properties_name}"
					       match="\s# Classificazione dei nodi in gruppi\s.*\s.*"
					       replace=""
					       byline="false"/>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${console_local_properties_name}"/>
					<param name="token" value="IDGW1"/>
					<param name="value" value="${antinstaller_gestione_nodi_group_id}"/>
				</antcall>

			</then>
		</if>
		<if>
			<and>
				<equals arg1="${antinstaller_gestione_nodi}" arg2="dynamic"/>
				<equals arg1="${antinstaller_gestione_nodi_proxy_asyncUpdate}" arg2="true"/>
			</and>
			<then>
				<replaceregexp file="${dist}/cfg/${console_local_properties_name}"
					       match="\s# Integrazione con IdM esterno\s"
					       replace="CLUSTERDINAMICO"
					       byline="false"/>
				<replace file="${dist}/cfg/${console_local_properties_name}">
					<replacetoken>CLUSTERDINAMICO</replacetoken>
					<replacevalue><![CDATA[
# Configurazione Cluster Dinamico
cluster.asyncUpdate=PROXYASYNCUPDATESTATO
# Frequenza di aggiornamento delle operazioni sui nodi run in secondi
cluster.asyncUpdate.checkInterval=PROXYASYNCUPDATEINTERVAL
# ================================================

# ================================================
# Integrazione con IdM esterno]]></replacevalue>
				</replace>

				<antcall target="replace_token">
				    	<param name="file" value="${dist}/cfg/${console_local_properties_name}"/>
					<param name="token" value="PROXYASYNCUPDATESTATO"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_asyncUpdate}"/>
				</antcall>
				<antcall target="replace_token">
				    	<param name="file" value="${dist}/cfg/${console_local_properties_name}"/>
					<param name="token" value="PROXYASYNCUPDATEINTERVAL"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_asyncUpdate_checkInterval}"/>
				</antcall>

			</then>
		</if>

		<var name="monitor_local_properties_name" value="monitor_local.properties"/>
		<if>
			<equals arg1="${antinstaller_modalita_installazione}" arg2="aggiornamento"/>
			<then>
				<var name="monitor_local_properties_name" value="monitor_local.properties.new"/>
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${antinstaller_gestione_nodi}" arg2="dynamic"/>
				<equals arg1="${use_govway_nodirun_properties}" arg2="false"/>
			</and>
			<then>
				<replaceregexp file="${dist}/cfg/${monitor_local_properties_name}"
					       match=".*\s# Configurazione in Singola Istanza\s.*\s.*\s.*\s.*\s.*\s# Configurazione in Load Balancing"
					       replace="CLUSTERDINAMICO"
					       byline="false"/>
				<replace file="${dist}/cfg/${monitor_local_properties_name}">
					<replacetoken>CLUSTERDINAMICO</replacetoken>
					<replacevalue><![CDATA[# ================================================
# Configurazione Cluster Dinamica
cluster_dinamico.enabled=true]]></replacevalue>
				</replace>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${monitor_local_properties_name}"/>
					<param name="token" value="#configurazioni.risorseJmxPdd.tipoAccesso=openspcoop"/>
					<param name="value" value="configurazioni.risorseJmxPdd.tipoAccesso=openspcoop"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${monitor_local_properties_name}"/>
					<param name="token" value="#configurazioni.risorseJmxPdd.aliases=IDGW1,..,IDGWN"/>
					<param name="value" value="configurazioni.risorseJmxPdd.aliases=${antinstaller_gestione_nodi_group_id}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${monitor_local_properties_name}"/>
					<param name="token" value="#statoPdD.sonde.standard.nodi=IDGW1,..,IDGWN"/>
					<param name="value" value="statoPdD.sonde.standard.nodi=${antinstaller_gestione_nodi_group_id}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${monitor_local_properties_name}"/>
					<param name="token" value="#transazioni.idCluster.useSondaPdDList=true"/>
					<param name="value" value="transazioni.idCluster.useSondaPdDList=true"/>
				</antcall>
				<replaceregexp file="${dist}/cfg/${monitor_local_properties_name}"
					       match="# Configurazione IDGW1\s.*\s.*\s.*\s.*\s.*\s.*\s.*\s.*\s.*\s.*\s.*PASSWORDGWN"
					       replace="COMMENTOCLUSTERDINAMICO"
					       byline="false"/>
				<replace file="${dist}/cfg/${monitor_local_properties_name}">
					<replacetoken>COMMENTOCLUSTERDINAMICO</replacetoken>
					<replacevalue><![CDATA[# Servizio 'proxy'
IDENTIFICATIVOGRUPPO.configurazioni.risorseJmxPdd.remoteAccess.url=URLSERVIZIOPROXY
IDENTIFICATIVOGRUPPO.configurazioni.risorseJmxPdd.remoteAccess.username=USERNAMESERVIZIOPROXY
IDENTIFICATIVOGRUPPO.configurazioni.risorseJmxPdd.remoteAccess.password=PASSWORDSERVIZIOPROXY

# Servizio 'check'
statoPdD.sonde.standard.IDENTIFICATIVOGRUPPO.url=URLSERVIZIOCHECK]]></replacevalue>
				</replace>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${monitor_local_properties_name}"/>
					<param name="token" value="IDENTIFICATIVOGRUPPO"/>
					<param name="value" value="${antinstaller_gestione_nodi_group_id}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${monitor_local_properties_name}"/>
					<param name="token" value="URLSERVIZIOPROXY"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_url}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${monitor_local_properties_name}"/>
					<param name="token" value="USERNAMESERVIZIOPROXY"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_username}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${monitor_local_properties_name}"/>
					<param name="token" value="PASSWORDSERVIZIOPROXY"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_password_final}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${monitor_local_properties_name}"/>
					<param name="token" value="URLSERVIZIOCHECK"/>
					<param name="value" value="${antinstaller_gestione_nodi_check_url}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${monitor_local_properties_name}"/>
					<param name="token" value="IDGW1"/>
					<param name="value" value="${antinstaller_gestione_nodi_group_id}"/>
				</antcall>
			</then>
		</if>

		<var name="govway_nodirun_properties_name" value="govway.nodirun.properties"/>
		<if>
			<equals arg1="${antinstaller_modalita_installazione}" arg2="aggiornamento"/>
			<then>
				<var name="govway_nodirun_properties_name" value="govway.nodirun.properties.new"/>
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${antinstaller_gestione_nodi}" arg2="dynamic"/>
				<equals arg1="${use_govway_nodirun_properties}" arg2="true"/>
			</and>
			<then>
				<replaceregexp file="${dist}/cfg/${govway_nodirun_properties_name}"
					       match=".*\s# Configurazione in Singola Istanza\s.*\s.*\s.*\s.*\s.*\s# Configurazione in Load Balancing"
					       replace="CLUSTERDINAMICO"
					       byline="false"/>
				<replace file="${dist}/cfg/${govway_nodirun_properties_name}">
					<replacetoken>CLUSTERDINAMICO</replacetoken>
					<replacevalue><![CDATA[# ================================================
# Configurazione Cluster Dinamico]]></replacevalue>
				</replace>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_nodirun_properties_name}"/>
					<param name="token" value="#tipoAccesso=govway"/>
					<param name="value" value="CLUSTERDINAMICO"/>
				</antcall>
				<replace file="${dist}/cfg/${govway_nodirun_properties_name}">
					<replacetoken>CLUSTERDINAMICO</replacetoken>
					<replacevalue><![CDATA[clusterDinamico=true
tipoAccesso=govway]]></replacevalue>
				</replace>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_nodirun_properties_name}"/>
					<param name="token" value="#aliases=IDGW1,..,IDGWN"/>
					<param name="value" value="aliases=${antinstaller_gestione_nodi_group_id}"/>
				</antcall>
				<replaceregexp file="${dist}/cfg/${govway_nodirun_properties_name}"
					       match="# Configurazione IDGW1\s.*\s.*\s.*\s.*\s.*\s.*\s.*\s.*\s.*PASSWORDGWN"
					       replace="COMMENTOCLUSTERDINAMICO"
					       byline="false"/>
				<replace file="${dist}/cfg/${govway_nodirun_properties_name}">
					<replacetoken>COMMENTOCLUSTERDINAMICO</replacetoken>
					<replacevalue><![CDATA[IDENTIFICATIVOGRUPPO.descrizione=IDENTIFICATIVOGRUPPO

# Servizio 'proxy'
IDENTIFICATIVOGRUPPO.remoteAccess.url=URLSERVIZIOPROXY
IDENTIFICATIVOGRUPPO.remoteAccess.username=USERNAMESERVIZIOPROXY
IDENTIFICATIVOGRUPPO.remoteAccess.password=PASSWORDSERVIZIOPROXY

# Servizio 'check'
IDENTIFICATIVOGRUPPO.remoteAccess.checkStatus.url=URLSERVIZIOCHECK]]></replacevalue>
				</replace>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_nodirun_properties_name}"/>
					<param name="token" value="IDENTIFICATIVOGRUPPO"/>
					<param name="value" value="${antinstaller_gestione_nodi_group_id}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_nodirun_properties_name}"/>
					<param name="token" value="URLSERVIZIOPROXY"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_url}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_nodirun_properties_name}"/>
					<param name="token" value="USERNAMESERVIZIOPROXY"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_username}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_nodirun_properties_name}"/>
					<param name="token" value="PASSWORDSERVIZIOPROXY"/>
					<param name="value" value="${antinstaller_gestione_nodi_proxy_password_final}"/>
				</antcall>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_nodirun_properties_name}"/>
					<param name="token" value="URLSERVIZIOCHECK"/>
					<param name="value" value="${antinstaller_gestione_nodi_check_url}"/>
				</antcall>
				<replaceregexp file="${dist}/cfg/${govway_nodirun_properties_name}"
					       match="\s# Classificazione dei nodi in gruppi\s.*\s.*"
					       replace=""
					       byline="false"/>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/cfg/${govway_nodirun_properties_name}"/>
					<param name="token" value="IDGW1"/>
					<param name="value" value="${antinstaller_gestione_nodi_group_id}"/>
				</antcall>

			</then>
		</if>

		<if>
			<istrue value="${antinstaller_protocollo_spcoop}" />
			<then>
				<var name="spcoop_local_properties_name" value="spcoop_local.properties"/>
				<if>
					<equals arg1="${antinstaller_modalita_installazione}" arg2="aggiornamento"/>
					<then>
						<var name="spcoop_local_properties_name" value="spcoop_local.properties.new"/>
					</then>
				</if>
				<if>
					<equals arg1="${antinstaller_gestione_nodi}" arg2="dynamic"/>
					<then>
						<antcall target="replace_token">
						    <param name="file" value="${dist}/cfg/${spcoop_local_properties_name}"/>
							<param name="token" value="org.openspcoop2.protocol.spcoop.id.tipo=static"/>
							<param name="value" value="org.openspcoop2.protocol.spcoop.id.tipo=${antinstaller_gestione_nodi_numeric_id_mode}"/>
						</antcall>
					</then>
				</if>
			</then>
		</if>

		<if>
			<equals arg1="${antinstaller_console_env}" arg2="manager"/>
			<then>
				<mkdir dir="${dist}/cfg/manager"/>
				<mkdir dir="${dist}/cfg/runtime"/>
				<move todir="${dist}/cfg/manager">
					<fileset dir="${dist}/cfg">
						<exclude name="govway_local*properties"/>
						<exclude name="govway_local*properties.new"/>
						<exclude name="govway_local*yaml"/>
						<exclude name="govway_local*yaml.new"/>
						<exclude name="govway.fileTrace*properties"/>
						<exclude name="govway.fileTrace*properties.new"/>
						<exclude name="consolePassword.properties"/>
						<exclude name="consolePassword.properties.new"/>
						<exclude name="govway.map.properties"/>
						<exclude name="govway.map.properties.new"/>
						<exclude name="hsm.properties"/>
						<exclude name="hsm.properties.new"/>
						<exclude name="ocsp.properties"/>
						<exclude name="ocsp.properties.new"/>
						<exclude name="byok.properties"/>
						<exclude name="byok.properties.new"/>
						<exclude name="govway.secrets.properties"/>
						<exclude name="govway.secrets.properties.new"/>
						<exclude name="trasparente*"/>
						<exclude name="modipa*"/>
						<exclude name="spcoop*"/>
						<exclude name="as4*"/>
						<exclude name="as4*/**"/>
						<exclude name="sdi*"/>
						<exclude name="manager"/>
						<exclude name="runtime"/>
						<exclude name="utilities/**/govway_local*"/>
						<exclude name="utilities/**/trasparente*"/>
						<exclude name="utilities/**/modipa*"/>
						<exclude name="utilities/**/spcoop*"/>
						<exclude name="utilities/**/as4*"/>
						<exclude name="utilities/**/as4*/**"/>
						<exclude name="utilities/**/sdi*"/>
					</fileset>
				</move>
				<copy todir="${dist}/cfg/manager">
					<fileset dir="${dist}/cfg">
						<include name="consolePassword.properties"/>
						<include name="consolePassword.properties.new"/>
						<include name="govway.map.properties"/>
						<include name="govway.map.properties.new"/>
						<include name="hsm.properties"/>
						<include name="hsm.properties.new"/>
						<include name="ocsp.properties"/>
						<include name="ocsp.properties.new"/>
						<include name="byok.properties"/>
						<include name="byok.properties.new"/>
						<include name="govway.secrets.properties"/>
						<include name="govway.secrets.properties.new"/>
						<include name="trasparente*"/>
						<include name="modipa*"/>
						<include name="spcoop*"/>
						<include name="as4*"/>
						<include name="as4*/**"/>
						<include name="sdi*"/>
						<include name="sdi*"/>
						<include name="utilities/**/trasparente*"/>
						<include name="utilities/**/modipa*"/>
						<include name="utilities/**/spcoop*"/>
						<include name="utilities/**/as4*"/>
						<include name="utilities/**/as4*/**"/>
						<include name="utilities/**/sdi*"/>
					</fileset>
				</copy>
				<move todir="${dist}/cfg/runtime">
					<fileset dir="${dist}/cfg">
						<exclude name="manager"/>
						<exclude name="manager/**"/>
						<exclude name="runtime"/>
					</fileset>
				</move>
			</then>
		</if>


		<!-- SQL -->
		<mkdir dir="${dist}/sql"/>
		<copy todir="${dist}/sql">
			<fileset dir="${tmp_sql}">
		                <include name="GovWay*.sql"/>
		        </fileset>
		</copy>
		<if>
			<equals arg1="${antinstaller_modalita_installazione}" arg2="nuova"/>
			<then>
				<var name="configInitSqlScriptName" value="GovWay_init.sql"/>
				<if>
					<equals arg1="${antinstaller_config_db}" arg2="config"/>
					<then>
						<var name="configInitSqlScriptName" value="GovWayConfigurazione_init.sql"/>
					</then>
				</if>				
				<concat destfile="${dist}/sql/${configInitSqlScriptName}" append="yes">
					<fileset dir="${tmp_sql}">
					    	<include name="InstallerProperties.sql"/>
					</fileset>
				</concat>
			</then>
			<else>
				<var name="configUpgradeSqlScriptName" value="GovWay_upgrade_${antinstaller_versione_attuale}.sql"/>
				<if>
					<equals arg1="${antinstaller_config_db}" arg2="config"/>
					<then>
						<var name="configUpgradeSqlScriptName" value="GovWayConfigurazione_upgrade_${antinstaller_versione_attuale}.sql"/>
					</then>
				</if>
				<concat destfile="${dist}/sql/${configUpgradeSqlScriptName}" append="yes">
					<fileset dir="${tmp_sql}">
					    	<include name="InstallerProperties.sql"/>
					</fileset>
				</concat>
			</else>
		</if>

		<if>
			<equals arg1="${antinstaller_modalita_installazione}" arg2="aggiornamento"/>
			<then>
				<mkdir dir="${dist}/sql/completi"/>
				<copy todir="${dist}/sql/completi">
					<fileset dir="${tmp_sql_completi}">
						<include name="GovWay*.sql"/>
					</fileset>
				</copy>
			</then>
		</if>
			
		<if>
			<or>
				<equals arg1="${build_sql_script_drop}" arg2="true"/>
				<equals arg1="${build_sql_script_delete}" arg2="true"/>
				<equals arg1="${antinstaller_modalita_installazione}" arg2="aggiornamento"/>
			</or>
			<then>
				<mkdir dir="${dist}/sql/utilities"/>
			</then>
		</if>
		<if>
			<equals arg1="${antinstaller_modalita_installazione}" arg2="nuova"/>
			<then>
				<if>
					<equals arg1="${build_sql_script_drop}" arg2="true"/>
					<then>
						<mkdir dir="${dist}/sql/utilities/drop"/>
						<copy todir="${dist}/sql/utilities/drop">
							<fileset dir="${tmp_sql}">
						    		<include name="govway-*drop.sql"/>
							</fileset>
						</copy>
					</then>
				</if>

				<if>
					<equals arg1="${build_sql_script_delete}" arg2="true"/>
					<then>
						<mkdir dir="${dist}/sql/utilities/delete"/>
						<copy todir="${dist}/sql/utilities/delete">
							<fileset dir="${tmp_sql}">
								<include name="govway-*delete.sql"/>
							</fileset>
						</copy>
					</then>
				</if>
			</then>
			<else>
				<if>
					<equals arg1="${build_sql_script_drop}" arg2="true"/>
					<then>
						<mkdir dir="${dist}/sql/utilities/drop"/>
						<copy todir="${dist}/sql/utilities/drop">
							<fileset dir="${tmp_sql_completi}">
						    		<include name="govway-*drop.sql"/>
							</fileset>
						</copy>
					</then>
				</if>

				<if>
					<equals arg1="${build_sql_script_delete}" arg2="true"/>
					<then>
						<mkdir dir="${dist}/sql/utilities/delete"/>
						<copy todir="${dist}/sql/utilities/delete">
							<fileset dir="${tmp_sql_completi}">
								<include name="govway-*delete.sql"/>
							</fileset>
						</copy>
					</then>
				</if>

				<mkdir dir="${dist}/sql/utilities/as"/>
				<copy todir="${dist}/sql/utilities/as">
					<fileset dir="${deploy_sql}/as">
					    	<include name="*.sql"/>
					</fileset>
				</copy>
			</else>
		</if>
		<if>
			<equals arg1="${antinstaller_tipo_database}" arg2="postgresql"/>
			<then>
				<mkdir dir="${dist}/sql/utilities/svecchiamento"/>
				<copy todir="${dist}/sql/utilities/svecchiamento">
					<fileset dir="${deploy_sql}/svecchiamento/postgresql">
				    		<include name="*"/>
					</fileset>
				</copy>
			</then>
		</if>
		<if>
			<equals arg1="${antinstaller_tipo_database}" arg2="oracle"/>
			<then>
				<mkdir dir="${dist}/sql/utilities/svecchiamento"/>
				<copy todir="${dist}/sql/utilities/svecchiamento">
					<fileset dir="${deploy_sql}/svecchiamento/oracle">
				    		<include name="*"/>
					</fileset>
				</copy>
			</then>
		</if>
		<if>
			<equals arg1="${antinstaller_tipo_database}" arg2="sqlserver"/>
			<then>
				<mkdir dir="${dist}/sql/utilities/svecchiamento"/>
				<copy todir="${dist}/sql/utilities/svecchiamento">
					<fileset dir="${deploy_sql}/svecchiamento/sqlserver">
				    		<include name="*"/>
					</fileset>
				</copy>
			</then>
		</if>
		<if>
			<equals arg1="${antinstaller_modalita_installazione}" arg2="aggiornamento"/>
			<then>
				<mkdir dir="${dist}/sql/profili"/>
				<copy todir="${dist}/sql/profili">
					<fileset dir="${tmp_sql}/profili">
				    		<include name="GovWay*.sql"/>
					</fileset>
				</copy>
			</then>
		</if>
		
		<!-- Archivio -->
		<mkdir dir="${dist}/archivi"/>
		<if>
			<or>
				<matches string="${antinstaller_as}" pattern="wildfly.*"/>
			</or>	
			<then>
				<antcall target="_prepareArchivioJboss"/>
			</then>
			<else>
				<antcall target="_prepareArchivioTomcat"/>
			</else>		
		</if>
		<if>
			<equals arg1="${antinstaller_console_env}" arg2="manager"/>
			<then>
				<mkdir dir="${dist}/archivi/manager"/>
				<mkdir dir="${dist}/archivi/runtime"/>
				<move todir="${dist}/archivi/manager">
					<fileset dir="${dist}/archivi">
						<exclude name="govway.*ar"/>
						<exclude name="govwaySec.war"/>
						<exclude name="manager"/>
						<exclude name="runtime"/>
					</fileset>
				</move>
				<move todir="${dist}/archivi/runtime">
					<fileset dir="${dist}/archivi">
						<include name="govway.*ar"/>
						<include name="govwaySec.war"/>
						<exclude name="manager"/>
						<exclude name="runtime"/>
					</fileset>
				</move>

				<if>
					<available file="${dist}/archivi_add/manager" type="dir"/>
					<then>
						<move todir="${dist}/archivi/manager">
							<fileset dir="${dist}/archivi_add/manager">
								<include name="*.*ar"/>
							</fileset>
						</move>
						<delete dir="${dist}/archivi_add/manager"/>
					</then>
				</if>
				<if>
					<available file="${dist}/archivi_add/runtime" type="dir"/>
					<then>
						<move todir="${dist}/archivi/runtime">
							<fileset dir="${dist}/archivi_add/runtime">
								<include name="*.*ar"/>
							</fileset>
						</move>
						<delete dir="${dist}/archivi_add/runtime"/>
					</then>
				</if>

			</then>
			<else>
				<if>
					<available file="${dist}/archivi_add/manager" type="dir"/>
					<then>
						<move todir="${dist}/archivi">
							<fileset dir="${dist}/archivi_add/manager">
								<include name="*.*ar"/>
							</fileset>
						</move>
						<delete dir="${dist}/archivi_add/manager"/>
					</then>
				</if>
				<if>
					<available file="${dist}/archivi_add/runtime" type="dir"/>
					<then>
						<move todir="${dist}/archivi">
							<fileset dir="${dist}/archivi_add/runtime">
								<include name="*.*ar"/>
							</fileset>
						</move>
						<delete dir="${dist}/archivi_add/runtime"/>
					</then>
				</if>
			</else>
		</if>
		<if>
			<available file="${dist}/archivi_add" type="dir"/>
			<then>
				<delete dir="${dist}/archivi_add"/>
			</then>
		</if>

		<!-- Batch -->
		<available file="${tmp_batch}" type="dir" property="batch.present"/>
		<if>
			<equals arg1="${batch.present}" arg2="true"/>
			<then>
				<mkdir dir="${dist}/batch"/>
				<copy todir="${dist}/batch">
					<fileset dir="${deploy_sw}/batch">
				    		<include name="crond/govway_batch.sh"/>
					</fileset>
				</copy>
				<if>
					<equals arg1="${antinstaller_stats_env}" arg2="batch"/>
					<then>
						<copy todir="${dist}/batch">
							<fileset dir="${deploy_sw}/batch">
						    		<include name="crond/govway_stats_crond"/>
							</fileset>
						</copy>
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${antinstaller_console_env}" arg2="manager"/>
						<equals arg1="${antinstaller_batchRuntimeRepository}" arg2="true"/>
					</and>
					<then>
						<copy todir="${dist}/batch">
							<fileset dir="${deploy_sw}/batch">
						    		<include name="crond/govway_runtime_repository_crond"/>
							</fileset>
						</copy>
					</then>
				</if>
				<copy todir="${dist}/batch">
					<fileset dir="${tmp_batch}">
				    		<include name="**"/>
					</fileset>
				</copy>
				<antcall target="replace_token">
				    <param name="file" value="${dist}/batch/crond/govway_batch.sh"/>
					<param name="token" value="/var/govway/log"/>
					<param name="value" value="${log_dir}"/>
				</antcall>
				<chmod dir="${dist}/batch" perm="a+x" includes="**/*.sh"/>
				<chmod dir="${dist}/batch" perm="a+x" includes="**/*.cmd"/>
				<if>
					<not>
						<equals arg1="${batch_dir}" arg2="" />
					</not>
					<then>
						<if>
							<equals arg1="${antinstaller_stats_env}" arg2="batch"/>
							<then>
								<antcall target="replace_token">
								    <param name="file" value="${dist}/batch/crond/govway_stats_crond"/>
									<param name="token" value="/var/govway/log"/>
									<param name="value" value="${batch_dir}"/>
								</antcall>
							</then>
						</if>
						<if>
							<and>
								<equals arg1="${antinstaller_console_env}" arg2="manager"/>
								<equals arg1="${antinstaller_batchRuntimeRepository}" arg2="true"/>
							</and>
							<then>
								<antcall target="replace_token">
								    <param name="file" value="${dist}/batch/crond/govway_runtime_repository_crond"/>
									<param name="token" value="/var/govway/log"/>
									<param name="value" value="${batch_dir}"/>
								</antcall>
							</then>
						</if>
					</then>
					<else>
						<if>
							<equals arg1="${antinstaller_stats_env}" arg2="batch"/>
							<then>
								<antcall target="replace_token">
								    <param name="file" value="${dist}/batch/crond/govway_stats_crond"/>
									<param name="token" value="/var/govway/log"/>
									<param name="value" value="${log_dir}"/>
								</antcall>
							</then>
						</if>
						<if>
							<and>
								<equals arg1="${antinstaller_console_env}" arg2="manager"/>
								<equals arg1="${antinstaller_batchRuntimeRepository}" arg2="true"/>
							</and>
							<then>
								<antcall target="replace_token">
								    <param name="file" value="${dist}/batch/crond/govway_runtime_repository_crond"/>
									<param name="token" value="/var/govway/log"/>
									<param name="value" value="${log_dir}"/>
								</antcall>
							</then>
						</if>
					</else>
				</if>
			</then>
		</if>

		<!-- Tools -->
		<available file="${tmp_tools}" type="dir" property="tools.present"/>
		<if>
			<equals arg1="${tools.present}" arg2="true"/>
			<then>
				<mkdir dir="${dist}/tools"/>
				<copy todir="${dist}/tools">
					<fileset dir="${tmp_tools}">
				    		<include name="**"/>
					</fileset>
				</copy>
				<chmod dir="${dist}/tools" perm="a+x" includes="**/*.sh"/>
				<chmod dir="${dist}/tools" perm="a+x" includes="**/*.cmd"/>
			</then>
		</if>
	</target>

	<target name="_setup_properties_aggiornamento">

		<!-- Properties di Aggiornamento -->
		<java classname="org.openspcoop2.core.commons.PropertiesScriptBuilder" fork="true" outputproperty="_output_props_upgrade">
			<arg value="${deploy_resources}/properties_upgrade" />
			<arg value="${dist}/cfg/utilities/diff" />
			<arg value="${dist}/cfg" />
			<arg value="${antinstaller_versione_precedente}" />
			<arg value="${antinstaller_versione_attuale}" />
			<classpath>
				<path id="classpath_run">
					<fileset dir="${deploy_sw}" includes="**/openspcoop2_utils_*.jar"/>
					<fileset dir="${deploy_sw}" includes="**/openspcoop2_core_*.jar"/>
			   	</path>				
			</classpath>
		</java>
		<if>
			<not>
				<equals arg1="${_output_props_upgrade}" arg2=""/>
			</not>
			<then>
				<fail message="Generazione properties di aggiornamento: ${_output_props_upgrade}"/>	
			</then>
		</if>

	</target>
	
	<target name="_prepareArchivioJboss">
		<copy todir="${dist}/archivi/OpenSPCoop2">
		    <fileset dir="${tmp_archivi}/govway.ear"/>
		</copy>
		
		<!-- *** Aggiunta dell'applicazione govwayConsole ***-->
		<if>
			<istrue value="${build_govwayConsole_consoleIntegrataEAR}"/>
			<then>
				<fileset dir="${tmp_archivi}/govwayConsole.war/WEB-INF/lib" id="govwayConsole.jar">
					<include name="*.jar"/>
				</fileset>
				<pathconvert pathsep=" " property="govwayConsole.classpath" refid="govwayConsole.jar">
					<map from="${tmp_archivi}/govwayConsole.war/WEB-INF/lib/" to="lib/"/>
				</pathconvert>
				<var name="manifest.classpath.govwayConsole" value="${govwayConsole.classpath}" />	
				<move todir="${dist}/archivi/OpenSPCoop2/lib" overwrite="true">
				    <fileset dir="${tmp_archivi}/govwayConsole.war/WEB-INF/lib"/>
				</move>
				<move todir="${dist}/archivi/OpenSPCoop2/properties" overwrite="true">
				    <fileset dir="${tmp_archivi}/govwayConsole.war/WEB-INF/classes"/>
				</move>
				<war destfile="${dist}/archivi/OpenSPCoop2/govwayConsole.war" basedir="${tmp_archivi}/govwayConsole.war">
					<manifest>
						<attribute name="Class-Path" value="${manifest.classpath.govwayConsole} properties/" />
					</manifest>
				</war>
			</then>
			<else>
				<zip destfile="${dist}/archivi/govwayConsole.war" basedir="${tmp_archivi}/govwayConsole.war"/>
			</else>
		</if>

		<!-- *** Aggiunta dell'applicazione govwayMonitor ***-->
		<if>
			<istrue value="${build_govwayMonitor_consoleIntegrataEAR}"/>
			<then>
				<fileset dir="${tmp_archivi}/govwayMonitor.war/WEB-INF/lib" id="govwayMonitor.jar">
					<include name="*.jar"/>
				</fileset>
				<pathconvert pathsep=" " property="govwayMonitor.classpath" refid="govwayMonitor.jar">
					<map from="${tmp_archivi}/govwayMonitor.war/WEB-INF/lib/" to="lib/"/>
				</pathconvert>
				<var name="manifest.classpath.govwayMonitor" value="${govwayMonitor.classpath}" />	
				<move todir="${dist}/archivi/OpenSPCoop2/lib" overwrite="true">
				    <fileset dir="${tmp_archivi}/govwayMonitor.war/WEB-INF/lib"/>
				</move>
				<move todir="${dist}/archivi/OpenSPCoop2/properties" overwrite="true">
				    <fileset dir="${tmp_archivi}/govwayMonitor.war/WEB-INF/classes"/>
				</move>
				<war destfile="${dist}/archivi/OpenSPCoop2/govwayMonitor.war" basedir="${tmp_archivi}/govwayMonitor.war">
					<manifest>
						<attribute name="Class-Path" value="${manifest.classpath.govwayMonitor} properties/" />
					</manifest>
				</war>
			</then>
			<else>
				<zip destfile="${dist}/archivi/govwayMonitor.war" basedir="${tmp_archivi}/govwayMonitor.war"/>
			</else>
		</if>
								
		<!-- *** Correzione Application.xml (aggiunta archivi) ***-->
		<if>
			<or>
				<istrue value="${build_govwayConsole_consoleIntegrataEAR}"/>
				<istrue value="${build_govwayMonitor_consoleIntegrataEAR}"/>
			</or>
			<then>
		        <replace file="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" token="&lt;/application&gt;" value=""/>
				<if>
					<istrue value="${build_govwayConsole_consoleIntegrataEAR}"/>
					<then>
		        		<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" append="yes">
<![CDATA[

	<!-- Start MODULE govwayConsole -->
	<module>
		<web>
			<web-uri>govwayConsole.war</web-uri>
			<context-root>govwayConsole</context-root>
		</web>
	</module>
	<!-- End MODULE govwayConsole -->
		        				
]]>
		        		</concat>
					</then>
				</if>
				<if>
					<istrue value="${build_govwayMonitor_consoleIntegrataEAR}"/>
					<then>
		        		<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" append="yes">
<![CDATA[

	<!-- Start MODULE govwayMonitor -->
	<module>
		<web>
			<web-uri>govwayMonitor.war</web-uri>
			<context-root>govwayMonitor</context-root>
		</web>
	</module>
	<!-- End MODULE govwayMonitor -->
		        				
]]>
		        		</concat>
					</then>
				</if>
				<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" append="yes">
<![CDATA[
</application>
]]>
		        </concat>
				<antcall target="dos2unix">
					<param name="dir" value="${dist}/archivi/OpenSPCoop2/META-INF"/>
				    <param name="file" value="application.xml"/>
				</antcall>
			</then>
		</if>
		
		<!-- *** Correzione Application.xml (aggiunta resource-ref) ***-->
		<replace file="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" token="&lt;/application&gt;" value=""/>
		<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" append="yes">
<![CDATA[
	
	<!-- resource-ref -->

	<resource-ref>
		<res-ref-name>govwayds</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<lookup-name>java:/org.govway.datasource</lookup-name>
	</resource-ref>

	<resource-ref>
		<res-ref-name>govwayds.console</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<lookup-name>java:/org.govway.datasource.console</lookup-name>
	</resource-ref>]]>
		</concat>
		<if>
			<equals arg1="${antinstaller_console_env}" arg2="manager"/>
			<then>
				<available file="${dist}/datasource/runtime/govway_tracciamento-ds.xml" type="file" property="dsTracciamento.present"/>
			</then>
			<else>
				<available file="${dist}/datasource/govway_tracciamento-ds.xml" type="file" property="dsTracciamento.present"/>
			</else>
		</if>
		<if>
			<and>
				<equals arg1="${dsTracciamento.present}" arg2="true"/>
				<equals arg1="${antinstaller_log_db}" arg2="log"/>
			</and>
			<then>
				<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" append="yes">
<![CDATA[	<resource-ref>
		<res-ref-name>govwayds.tracciamento</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<lookup-name>java:/org.govway.datasource.tracciamento</lookup-name>
	</resource-ref>]]>
				</concat>
			</then>
		</if>
		<if>
			<equals arg1="${antinstaller_console_env}" arg2="manager"/>
			<then>
				<available file="${dist}/datasource/runtime/govway_statistiche-ds.xml" type="file" property="dsStatistiche.present"/>
			</then>
			<else>
				<available file="${dist}/datasource/govway_statistiche-ds.xml" type="file" property="dsStatistiche.present"/>
			</else>
		</if>
		<if>
			<and>
				<equals arg1="${dsStatistiche.present}" arg2="true"/>
				<equals arg1="${antinstaller_stats_db}" arg2="stats"/>
			</and>
			<then>
				<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" append="yes">
<![CDATA[	<resource-ref>
		<res-ref-name>govwayds.statistiche</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<lookup-name>java:/org.govway.datasource.statistiche</lookup-name>
	</resource-ref>]]>
				</concat>
			</then>
		</if>
		<if>
			<equals arg1="${antinstaller_console_env}" arg2="manager"/>
			<then>
				<available file="${dist}/datasource/runtime/govway_runtime_consegnaAsincrona-ds.xml" type="file" property="dsRuntimeConsegnaAsincrona.present"/>
			</then>
			<else>
				<available file="${dist}/datasource/govway_runtime_consegnaAsincrona-ds.xml" type="file" property="dsRuntimeConsegnaAsincrona.present"/>
			</else>
		</if>
		<if>
			<and>
				<equals arg1="${dsRuntimeConsegnaAsincrona.present}" arg2="true"/>
			</and>
			<then>
				<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" append="yes">
<![CDATA[	<resource-ref>
		<res-ref-name>govwayds.runtime.consegnaAsincrona</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<lookup-name>java:/org.govway.datasource.runtime.consegnaAsincrona</lookup-name>
	</resource-ref>]]>
				</concat>
			</then>
		</if>
		<if>
			<equals arg1="${antinstaller_console_env}" arg2="manager"/>
			<then>
				<available file="${dist}/datasource/runtime/govway_tracciamento_consegnaAsincrona-ds.xml" type="file" property="dsTracciamentoConsegnaAsincrona.present"/>
			</then>
			<else>
				<available file="${dist}/datasource/govway_tracciamento_consegnaAsincrona-ds.xml" type="file" property="dsTracciamentoConsegnaAsincrona.present"/>
			</else>
		</if>
		<if>
			<and>
				<equals arg1="${dsTracciamentoConsegnaAsincrona.present}" arg2="true"/>
				<equals arg1="${antinstaller_log_db}" arg2="log"/>
			</and>
			<then>
				<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" append="yes">
<![CDATA[	<resource-ref>
		<res-ref-name>govwayds.tracciamento.consegnaAsincrona</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<lookup-name>java:/org.govway.datasource.tracciamento.consegnaAsincrona</lookup-name>
	</resource-ref>]]>
				</concat>
			</then>
		</if>
		<if>
			<equals arg1="${antinstaller_console_env}" arg2="manager"/>
			<then>
				<available file="${dist}/datasource/runtime/govway_runtime_messageBoxIM-ds.xml" type="file" property="dsRuntimeMessageBoxIM.present"/>
			</then>
			<else>
				<available file="${dist}/datasource/govway_runtime_messageBoxIM-ds.xml" type="file" property="dsRuntimeMessageBoxIM.present"/>
			</else>
		</if>
		<if>
			<and>
				<equals arg1="${dsRuntimeMessageBoxIM.present}" arg2="true"/>
			</and>
			<then>
				<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" append="yes">
<![CDATA[	<resource-ref>
		<res-ref-name>govwayds.runtime.messageBoxIM</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<lookup-name>java:/org.govway.datasource.runtime.messageBoxIM</lookup-name>
	</resource-ref>]]>
				</concat>
			</then>
		</if>
		<if>
			<equals arg1="${antinstaller_console_env}" arg2="manager"/>
			<then>
				<available file="${dist}/datasource/runtime/govway_tracciamento_messageBoxIM-ds.xml" type="file" property="dsTracciamentoMessageBoxIM.present"/>
			</then>
			<else>
				<available file="${dist}/datasource/govway_tracciamento_messageBoxIM-ds.xml" type="file" property="dsTracciamentoMessageBoxIM.present"/>
			</else>
		</if>
		<if>
			<and>
				<equals arg1="${dsTracciamentoMessageBoxIM.present}" arg2="true"/>
				<equals arg1="${antinstaller_log_db}" arg2="log"/>
			</and>
			<then>
				<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" append="yes">
<![CDATA[	<resource-ref>
		<res-ref-name>govwayds.tracciamento.messageBoxIM</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<lookup-name>java:/org.govway.datasource.tracciamento.messageBoxIM</lookup-name>
	</resource-ref>]]>
				</concat>
			</then>
		</if>
		<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" append="yes">
<![CDATA[	<!-- End resource-ref -->
		        			
]]>
		</concat>
		<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/application.xml" append="yes">
<![CDATA[
</application>
]]>
		</concat>

		<!--*** Correzione jboss-deployment-structure *** -->
		<if>
			<and>
				<or>
					<matches string="${antinstaller_as}" pattern="wildfly.*"/>
				</or>
				<or>
					<istrue value="${build_govwayConsole_consoleIntegrataEAR}"/>
					<istrue value="${build_govwayMonitor_consoleIntegrataEAR}"/>
				</or>
			</and>
			<then>
				<replace file="${dist}/archivi/OpenSPCoop2/META-INF/jboss-deployment-structure.xml" token="&lt;/jboss-deployment-structure&gt;" value=""/>
				<if>
					<istrue value="${build_govwayConsole_consoleIntegrataEAR}"/>
					<then>
						<if>
							<or>
								<matches string="${as}" pattern="wildfly27"/>
								<matches string="${as}" pattern="wildfly28"/>
								<matches string="${as}" pattern="wildfly29"/>
							</or>
							<then>
								<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/jboss-deployment-structure.xml" append="yes">
<![CDATA[

	<!-- Start MODULE govwayConsole -->
	<sub-deployment name="govwayConsole.war">
        <exclusions>
		<!-- avendo già escluso subsystem 'logging', questi moduli non sono caricati 
		<module name="org.apache.log4j"/>
                <module name="org.slf4j" />
                <module name="org.apache.commons.logging"/>
                <module name="org.jboss.logging"/>
		<module name="org.apache.logging.log4j.api"/>
		-->
        </exclusions>
    </sub-deployment>
	<!-- End MODULE govwayConsole -->
								
]]>
								</concat>
							</then>
							<else>
								<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/jboss-deployment-structure.xml" append="yes">
<![CDATA[

	<!-- Start MODULE govwayConsole -->
	<sub-deployment name="govwayConsole.war">
        <exclusions>
                <module name="org.apache.log4j"/>
                <module name="org.slf4j" />
                <module name="org.apache.commons.logging"/>
                <module name="org.jboss.logging"/>
        </exclusions>
    </sub-deployment>
	<!-- End MODULE govwayConsole -->
								
]]>
								</concat>
							</else>
						</if>
					</then>
				</if>
				<if>
					<istrue value="${build_govwayMonitor_consoleIntegrataEAR}"/>
					<then>
						<if>
							<or>
								<matches string="${as}" pattern="wildfly27"/>
								<matches string="${as}" pattern="wildfly28"/>
								<matches string="${as}" pattern="wildfly29"/>
							</or>
							<then>
								<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/jboss-deployment-structure.xml" append="yes">
<![CDATA[

	<!-- Start MODULE govwayMonitor -->
	<sub-deployment name="govwayMonitor.war">
        <exclusions>
		<!-- avendo già escluso subsystem 'logging', questi moduli non sono caricati 
		<module name="org.apache.log4j"/>
                <module name="org.slf4j" />
                <module name="org.apache.commons.logging"/>
                <module name="org.jboss.logging"/>
		<module name="org.apache.logging.log4j.api"/>
		-->
        </exclusions>
    </sub-deployment>
	<!-- End MODULE govwayMonitor -->
								
]]>
								</concat>
							</then>
							<else>
								<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/jboss-deployment-structure.xml" append="yes">
<![CDATA[

	<!-- Start MODULE govwayMonitor -->
	<sub-deployment name="govwayMonitor.war">
        <exclusions>
                <module name="org.apache.log4j"/>
                <module name="org.slf4j" />
                <module name="org.apache.commons.logging"/>
                <module name="org.jboss.logging"/>
        </exclusions>
    </sub-deployment>
	<!-- End MODULE govwayMonitor -->
								
]]>
								</concat>
							</else>
						</if>
					</then>
				</if>	
				<concat destfile="${dist}/archivi/OpenSPCoop2/META-INF/jboss-deployment-structure.xml" append="yes">
<![CDATA[
</jboss-deployment-structure>
]]>

				</concat>
				<antcall target="dos2unix">
					<param name="dir" value="${dist}/archivi/OpenSPCoop2/META-INF"/>
				    <param name="file" value="jboss-deployment-structure.xml"/>
				</antcall>
			</then>
		</if>
		<if>
			<isfalse value="${build_openspcoop_sec_archive}" />
			<then>
				<replace file="${dist}/archivi/OpenSPCoop2/META-INF/jboss-deployment-structure.xml" token="&lt;!-- start govwaySec -->" value="&lt;!-- start govwaySec"/>
				<replace file="${dist}/archivi/OpenSPCoop2/META-INF/jboss-deployment-structure.xml" token="&lt;!-- end govwaySec -->" value="end govwaySec -->"/>
				<antcall target="dos2unix">
					<param name="dir" value="${dist}/archivi/OpenSPCoop2/META-INF"/>
				    <param name="file" value="jboss-deployment-structure.xml"/>
				</antcall>
			</then>
		</if>


		<!-- ** correggo manifest ** -->

		<antcall target="-correctManifest">
			<param name="correctManifest_archive" value="${dist}/archivi/OpenSPCoop2/govway.war"/>
			<param name="correctManifest_archive_destDir" value="${dist}/archivi/OpenSPCoop2/GOVWAY_WAR"/>
		</antcall>
		<antcall target="-correctManifest"> <!-- la seconda volta serve a risolvere i RELEASE rimasti perche' inizialmente andati a capo -->
			<param name="correctManifest_archive" value="${dist}/archivi/OpenSPCoop2/govway.war"/>
			<param name="correctManifest_archive_destDir" value="${dist}/archivi/OpenSPCoop2/GOVWAY_WAR"/>
		</antcall>
		<antcall target="-correctManifest"> <!-- la terza volta serve a risolvere gli ulteriori RELEASE rimasti perche' inizialmente andati a capo -->
			<param name="correctManifest_archive" value="${dist}/archivi/OpenSPCoop2/govway.war"/>
			<param name="correctManifest_archive_destDir" value="${dist}/archivi/OpenSPCoop2/GOVWAY_WAR"/>
		</antcall>

		<!-- *** Aggiunta dell'applicazione govwaySec *** -->
		<if>
			<istrue value="${build_openspcoop_sec_archive}" />
			<then>
				<!-- ** correggo manifest ** -->
				<antcall target="-correctManifest">
					<param name="correctManifest_archive" value="${dist}/archivi/OpenSPCoop2/govwaySec.war"/>
					<param name="correctManifest_archive_destDir" value="${dist}/archivi/OpenSPCoop2/GOVWAYSEC_WAR"/>
				</antcall>
				<antcall target="-correctManifest"> <!-- la seconda volta serve a risolvere i RELEASE rimasti perche' inizialmente andati a capo -->
					<param name="correctManifest_archive" value="${dist}/archivi/OpenSPCoop2/govwaySec.war"/>
					<param name="correctManifest_archive_destDir" value="${dist}/archivi/OpenSPCoop2/GOVWAYSEC_WAR"/>
				</antcall>
				<antcall target="-correctManifest"> <!-- la terza volta serve a risolvere gli ulteriori RELEASE rimasti perche' inizialmente andati a capo -->
					<param name="correctManifest_archive" value="${dist}/archivi/OpenSPCoop2/govwaySec.war"/>
					<param name="correctManifest_archive_destDir" value="${dist}/archivi/OpenSPCoop2/GOVWAYSEC_WAR"/>
				</antcall>
			</then>
			<else>
				<delete file="${dist}/archivi/OpenSPCoop2/govwaySec.war"/>
			</else>
		</if>
		
		<!-- ** correggo manifest in govway.jar (stateful) ** -->
		<available file="${dist}/archivi/OpenSPCoop2/govway.jar" type="file" property="govway.jar.present"/>
		<if>
			<equals arg1="${govway.jar.present}" arg2="true"/>
			<then>
				<antcall target="-correctManifest">
					<param name="correctManifest_archive" value="${dist}/archivi/OpenSPCoop2/govway.jar"/>
					<param name="correctManifest_archive_destDir" value="${dist}/archivi/OpenSPCoop2/GOVWAY_JAR"/>
				</antcall>
				<antcall target="-correctManifest"> <!-- la seconda volta serve a risolvere i RELEASE rimasti perche' inizialmente andati a capo -->
					<param name="correctManifest_archive" value="${dist}/archivi/OpenSPCoop2/govway.jar"/>
					<param name="correctManifest_archive_destDir" value="${dist}/archivi/OpenSPCoop2/GOVWAY_JAR"/>
				</antcall>
				<antcall target="-correctManifest"> <!-- la terza volta serve a risolvere gli ulteriori RELEASE rimasti perche' inizialmente andati a capo -->
					<param name="correctManifest_archive" value="${dist}/archivi/OpenSPCoop2/govway.jar"/>
					<param name="correctManifest_archive_destDir" value="${dist}/archivi/OpenSPCoop2/GOVWAY_JAR"/>
				</antcall>
			</then>
		</if>
	
	
		<!-- *** Aggiunta dell'applicazione govwayAPIConfig.war ***-->
		<if>
			<istrue value="${antinstaller_rs_config}"/>
			<then>
				<zip destfile="${dist}/archivi/govwayAPIConfig.war" basedir="${tmp_archivi}/govwayAPIConfig.war"/>
			</then>
		</if>

		<!-- *** Aggiunta dell'applicazione govwayAPIMonitor.war ***-->
		<if>
			<istrue value="${antinstaller_rs_monitor}"/>
			<then>
				<zip destfile="${dist}/archivi/govwayAPIMonitor.war" basedir="${tmp_archivi}/govwayAPIMonitor.war"/>
			</then>
		</if>
		
		<!-- ** end ** -->
		<zip destfile="${dist}/archivi/govway.ear" basedir="${dist}/archivi/OpenSPCoop2"/>
		<delete dir="${dist}/archivi/OpenSPCoop2"/>
		
	</target>

	<target name="-correctManifest">
		<unzip src="${correctManifest_archive}" dest="${correctManifest_archive_destDir}"/>

		<antcall target="dos2unix">
			<param name="dir" value="${correctManifest_archive_destDir}/META-INF"/>
			<param name="file" value="MANIFEST.MF"/>
		</antcall>

		<!-- replace jar di openspcoop con patch version -->
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF" token="_RELEASE." value="-${antinstaller_versione_attuale_con_p_level}."/>

		<!-- replace jar in cui e' stato corretto il manifest -->
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF" token="jaxb-impl-2.3.7.jar" value="jaxb-impl-2.3.7.gw.jar"/>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[jaxb-impl-2.3.7.ja
 r]]></replacetoken>
			<replacevalue><![CDATA[jaxb-impl-2.3.7.gw.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[jaxb-impl-2.3.7.j
 ar]]></replacetoken>
			<replacevalue><![CDATA[jaxb-impl-2.3.7.gw.jar
 ]]></replacevalue>
		</replace>	

		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF" token="jaxb-core-2.3.0.1.jar" value="jaxb-core-2.3.0.1.gw.jar"/>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[jaxb-core-2.3.0.1.ja
 r]]></replacetoken>
			<replacevalue><![CDATA[jaxb-core-2.3.0.1.gw.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[jaxb-core-2.3.0.1.j
 ar]]></replacetoken>
			<replacevalue><![CDATA[jaxb-core-2.3.0.1.gw.jar
 ]]></replacevalue>
		</replace>		

		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF" token="jaxb-xjc-2.3.7.jar" value="jaxb-xjc-2.3.7.gw.jar"/>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[jaxb-xjc-2.3.7.ja
 r]]></replacetoken>
			<replacevalue><![CDATA[jaxb-xjc-2.3.7.gw.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[jaxb-xjc-2.3.7.j
 ar]]></replacetoken>
			<replacevalue><![CDATA[jaxb-xjc-2.3.7.gw.jar
 ]]></replacevalue>
		</replace>		
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[ axb-xjc-2.3.7.jar ]]></replacetoken>
			<replacevalue><![CDATA[ axb-xjc-2.3.7.gw.jar ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[jaxb
 -xjc-2.3.7.jar]]></replacetoken>
			<replacevalue><![CDATA[jaxb-xjc-2.3.7.gw.jar
 ]]></replacevalue>
		</replace>

		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF" token="xalan-2.7.3.jar" value="xalan-2.7.3.gw.jar"/>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[xalan-2.7.3.ja
 r]]></replacetoken>
			<replacevalue><![CDATA[xalan-2.7.3.gw.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[xalan-2.7.3.j
 ar]]></replacetoken>
			<replacevalue><![CDATA[xalan-2.7.3.gw.jar
 ]]></replacevalue>
		</replace>		

		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF" token="serializer-2.7.3.jar" value="serializer-2.7.3.gw.jar"/>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[serializer-2.7.3.ja
 r]]></replacetoken>
			<replacevalue><![CDATA[serializer-2.7.3.gw.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[serializer-2.7.3.j
 ar]]></replacetoken>
			<replacevalue><![CDATA[serializer-2.7.3.gw.jar
 ]]></replacevalue>
		</replace>		

		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[_
 RELEASE.jar]]></replacetoken>
			<replacevalue><![CDATA[_RELEASE.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[_R
 ELEASE.jar]]></replacetoken>
			<replacevalue><![CDATA[_RELEASE.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[_RE
 LEASE.jar]]></replacetoken>
			<replacevalue><![CDATA[_RELEASE.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[_REL
 EASE.jar]]></replacetoken>
			<replacevalue><![CDATA[_RELEASE.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[_RELE
 ASE.jar]]></replacetoken>
			<replacevalue><![CDATA[_RELEASE.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[_RELEA
 SE.jar]]></replacetoken>
			<replacevalue><![CDATA[_RELEASE.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[_RELEAS
 E.jar]]></replacetoken>
			<replacevalue><![CDATA[_RELEASE.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[_RELEASE
 .jar]]></replacetoken>
			<replacevalue><![CDATA[_RELEASE.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[_RELEASE.
 jar]]></replacetoken>
			<replacevalue><![CDATA[_RELEASE.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[_RELEASE.j
 ar]]></replacetoken>
			<replacevalue><![CDATA[_RELEASE.jar
 ]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[_RELEASE.ja
 r]]></replacetoken>
			<replacevalue><![CDATA[_RELEASE.jar
 ]]></replacevalue>
		</replace>

		<!-- replace jar di openspcoop con patch version (eseguo anche dopo il replace dei jar, sempre per avere piu' possibilita' poiche' vanno a capo) -->
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF" token="_RELEASE." value="-${antinstaller_versione_attuale_con_p_level}."/>

		<!-- Casi speciali che rimangono -->
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF">
			<replacetoken><![CDATA[openspcoop2_security_RELEAS
 E.jar]]></replacetoken>
			<replacevalue><![CDATA[openspcoop2_security-INDICAREVERSIONE
 .jar]]></replacevalue>
		</replace>
		<replace file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF" token="INDICAREVERSIONE" value="${antinstaller_versione_attuale_con_p_level}"/>

		<antcall target="dos2unix">
			<param name="dir" value="${correctManifest_archive_destDir}/META-INF"/>
			<param name="file" value="MANIFEST.MF"/>
		</antcall>

		<copy file="${correctManifest_archive_destDir}/META-INF/MANIFEST.MF" todir="${correctManifest_archive_destDir}"/>
		<delete file="${correctManifest_archive}"/>		
		<jar destfile="${correctManifest_archive}" basedir="${correctManifest_archive_destDir}" 
			filesetmanifest="merge" excludes="MANIFEST.MF"/>
		<delete dir="${correctManifest_archive_destDir}"/>	
	</target>
	
	<target name="_prepareArchivioTomcat">

		<!-- govway -->
		<zip destfile="${dist}/archivi/govway.war" basedir="${tmp_archivi}/govway.war"/>
		
		<!-- *** Aggiunta dell'applicazione govwaySec *** -->
		<if>
			<istrue value="${build_openspcoop_sec_archive}" />
			<then>
				<zip destfile="${dist}/archivi/govwaySec.war" basedir="${tmp_archivi}/govwaySec.war"/>
			</then>
		</if>
		
		<!-- *** Aggiunta dell'applicazione govwayConsole ***-->
		<zip destfile="${dist}/archivi/govwayConsole.war" basedir="${tmp_archivi}/govwayConsole.war"/>
		
		<!-- *** Aggiunta dell'applicazione govwayMonitor ***-->
		<zip destfile="${dist}/archivi/govwayMonitor.war" basedir="${tmp_archivi}/govwayMonitor.war"/>

		<!-- *** Aggiunta dell'applicazione govwayAPIConfig.war ***-->
		<if>
			<istrue value="${antinstaller_rs_config}"/>
			<then>
				<zip destfile="${dist}/archivi/govwayAPIConfig.war" basedir="${tmp_archivi}/govwayAPIConfig.war"/>
			</then>
		</if>

		<!-- *** Aggiunta dell'applicazione govwayAPIMonitor.war ***-->
		<if>
			<istrue value="${antinstaller_rs_monitor}"/>
			<then>
				<zip destfile="${dist}/archivi/govwayAPIMonitor.war" basedir="${tmp_archivi}/govwayAPIMonitor.war"/>
			</then>
		</if>
	</target>
		
</project>
