# Topic
topic.erogazioni=request,requestBody,response,responseBody
topic.fruizioni=request,requestBody,response,responseBody

# Topic personalizzazione
# sintassi: log.topic.<erogazioni/fruizioni>.<nomeTopic>.<nomeProprietà>=<valoreProprietà>
# Di seguito le proprietà utilizzabili:
# - requestSent (true/false): se abilitata il topic verrà invocato solamente se GovWay è riuscito a spedire la richiesta verso il backend
# - inRequestContentDefined (true/false): se abilitata il topic verrà invocato se la richiesta in ingresso possiede un payload http
# - outRequestContentDefined (true/false): se abilitata il topic verrà invocato se la richiesta in uscita possiede un payload http
# - inResponseContentDefined (true/false): se abilitata il topic verrà invocato se la risposta in ingresso possiede un payload http
# - inResponseContentDefined (true/false): se abilitata il topic verrà invocato se la risposta in uscita possiede un payload http

# I topic delle fruizioni devono essere invocati solamente se la richiesta è stata inoltrata al backend
topic.fruizioni.request.requestSent=true
topic.fruizioni.requestBody.requestSent=true
topic.fruizioni.response.requestSent=true
topic.fruizioni.responseBody.requestSent=true

# I topic delle richieste (body) devono essere invocati solamente se è presente un payload http 
topic.erogazioni.requestBody.inRequestContentDefined=true
topic.fruizioni.requestBody.outRequestContentDefined=true


# *** LOG4J ***

# Log4j2 Configuration File
log.config.file=govway.fileTrace.log4j2.properties

# trace/debug/info/warn/error
log.severity=info

# Category per ogni topic delle erogazioni
# sintassi: log.topic.erogazioni.<nomeTopic>=<categoryLog4j2>
category.topic.erogazioni.request=fileTrace.request
category.topic.erogazioni.requestBody=fileTrace.requestBody
category.topic.erogazioni.response=fileTrace.response
category.topic.erogazioni.responseBody=fileTrace.responseBody
# Category per ogni topic delle fruizioni
# sintassi: log.topic.fruizioni.<nomeTopic>=<categoryLog4j2>
category.topic.fruizioni.request=fileTrace.request
category.topic.fruizioni.requestBody=fileTrace.requestBody
category.topic.fruizioni.response=fileTrace.response
category.topic.fruizioni.responseBody=fileTrace.responseBody



# *** FORMAT ***

# Escape dei caratteri speciali
# sintassi: format.escape.<CHAR>=<CHAR_ESCAPED>
# Per indicare i caratteri '=' e '\' usare l'escape '\' nel properties. 
# Ad esempio per fare l'escape del carattere '=':
# format.escape.\==\\\=
format.escape."=\\"

# Formato degli headers
#format.headers.separator=,
#format.headers.header.prefix=
#format.headers.header.suffix=
#format.headers.header.separator=


# Proprietà
# sintassi: format.property.<position>.<nomeProperty>=...
# Le proprietà verranno risolte in ordine lessicografico di posizionamento; l'ordine è importante se si hanno proprietà che sono definite tramite altre proprietà

# Informazioni comuni
format.property.000a.commons.server.ip=${log:hostAddress}
format.property.000b.commons.server.hostname=${log:hostName}
#format.property.000b.commons.server.hostname=${log:clusterId}
format.property.000c.commons.server.port=8443
format.property.000d.commons.server.encoding=${log:javaProperty(file.encoding)}
format.property.000e.commons.user=${log:requestProperty(ProfiloSicurezzaMessaggio-CorniceSicurezza-User)}

# Identificativo di transazione e applicativo
format.property.001a.commons.govway-id=govway-${log:profile}
format.property.001b.commons.id="${log:transactionId}"|"${log:property(commons.govway-id)}"
format.property.001c.commons.id.body=${log:transactionId}.${log:property(commons.govway-id,****)}

# Data composta da due campi: Request Timestamp (UTC) e Local Time zone (ISO8601)
format.property.002a.commons.dataRichiestaErogazione="${log:inRequestDateZ(yyyy-MM-dd HH:mm:ss:SSS,UTC)}"|"${log:inRequestDate(Z)}"
format.property.002b.commons.dataRispostaErogazione="${log:outResponseDateZ(yyyy-MM-dd HH:mm:ss:SSS,UTC)}"|"${log:outResponseDate(Z)}"
#format.property.002b.commons.dataRispostaErogazione="${log:property(dataRichiestaErogazione)}"
format.property.002c.commons.dataRichiestaFruizione="${log:outRequestDateZ(yyyy-MM-dd HH:mm:ss:SSS,UTC)}"|"${log:outRequestDate(Z)}"
format.property.002d.commons.dataRispostaFruizione="${log:inResponseDateZ(yyyy-MM-dd HH:mm:ss:SSS,UTC)}"|"${log:inResponseDate(Z)}"
#format.property.002d.commons.dataRispostaFruizione="${log:property(dataRispostaFruizione)}"

# Data base64 ISO8601 Request Time
format.property.003a.commons.dataRichiestaErogazioneBase64=${logBase64:inRequestDate(yyyy-MM-dd'T'HH:mm:ss.SSSZ)}
format.property.003b.commons.dataRispostaErogazioneBase64=${logBase64:outResponseDate(yyyy-MM-dd'T'HH:mm:ss.SSSZ)}
#format.property.003b.commons.dataRispostaErogazioneBase64="${log:property(dataRichiestaErogazioneBase64)}"
format.property.003c.commons.dataRichiestaFruizioneBase64=${logBase64:outRequestDate(yyyy-MM-dd'T'HH:mm:ss.SSSZ)}
format.property.003d.commons.dataRispostaFruizioneBase64=${logBase64:inResponseDate(yyyy-MM-dd'T'HH:mm:ss.SSSZ)}
#format.property.003d.commons.dataRispostaFruizioneBase64="${log:property(dataRispostaFruizioneBase64)}"

# Remote IP - Protocol - Method
format.property.004a.commons.remoteIP-protocol-method="${log:forwardedIP}"|"HTTP/1.1"|"${log:httpMethod}"

# URL Invocazione
format.property.005a.commons.urlErogazione="https://${log:property(commons.server.hostname)}:${log:property(commons.server.port)}${log:inURL}"
format.property.005b.commons.urlFruizione="${log:outURL}"

# Status Code
format.property.006a.commons.httpStatusErogazione="${log:outHttpStatus}"
format.property.006b.commons.httpStatusFruizione="${log:inHttpStatus}"

# Elapsed Time espressi in microsecondi
format.property.007a.commons.elapsedTimeErogazione="${log:elapsedTimeUs}"
format.property.007b.commons.elapsedTimeFruizione="${log:apiElapsedTimeUs}"


# Campi Custom 'Liberi'
format.property.100a.custom.govway=versione_api = ${log:apiVersion}; api = ${log:api}; operazione = ${log:action}; erogatore = ${log:provider}; soggetto_fruitore = ${log:sender}; applicativo_fruitore = ${log:application}; id_messaggio_richiesta = ${log:requestId}; id_messaggio_risposta = ${log:responseId}; id_collaborazione = ${log:correlationId}; id_applicativo = ${log:applicationId}; esito = ${log:result};

# Campi Custom da utilizzare per il log degli header e per la registrazione del file body response
#X-WT-IP-APP-SERVER: IP Application Server
#X-WT-HOSTNAME-APP-SERVER: Hostname Application Server
#X-WT-SERVER-ENCODING: 
#X-WT-APP-SERVER-PORT: Porta Application Server
#X-WT-USER: Utente autenticato 
#X-WT-ID-SESSION: Identificativo  di sessione
format.property.101a.custom.headers="X-WT-IP-APP-SERVER=${log:property(commons.server.ip)}"|"X-WT-HOSTNAME-APP-SERVER=${log:property(commons.server.hostname)}"|"X-WT-SERVER-ENCODING=${log:property(commons.server.encoding)}"|"X-WT-APP-SERVER-PORT=${log:property(commons.server.port)}"|"X-WT-USER=${log:property(commons.user)}"|"X-WT-CAMPI-LIBERI=${log:property(custom.govway)}"
format.property.101b.custom.headers.body=X-WT-IP-APP-SERVER: ${log:property(commons.server.ip)}\nX-WT-HOSTNAME-APP-SERVER: ${log:property(commons.server.hostname)}\nX-WT-SERVER-ENCODING: ${log:property(commons.server.encoding)}\nX-WT-APP-SERVER-PORT: ${log:property(commons.server.port)}\nX-WT-USER: ${log:property(commons.user)}\nX-WT-CAMPI-LIBERI: ${log:property(custom.govway)}


# Headers per request
# erogazione
format.property.200a.headers.erogazione.richiesta.standard=${log:inRequestHeaders(|,=,",")}
format.property.200b.headers.erogazione.richiesta=${log:propertyUnion("HEADERS",headers.erogazione.richiesta.standard,|)}
# fruizione
format.property.200c.headers.fruizione.richiesta.standard=${log:outRequestHeaders(|,=,",")}
format.property.200d.headers.fruizione.richiesta=${log:propertyUnion("HEADERS",headers.fruizione.richiesta.standard,|)}

# Headers per response
# erogazione
format.property.201a.headers.erogazione.risposta.standard=${log:outResponseHeaders(|,=,",")}
format.property.201b.headers.erogazione.risposta.standard-custom=${log:propertyUnion(headers.erogazione.risposta.standard,custom.headers,|)}
format.property.201c.headers.erogazione.risposta=${log:propertyUnion("HEADERS",headers.erogazione.risposta.standard-custom,|)}
# fruizione
format.property.201e.headers.fruizione.risposta.standard=${log:inResponseHeaders(|,=,",")}
format.property.201f.headers.fruizione.risposta.standard-custom=${log:propertyUnion(headers.fruizione.risposta.standard,custom.headers,|)}
format.property.201g.headers.fruizione.risposta=${log:propertyUnion("HEADERS",headers.fruizione.risposta.standard-custom,|)}

# Headers per body response
# erogazione
format.property.202a.headers.erogazioneBody.risposta.httpStatus=HTTP/1.1 ${log:outHttpStatus} ${log:outHttpReason}
format.property.202b.headers.erogazioneBody.risposta.standard=${log:outResponseHeaders(\n,: ,,)}
format.property.202c.headers.erogazioneBody.risposta.standard-custom=${log:propertyUnion(headers.erogazioneBody.risposta.standard,custom.headers.body,\n)}
format.property.202d.headers.erogazioneBody.risposta=${log:propertyUnion(headers.erogazioneBody.risposta.httpStatus,headers.erogazioneBody.risposta.standard-custom,\n)}
# fruizione
format.property.202e.headers.fruizioneBody.risposta.httpStatus=HTTP/1.1 ${log:inHttpStatus} ${log:inHttpReason}
format.property.202f.headers.fruizioneBody.risposta.standard=${log:inResponseHeaders(\n,: ,,)}
format.property.202g.headers.fruizioneBody.risposta.standard-custom=${log:propertyUnion(headers.fruizioneBody.risposta.standard,custom.headers.body,\n)}
format.property.202h.headers.fruizioneBody.risposta=${log:propertyUnion(headers.fruizioneBody.risposta.httpStatus,headers.fruizioneBody.risposta.standard-custom,\n)}





# Formato del log per ogni topic

# EROGAZIONI-RICHIESTA
format.topic.erogazioni.request="in-request"|${log:property(commons.id)}|${log:property(commons.dataRichiestaErogazione)}|${log:property(commons.remoteIP-protocol-method)}|${log:property(commons.urlErogazione)}|"${log:inRequestContentType}"|"${log:inRequestSize}"|${log:property(headers.erogazione.richiesta)}
format.topic.erogazioni.requestBody=${log:property(commons.id.body)}.${log:property(commons.dataRichiestaErogazioneBase64)}.${logBase64:inRequestContentType}.${logBase64:inRequestContent}

# EROGAZIONI-RISPOSTA
format.topic.erogazioni.response="in-response"|${log:property(commons.id)}|${log:property(commons.dataRispostaErogazione)}|${log:property(commons.remoteIP-protocol-method)}|${log:property(commons.urlErogazione)}|${log:property(commons.httpStatusErogazione)}|${log:property(commons.elapsedTimeErogazione)}|"${log:outResponseContentType}"|"${log:outResponseSize}"|${log:property(headers.erogazione.risposta)}
format.topic.erogazioni.responseBody=${log:property(commons.id.body)}.${log:property(commons.dataRispostaErogazioneBase64)}.${logBase64:property(headers.erogazioneBody.risposta)}.${logBase64:outResponseContent}

# FRUIZIONE-RICHIESTA
format.topic.fruizioni.request="out-request"|${log:property(commons.id)}|${log:property(commons.dataRichiestaFruizione)}|${log:property(commons.remoteIP-protocol-method)}|${log:property(commons.urlFruizione)}|"${log:outRequestContentType}"|"${log:outRequestSize}"|${log:property(headers.fruizione.richiesta)}
format.topic.fruizioni.requestBody=${log:property(commons.id.body)}.${log:property(commons.dataRichiestaFruizioneBase64)}.${logBase64:outRequestContentType}.${logBase64:outRequestContent}

# FRUIZIONE-RISPOSTA
format.topic.fruizioni.response="out-response"|${log:property(commons.id)}|${log:property(commons.dataRispostaFruizione)}|${log:property(commons.remoteIP-protocol-method)}|${log:property(commons.urlFruizione)}|${log:property(commons.httpStatusFruizione)}|${log:property(commons.elapsedTimeFruizione)}|"${log:inResponseContentType}"|"${log:inResponseSize}"|${log:property(headers.fruizione.risposta)}
format.topic.fruizioni.responseBody=${log:property(commons.id.body)}.${log:property(commons.dataRispostaFruizioneBase64)}.${logBase64:property(headers.fruizioneBody.risposta)}.${logBase64:inResponseContent}

