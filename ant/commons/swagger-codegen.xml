<project name="openspcoop2-swagger-codegen">
    <description>
        Produzione dei sorgenti a partire da una definizione swagger
    </description>
	
	<!-- estensione di ant (if .... ) -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
          <classpath>
              <pathelement location="${required_lib}/ant/ant-contrib-1.0b3.jar"/>
          </classpath>
	</taskdef>
	
		
	<!-- generazione sorgenti-->
	<target name="-swagger_codegen">
				
		<!-- Credo directory temporanea che contiene l'output del progetto maven generato -->
		<delete dir="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN"/>
		<mkdir dir="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN"/>

		<!-- per vedere i parametri disponibili: java -jar swagger-codegen-cli-3.0.46-gov4j-1.jar config-help -l jaxrs-cxf -->
		<property name="configSwaggerTemplate" location="${openspcoop2}/ant/commons/swagger-codegen-config.json"/>
		<property name="configSwagger" value="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN/swagger-codegen-config.json"/>
		<copy file="${configSwaggerTemplate}" tofile="${configSwagger}"/>
		<replace file="${configSwagger}" token="WITHXMLOPTION" value="${swaggerCodeGen.withXmlAnnotations}"/>
		<replace file="${configSwagger}" token="BEANVALIDATION" value="${swaggerCodeGen.beanValidation}"/>

		<!-- Per inserire nel classpath  gli schemi riferiti -->
		<if>
			<not>
				<equals arg1="${swaggerCodeGen.refSchemaDir}" arg2="$${swaggerCodeGen.refSchemaDir}"/>
			</not>
			<then>
				<copy todir="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN">
					<fileset dir="${swaggerCodeGen.refSchemaDir}">
						<include name="*.yaml"/>
						<include name="*.json"/>
					</fileset>
				</copy>
			</then>
		</if>

		<!-- Generazione -->
		<var name="swaggerCodeGenCliJarName" value="swagger-codegen-cli-3.0.46-gov4j-1.jar"/>
		<if>
			<istrue value="${swaggerCodeGen.useGovwayTemplate}" />
			<then>
				<var name="swaggerCodeGenCliJarName" value="swagger-codegen-cli-3.0.46-gov4j-1.jar"/>	
			</then>
		</if>
		<!-- per vedere i parametri disponibili: java -jar lib/swagger-codegen/swagger-codegen-cli-3.0.46-gov4j-1.jar generate -h -->
		<java jar="${required_lib}/swagger-codegen/${swaggerCodeGenCliJarName}" fork="true">
			<!-- Fix: Unable to make public boolean java.util.Collections$EmptyMap.isEmpty() accessible: module java.base does not "opens java.util" to unnamed module -->
			<jvmarg value="--add-opens=java.base/java.util=ALL-UNNAMED" /> 
			<arg value="generate" />
			<arg value="--input-spec" />
			<arg value="${swaggerCodeGen.inputSpec}" />
			<arg value="--lang" />
			<arg value="jaxrs-cxf" />
			<arg value="--api-package" />
			<arg value="${swaggerCodeGen.package}.api" />
			<arg value="--model-package" />
			<arg value="${swaggerCodeGen.package}.model" />
			<!--
			Non funziona (aggiungere un - se si scommenta)
			<arg value="-invoker-package" />
			<arg value="${swaggerCodeGen.package}.impl" />
			-->
			<arg value="--output" />
			<arg value="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN" />
			<arg value="--config" />
			<arg value="${configSwagger}" />
			<classpath>
				<!--
					<pathelement path="${required_lib}/swagger/*.jar"/>
				-->
			</classpath>
		</java>
		
		<!-- Pulizia vecchi sorgenti -->	
		<if>
			<istrue value="${swaggerCodeGen.deleteOldSrc}" />
			<then>
				<delete failonerror="false">
					<fileset dir="${swaggerCodeGen.outputDir}/${swaggerCodeGen.packagePath}/api">
						<include name="*.java"/>
					</fileset>
				</delete>
				<delete failonerror="false">
					<fileset dir="${swaggerCodeGen.outputDir}/${swaggerCodeGen.packagePath}/model">
						<include name="*.java"/>
					</fileset>
				</delete>
				<if>
					<istrue value="${swaggerCodeGen.writeImpl}" />
					<then>
						<delete failonerror="false">
							<fileset dir="${swaggerCodeGen.outputDir}/${swaggerCodeGen.packagePath}/api/impl">
								<include name="*.java"/>
							</fileset>
						</delete>
					</then>
				</if>
			</then>
		</if>

		<!-- Copia nuovi sorgenti generati -->	
		<copy todir="${swaggerCodeGen.outputDir}">
			<fileset dir="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN/src/gen/java">
				<include name="**/*.java"/>
			</fileset>
		</copy>
		<if>
			<istrue value="${swaggerCodeGen.writeImpl}" />
			<then>
				<copy todir="${swaggerCodeGen.outputDir}">
					<fileset dir="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN/src/main/java">
						<include name="**/*.java"/>
					</fileset>
				</copy>
			</then>
		</if>
		<delete dir="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN"/>

		<!-- BugFix CodeGen -->
		<if>
			<istrue value="${swaggerCodeGen.bugFixCodeGen}" />
			<then>
				<antcall target="-swagger_codegen_fix_bug_header_param">
					<param name="swaggerCodeGen.srcDir" value="${swaggerCodeGen.outputDir}"/>
				</antcall>	
			</then>
		</if>

		<!-- Gestione classi 'Problem' -->
		<if>
			<istrue value="${swaggerCodeGen.addAnnotationIgnoreProblem}" />
			<then>			
				<antcall target="-swagger_codegen_ignore_properties">
					<param name="problemFile" value="${swaggerCodeGen.outputDir}/${swaggerCodeGen.packagePath}/model/${swaggerCodeGen.problemClassName}.java"/>
					<param name="problemClassName" value="${swaggerCodeGen.problemClassName}"/>
				</antcall>	
			</then>
		</if>

		<!-- Impostazione package jakarta -->
		<antcall target="-swagger_codegen_fix_jakarta">
			<param name="swaggerCodeGen.srcDir" value="${swaggerCodeGen.outputDir}/${swaggerCodeGen.packagePath}/model"/>
		</antcall>
		<antcall target="-swagger_codegen_fix_jakarta">
			<param name="swaggerCodeGen.srcDir" value="${swaggerCodeGen.outputDir}/${swaggerCodeGen.packagePath}/api"/>
		</antcall>

		<!-- Aggiunta GPL ai nuovi sorgenti generati -->	
		<if>
			<istrue value="${swaggerCodeGen.addGPLDeclaration}" />
			<then>
				<java classname="GPLWriter" fork="false">
					<arg value="${swaggerCodeGen.outputDir}/${swaggerCodeGen.packagePath}/api" />
					<arg value="1"/>
					<classpath>
						<pathelement path="${openspcoop2}/distrib/check/"/>
					</classpath>
				</java>
				<java classname="GPLWriter" fork="false">
					<arg value="${swaggerCodeGen.outputDir}/${swaggerCodeGen.packagePath}/model" />
					<arg value="1"/>
					<classpath>
						<pathelement path="${openspcoop2}/distrib/check/"/>
					</classpath>
				</java>
				<if>
					<istrue value="${swaggerCodeGen.writeImpl}" />
					<then>
						<java classname="GPLWriter" fork="false">
							<arg value="${swaggerCodeGen.outputDir}/${swaggerCodeGen.packagePath}/api/impl" />
							<arg value="1"/>
							<classpath>
								<pathelement path="${openspcoop2}/distrib/check/"/>
							</classpath>
						</java>
					</then>
				</if>
			</then>
		</if>
		
		<!-- jar -->
		<if>
			<istrue value="${swaggerCodeGen.buildJar}" />
			<then>			
				<antcall target="-swagger_codegen_jar_stub">
					<param name="swaggerCodeGen.buildDir" value="${swaggerCodeGen.buildDir}"/>
					<param name="debug" value="${debug}"/>
					<param name="swaggerCodeGen.srcDir" value="${swaggerCodeGen.outputDir}"/>
					<param name="swaggerCodeGen.cleanSrcDir" value="${swaggerCodeGen.cleanSrcDir}"/>
					<param name="swaggerCodeGen.jar" value="${swaggerCodeGen.jar}"/>
					<param name="swaggerCodeGen.buildJarIncludeImpl" value="${swaggerCodeGen.buildJarIncludeImpl}"/>
				</antcall>	
			</then>	
		</if>

	</target>

	<target name="-swagger_codegen_components">
		
		<!-- Credo directory temporanea che contiene l'output del progetto maven generato -->
		<delete dir="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN"/>
		<mkdir dir="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN"/>

		<!-- per vedere i parametri disponibili: java -jar swagger-codegen-cli-3.0.46-gov4j-1.jar config-help -l jaxrs-cxf -->
		<property name="configSwaggerTemplate" location="${openspcoop2}/ant/commons/swagger-codegen-config.json"/>
		<property name="configSwagger" value="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN/swagger-codegen-config.json"/>
		<copy file="${configSwaggerTemplate}" tofile="${configSwagger}"/>
		<replace file="${configSwagger}" token="WITHXMLOPTION" value="${swaggerCodeGen.withXmlAnnotations}"/>
		<replace file="${configSwagger}" token="BEANVALIDATION" value="${swaggerCodeGen.beanValidation}"/>

		<!-- Interfaccia Swagger -->
		<property name="swagger" value="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN/swagger.yaml"/>
		<concat destfile="${swagger}" append="yes">
servers: []
info:
  description: Prefisso per la generazione di model
  version: 1.0.0
  title: GovWay API
  contact:
    email: info@link.it
paths:
  '/path':
    get:
      parameters:
        - in: path
          name: id
          description: identificativo
          required: true
          schema:
            type: string
      responses:
        '200':
</concat>
		<concat destfile="${swagger}" append="yes">
			<path>
			    <pathelement location="${swaggerCodeGen.inputSpec}"/>
			</path>
		</concat>

		<!-- Per inserire nel classpath  gli schemi riferiti -->
		<if>
			<not>
				<equals arg1="${swaggerCodeGen.refSchemaDir}" arg2="$${swaggerCodeGen.refSchemaDir}"/>
			</not>
			<then>
				<copy todir="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN">
					<fileset dir="${swaggerCodeGen.refSchemaDir}">
						<include name="*.yaml"/>
						<include name="*.json"/>
					</fileset>
				</copy>
			</then>
		</if>

		<!-- Generazione -->
		<var name="swaggerCodeGenCliJarName" value="swagger-codegen-cli-3.0.46-gov4j-1.jar"/>
		<if>
			<istrue value="${swaggerCodeGen.useGovwayTemplate}" />
			<then>
				<var name="swaggerCodeGenCliJarName" value="swagger-codegen-cli-3.0.46-gov4j-1.jar"/>	
			</then>
		</if>
		<java jar="${required_lib}/swagger-codegen/${swaggerCodeGenCliJarName}" fork="true">
			<!-- Fix: Unable to make public boolean java.util.Collections$EmptyMap.isEmpty() accessible: module java.base does not "opens java.util" to unnamed module -->
			<jvmarg value="--add-opens=java.base/java.util=ALL-UNNAMED" /> 
			<arg value="generate" />
			<arg value="--input-spec" />
			<arg value="${swagger}" />
			<arg value="--lang" />
			<arg value="jaxrs-cxf" />
			<arg value="--api-package" />
			<arg value="${swaggerCodeGen.package}.TMPapiTMP" />
			<arg value="--model-package" />
			<arg value="${swaggerCodeGen.package}" />
			<!--
			Non funziona (aggiungere un - se si scommenta)
			<arg value="-invoker-package" />
			<arg value="${swaggerCodeGen.package}.impl" />
			-->
			<arg value="--output" />
			<arg value="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN" />
			<arg value="--config" />
			<arg value="${configSwagger}" />
			<classpath>
				<!--
					<pathelement path="${required_lib}/swagger/*.jar"/>
				-->
			</classpath>
		</java>

		<!-- Pulizia vecchi sorgenti -->		
		<if>
			<istrue value="${swaggerCodeGen.deleteOldSrc}" />
			<then>
				<delete failonerror="false">
					<fileset dir="${swaggerCodeGen.outputDir}/${swaggerCodeGen.packagePath}">
						<include name="*.java"/>
					</fileset>
				</delete>
			</then>
		</if>

		<!-- Copia nuovi sorgenti generati -->
		<copy todir="${swaggerCodeGen.outputDir}">
			<fileset dir="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN/src/gen/java">
				<exclude name="**/TMPapiTMP/**"/>
				<exclude name="**/TMPapiTMP"/>
			</fileset>
		</copy>
		<delete dir="${swaggerCodeGen.outputDir}/TMP_DIR_SWAGGER_CODEGEN"/>

		<!-- BugFix CodeGen -->
		<if>
			<istrue value="${swaggerCodeGen.bugFixCodeGen}" />
			<then>
				<antcall target="-swagger_codegen_fix_bug_header_param">
					<param name="swaggerCodeGen.srcDir" value="${swaggerCodeGen.outputDir}"/>
				</antcall>	
			</then>
		</if>

		<!-- Gestione classi 'Problem' -->
		<if>
			<istrue value="${swaggerCodeGen.addAnnotationIgnoreProblem}" />
			<then>			
				<antcall target="-swagger_codegen_ignore_properties">
					<param name="problemFile" value="${swaggerCodeGen.outputDir}/${swaggerCodeGen.packagePath}/model/${swaggerCodeGen.problemClassName}.java"/>
					<param name="problemClassName" value="${swaggerCodeGen.problemClassName}"/>
				</antcall>	
			</then>
		</if>

		<!-- Impostazione package jakarta -->
		<antcall target="-swagger_codegen_fix_jakarta">
			<param name="swaggerCodeGen.srcDir" value="${swaggerCodeGen.outputDir}"/>
		</antcall>

		<!-- Aggiunta GPL ai nuovi sorgenti generati -->
		<if>
			<istrue value="${swaggerCodeGen.addGPLDeclaration}" />
			<then>
				<java classname="GPLWriter" fork="false">
					<arg value="${swaggerCodeGen.outputDir}/${swaggerCodeGen.packagePath}" />
					<arg value="1"/>
					<classpath>
						<pathelement path="${openspcoop2}/distrib/check/"/>
					</classpath>
				</java>
			</then>
		</if>

		<!-- jar -->
		<if>
			<istrue value="${swaggerCodeGen.buildJar}" />
			<then>			
				<antcall target="-swagger_codegen_jar_stub">
					<param name="swaggerCodeGen.buildDir" value="${swaggerCodeGen.buildDir}"/>
					<param name="debug" value="${debug}"/>
					<param name="swaggerCodeGen.srcDir" value="${swaggerCodeGen.outputDir}"/>
					<param name="swaggerCodeGen.cleanSrcDir" value="${swaggerCodeGen.cleanSrcDir}"/>
					<param name="swaggerCodeGen.jar" value="${swaggerCodeGen.jar}"/>
					<param name="swaggerCodeGen.buildJarIncludeImpl" value="${swaggerCodeGen.buildJarIncludeImpl}"/>
				</antcall>	
			</then>
		</if>

	</target>


	<target name="-swagger_codegen_ignore_properties">

		<!-- Impostazione Annotazione -->
		<!-- Devo modificare i sorgenti che rappresentano un Problem per aggiungere annotazione '@JsonIgnoreProperties(ignoreUnknown = true)' per potere leggere i claim aggiuntivi inseriti da GovWay -->
		<if>
			<available file="${problemFile}" type="file"/>
			<then>
				<echo message="Add JsonIgnoreProperties at file '${problemFile}'"/>	
				<var name="replacetoken" value="public class ${problemClassName}" />
				<replace file="${problemFile}" token="${replacetoken}">
					<replacevalue>@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
public class @CLASS_NAME@</replacevalue>				
				</replace>
				<replace file="${problemFile}" token="@CLASS_NAME@" value="${problemClassName}"/>
			</then>
	    </if>

	</target>


	<target name="-swagger_codegen_fix_bug_header_param">

		<!-- 
			Risolve il bug di generazione dele codice che genera una firma, in presenza di un header param, scorretta che non compila:
			public ... opName(....., @Valid ObjectType body@HeaderParam("X-ReplyTo") String xReplyTo) 
		-->
		<echo message="Fix Bug HeaderParam in src dir '${swaggerCodeGen.srcDir}'"/>	
		<var name="replacetoken" value=" body@HeaderParam(" />
		<replace dir="${swaggerCodeGen.srcDir}" token="${replacetoken}">
			<replacevalue> body, @HeaderParam(</replacevalue>				
		</replace>
		
	</target>

	<!-- Impostazione package jakarta -->
	<target name="-swagger_codegen_fix_jakarta">
		<replace dir="${swaggerCodeGen.srcDir}" token="javax.validation." value="jakarta.validation."/>
		<replace dir="${swaggerCodeGen.srcDir}" token="javax.xml.bind." value="jakarta.xml.bind."/>
		<replace dir="${swaggerCodeGen.srcDir}" token="javax.ws.rs." value="jakarta.ws.rs."/>
	</target>

	<target name="-swagger_codegen_jar_stub">
				
		<!-- Compilazione classi -->
		<javac includeantruntime="false" destdir="${swaggerCodeGen.buildDir}" debug="${debug}" encoding="UTF-8">
			<src path="${swaggerCodeGen.srcDir}" />
			<exclude name="**/api/impl/**"/>
			<classpath>
				<fileset dir="${required_lib}/cxf" includes="*.jar"/>
				<fileset dir="${required_lib}/saaj" includes="*.jar"/>
				<fileset dir="${required_lib}/jackson" includes="*.jar"/>
				<fileset dir="${required_lib}/shared" includes="wsdl4j-1.6.3.jar"/>
				<fileset dir="${required_lib}/swagger" includes="*.jar"/>
				<fileset dir="${required_lib}/commons" includes="*.jar"/>
				<fileset dir="${required_lib}/jakarta" includes="jakarta.validation-api-3.0.2.jar"/>
				<fileset dir="${required_lib}/jakarta" includes="jakarta.ws.rs-api-3.1.0.jar"/>
				<fileset dir="${required_lib}/jakarta" includes="jakarta.xml.bind-api-3.0.1.jar"/>
				<fileset dir="${required_lib}/jaxb" includes="*.jar"/>
			</classpath>
		</javac>

		<!-- Rimozione sorgenti-->
		<if>
			<istrue value="${swaggerCodeGen.cleanSrcDir}" />
			<then>
				<delete dir="${swaggerCodeGen.srcDir}" />
			</then>
		</if>

		<!-- jar -->
		<if>
			<istrue value="${swaggerCodeGen.buildJarIncludeImpl}" />
			<then>
				<jar jarfile="${swaggerCodeGen.jar}">
					<zipfileset dir="${swaggerCodeGen.buildDir}" >
						<exclude name="**/api/impl/**"/>
					</zipfileset>
				</jar>
			</then>
			<else>
				<jar jarfile="${swaggerCodeGen.jar}">
					<zipfileset dir="${swaggerCodeGen.buildDir}" />
				</jar>
			</else>
		</if>

	</target>
	
	
</project>
