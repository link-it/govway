<project name="openspcoop2-sql">
    <description>
        Produzione script SQL
    </description>
	
	<!-- estensione di ant (if .... ) -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
          <classpath>
              <pathelement location="${required_lib}/ant/ant-contrib-1.0b3.jar"/>
          </classpath>
	</taskdef>
	


	<!-- SCRIPT SQL -->
	<target name="git-version-sql-replace">

		<!-- Imposto versione -->	
		<var name="pddDetails" value="3.4.0" />
		<var name="pddVersionMajor" value="3" />
                <var name="pddVersionMinor" value="4" />

		<if>
			<isfalse value="${buildAsRelease}"/>
			<then>
				<runtarget target="checkgit" />
		
				<if>
					<istrue value="${jgit.jar.presente}"/>
					<then>
					      <GitProperties src="${gitrepo_root}" 
					        authorNameProperty="git.authorName"
				        	authorMailProperty="git.authorMail"
					        authorCommitDateProperty="git.authorDate"
					        shortHashProperty="git.commitShortHash"
						/>

						<!-- <echo message="TEST A[${git.commitShortHash}] B[${git.authorName}] C[${git.commitShortHash}] D[${git.authorDate}] E[${git.url}]"/> -->
						<!-- Imposto versione -->	
						<var name="pddDetails" value="GovWay commit.${git.commitShortHash}, ${git.authorDate}" />						
					</then>
				</if>	
			</then>
			<else>
				<if>
					<isset property="env.RELEASE_VERSION_MAJOR]"/>
					<then>
						<var name="pddVersionMajor" value="${env.RELEASE_VERSION_MAJOR}" />
					</then>
				</if>
				<if>
					<isset property="env.RELEASE_VERSION_MINOR]"/>
					<then>
						<var name="pddVersionMinor" value="${env.RELEASE_VERSION_MINOR}" />
					</then>
				</if>
				<if>
					<isset property="env.RELEASE_DETAILS]"/>
					<then>
						<var name="pddDetails" value="${env.RELEASE_DETAILS}" />	
					</then>
				</if>
			</else>
		</if>

		<replace file="${SQLDestFile}" 
			 token="@MAJOR_VERSION@" 
			 value="${pddVersionMajor}" />
		<replace file="${SQLDestFile}" 
			 token="@MINOR_VERSION@" 
			 value="${pddVersionMinor}" />
		<replace file="${SQLDestFile}"  
			 token="v@FULL_VERSION@" 
			 value="${pddDetails}" />

	</target>
	
	<target name="build_sql" description="Genera i file SQL per l'installazione">
		<if>
			<equals arg1="${tipoDatabase}" arg2="$${tipoDatabase}"/>
			<then>
				<fail message="Parametro tipoDatabase non fornito"/>
			</then>
		</if>
		<if>
			<not>
				<available file="${SQLDirectory}/${tipoDatabase}" type="dir"/>
			</not>
			<then>
				<fail message="TipoDatabase fornito non supportato"/>
			</then>
		</if>
		<delete file="${SQLDestFile}" />
		<!-- <foreach list="${SQLSourceFiles}" param="fileSql" delimiter=" " target="build_sql_concat" inheritall="true"/> -->
		<for list="${SQLSourceFiles}" param="fileSql" delimiter=" ">
			<sequential>
				<concat destfile="${SQLDestFile}" append="yes">
					<filelist dir="${SQLDirectory}/${tipoDatabase}" files="@{fileSql}"/>
				</concat>
				<concat destfile="${SQLDestFile}" append="yes">

-- govway
		  		
</concat>
			</sequential>
		</for>
		<if>
			<not>
				<equals arg1="${SQLDataFiles}" arg2="$${SQLDataFiles}"/>
			</not>
			<then>
				<!-- <foreach list="${SQLDataFiles}" param="fileSql" delimiter=" " target="build_sql_data_concat" inheritall="true"/> -->
				<for list="${SQLDataFiles}" param="fileSql" delimiter=" ">
					<sequential>
						<concat destfile="${SQLDestFile}" append="yes">
							<filelist dir="${SQLDirectory}" files="@{fileSql}"/>
						</concat>
						<concat destfile="${SQLDestFile}" append="yes">

-- govway
			  		
</concat>
					</sequential>
				</for>
			</then>
		</if>
		<concat destfile="${SQLDestFile}" append="yes">

${SQLInsertDBInfo}

</concat>
		<antcall target="git-version-sql-replace"/>
	</target>
	
	<target name="build_sql_utility" description="Genera i file SQL di utilita' (delete, drop)">
		<if>
			<equals arg1="${tipoDatabase}" arg2="$${tipoDatabase}"/>
			<then>
				<fail message="Parametro tipoDatabase non fornito"/>
			</then>
		</if>
		<if>
			<not>
				<available file="${SQLDirectory}/utilities/${tipoDatabase}" type="dir"/>
			</not>
			<then>
				<fail message="TipoDatabase fornito non supportato"/>
			</then>
		</if>
		<delete file="${SQLDestFile}" />
		<!-- <foreach list="${SQLSourceFiles}" param="fileSql" delimiter=" " target="build_sql_utils_concat" inheritall="true"/> -->
		<for list="${SQLSourceFiles}" param="fileSql" delimiter=" ">
			<sequential>
				<concat destfile="${SQLDestFile}" append="yes">
					<filelist dir="${SQLDirectory}/utilities/${tipoDatabase}" files="@{fileSql}"/>
				</concat>
				<concat destfile="${SQLDestFile}" append="yes">

-- govway
		  		
</concat>
			</sequential>
		</for>
	</target>
	
</project>
