<?xml version="1.0" encoding="iso-8859-1"?>

<project name="GovWayMonitor" basedir=".">
	<description>
        File di Script per la compilazione dell'interfaccia GovWayMonitor
    </description>

	<import file="./local_env.xml" />
	<import file="./ant/openspcoop2-govwayMonitor_core-build.xml" />
	<import file="./ant/openspcoop2-govwayMonitor_transazioni-build.xml" />
	<import file="./ant/openspcoop2-govwayMonitor_statistiche-build.xml" />
	<import file="./ant/openspcoop2-govwayMonitor_eventi-build.xml" />
	<import file="./ant/openspcoop2-govwayMonitor_allarmi-build.xml" />
	<import file="./ant/openspcoop2-govwayMonitor-war.xml" />
	<import file="./ant/openspcoop2-govwayMonitor-codeGen.xml" />
	<import file="./ant/openspcoop2-govwayMonitor-resource.xml" />
	<import file="${mvc}/build.xml" />
	<import file="${users}/build.xml" />
	<import file="${audit}/build.xml" />
	<import file="${openspcoop2}/ant/commons/as-check.xml" />
	
	<!-- directory root -->
	<property name="gitrepo_root" location="${openspcoop2}" />
	
	<!-- set properties for this build -->
	<property name="govwayMonitor" location="${basedir}" />
	
	<property name="src_govwayMonitor" value="${govwayMonitor}/src" />
	<property name="src_webinf_govwayMonitor" value="${src_govwayMonitor}/WEB-INF" />
	<property name="src_core_govwayMonitor" value="${src_govwayMonitor}/src_core" />
	<property name="src_stat_govwayMonitor" value="${src_govwayMonitor}/src_stat" />
	<property name="src_transazioni_govwayMonitor" value="${src_govwayMonitor}/src_transazioni" />
	<property name="src_eventi_govwayMonitor" value="${src_govwayMonitor}/src_eventi" />
	<property name="src_allarmi_govwayMonitor" value="${src_govwayMonitor}/src_allarmi" />
	<property name="build_govwayMonitor" location="build/govwayMonitor" />
	<property name="build_govwayMonitor_war" location="build/govwayMonitorWar" />
	<property name="dist_govwayMonitor" location="dist" />
	<property name="doc_govwayMonitor" location="doc" />
	<property name="plugins_govwayMonitor" value="${govwayMonitor}/deploy/plugins/config" />
	<property name="plugins_govwayMonitor_pages" value="${govwayMonitor}/deploy/plugins/pages" /> <!-- xhtml e tutto il resto del materiale che deve finire dentro l'archivio -->
	<property name="properties_govwayMonitor" value="${govwayMonitor}/deploy/properties" />
	<property name="deploy_govwayMonitor" value="${govwayMonitor}/deploy" />
	<property name="commons_temaConsole" value="${deploy_govwayMonitor}/tema_css" />
	<property name="appSec.dir" location="${deploy_govwayMonitor}/applicationSecurity" />

	<!-- Indicazione se produrre la versione per server non j2ee -->
	<var name="j2ee" value="true" />
	
	<!-- Check AS Version -->
	<if>
		<not>
			<istrue value="${_asVersionVerified}"/>
		</not>
		<then>
			<runtarget target="check_as_version" />
			<var name="_asVersionVerified" value="true"/>
		</then>
	</if>
	<if>
		<matches string="${as}" pattern="tomcat.*"/>
		<then>
			<!-- Indicazione se produrre la versione senza j2ee object: mdb e timer ejb -->
			<var name="j2ee" value="false"/>
		</then>
	</if>
	
	<!-- Jar dipendenti dall'A.S. -->
	<var name="xerces_jar" value=""/>
	<var name="xml_apis_jar" value=""/>
	<var name="xalan_jar" value="" />
	<var name="xalan_serializer_jar" value="" />
	<var name="commons_logging_jar" value="" />
	<var name="javax_servlet_jsp_jstl_jar" value="" />
	<var name="javax_servlet_jsp_jstl_api_jar" value="" />
	<var name="jsf_impl_jar" value="" />
	<var name="jsf_api_jar" value="" />
	<var name="el_impl_jar" value="" />
	<var name="stax2-api_jar" value="" />
	<var name="jsf_module_jar" value="" />
	<var name="wildfly_module_jar" value="" />
	<var name="jboss_classloading" value="" />
	<var name="jboss_scanning" value="" />
	<var name="jboss_deployment_structure" value="" />
	<var name="cookie_same_site" value="" />

	<!-- commons_logging -->
	<if>
		<or>
			<matches string="${as}" pattern="wildfly.*"/>
			<matches string="${as}" pattern="tomcat.*"/>
		</or>
		<then>
			<var name="commons_logging_jar" value="commons-logging-1.2.jar" />
		</then>
	</if>
	<!-- xalan -->
	<if>
		<or>
			<matches string="${as}" pattern="tomcat.*"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="xalan_jar" value="xalan-2.7.3.jar" />
			<var name="xalan_serializer_jar" value="serializer-2.7.3.jar" />
		</then>
	</if>
	<!-- xerces -->
	<if>
		<or>
			<matches string="${as}" pattern="tomcat.*"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="xerces_jar" value="xercesImpl-2.12.2.jar"/>
			<var name="xml_apis_jar" value="xml-apis-1.4.01.jar"/>
		</then>
	</if>
	<!-- stax2-api_jar -->
	<if>
		<or>
			<matches string="${as}" pattern="tomcat.*"/>
		</or>
		<then>
			<var name="stax2-api_jar" value="stax2-api-4.2.2.jar" />
		</then>
	</if>
	
	<!-- JSF Module -->
	<if>
		<and>
			<matches string="${as}" pattern="wildfly.*"/>
			<equals arg1="${buildJsfAsModule}" arg2="false"/>
		</and>
		<then>
			<var name="jsf_module_jar" value="*.jar" />
		</then>
	</if>
	<if>
		<and>
			<or>
				<matches string="${as}" pattern="wildfly8"/>
				<matches string="${as}" pattern="wildfly9"/>
			</or>
			<equals arg1="${buildJsfAsModule}" arg2="false"/>
		</and>
		<then>
			<var name="wildfly_module_jar" value="*.jar" />
		</then>
	</if>	

	<!-- jboss_classloading -->
	<if>
		<or>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="jboss_classloading" value="jboss-classloading.xml" />
		</then>
	</if>
	<!-- jboss_scanning -->
	<if>
		<or>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="jboss_scanning" value="jboss-scanning.xml" />
		</then>
	</if>
	<!-- jboss_deployment_structure -->
	<if>
		<or>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="jboss_deployment_structure" value="jboss-deployment-structure.xml" />
		</then>
	</if>
	<!-- cookie_same_site -->
	<if>
		<or>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="cookie_same_site" value="undertow-handlers.conf" />
		</then>
	</if>
	
	
	<!-- Indicazione se produrre la versione singlePdD -->
	<var name="singlePdD" value="false" />
	<!-- Indicazione se produrre la versione singlePdD con registroServizi locale -->
	<var name="singlePdD.registroServizi.locale" value="true" />

	
	<!-- estensione di ant (if .... ) -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${required_lib}/ant/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<!-- CLASSPATH -->
	<path id="classpath_compile" >
		<fileset dir="${required_lib}" >
			<exclude name="**/axis14/*"/>
			<exclude name="**/*README"/>
			<exclude name="*.userlibraries"/>
			<exclude name="axis14/*"/>
		</fileset>
	</path>
	<path id="classpath_dist" >
		<fileset dir="${openspcoop2_jars}" >
			<include name="*.jar"/>
		</fileset>
	</path>	
	
	<!-- Ripulisce la distribuzione -->
	<target name="clean_govwayMonitor">
		<delete dir="${build_govwayMonitor}" />
		<delete dir="${build_govwayMonitor_war}" />
		<delete dir="build" />
		<delete dir="${dist_govwayMonitor}" />
		<delete dir="${doc_govwayMonitor}" />
	</target>

	<!-- Create the build directory structure used by compile -->
	<target name="init_compile_govwayMonitor">
		<mkdir dir="${build_govwayMonitor}" />
		<mkdir dir="${build_govwayMonitor}/tmp" />
		<mkdir dir="${build_govwayMonitor}/tmp_css" />
		<mkdir dir="${build_govwayMonitor_war}" />
		<mkdir dir="${dist_govwayMonitor}" />
	</target>
	
	

	<!-- Creazione Plugins di ControlStation -->
	<target name="plugins_govwayMonitor" description="Crea l'elenco dei jar/properties installati come plugins della govwayMonitor">
		<!-- jar -->
		<fileset dir="${plugins_govwayMonitor}" id="plugins.jar">
			<include name="**/*.jar" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath" refid="plugins.jar">
			<map from="${plugins_govwayMonitor}/" to="lib/" />
		</pathconvert>
		<pathconvert pathsep=" " property="plugins.classpath.jar" refid="plugins.jar">
			<map from="${plugins_govwayMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins-jar della PddMonitor: ${plugins.classpath.jar}" />

		<!-- properties -->
		<fileset dir="${plugins_govwayMonitor}" id="plugins.properties">
			<include name="**/*.properties" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.properties" refid="plugins.properties">
			<map from="${plugins_govwayMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins-properties della PdDMonitor: ${plugins.classpath.properties}" />

		<!-- dao properties -->
		<fileset dir="${plugins_govwayMonitor}" id="plugins.properties.dao">
			<include name="**/daoFactory.properties.adjunct" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.properties.dao" refid="plugins.properties.dao">
			<map from="${plugins_govwayMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins-properties (DAO-Adjunct) della PdDMonitor: ${plugins.classpath.properties.dao}" />

		<!-- monitor properties -->
		<fileset dir="${plugins_govwayMonitor}" id="plugins.properties.monitor">
			<include name="**/monitor.properties.adjunct" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.properties.monitor" refid="plugins.properties.monitor">
			<map from="${plugins_govwayMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins-properties (Monitor-Adjunct) della PdDMonitor: ${plugins.classpath.properties.monitor}" />

		<!-- WEB-INF/<nome>.web.xml.params -->
		<fileset dir="${plugins_govwayMonitor}" id="plugins.web.xml.params">
			<include name="**/*.web.xml.params" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.web.xml.params" refid="plugins.web.xml.params">
			<map from="${plugins_govwayMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins WEB-INF/web.xml (params) della PdDMonitor: ${plugins.classpath.web.xml.params}" />

		<!-- WEB-INF/<nome>.web.xml.filters -->
		<fileset dir="${plugins_govwayMonitor}" id="plugins.web.xml.filters">
			<include name="**/*.web.xml.filters" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.web.xml.filters" refid="plugins.web.xml.filters">
			<map from="${plugins_govwayMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins WEB-INF/web.xml (filters) della PdDMonitor: ${plugins.classpath.web.xml.filters}" />

		<!-- WEB-INF/<nome>.web.xml.listeners -->
		<fileset dir="${plugins_govwayMonitor}" id="plugins.web.xml.listeners">
			<include name="**/*.web.xml.listeners" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.web.xml.listeners" refid="plugins.web.xml.listeners">
			<map from="${plugins_govwayMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins WEB-INF/web.xml (listeners) della PdDMonitor: ${plugins.classpath.web.xml.listeners}" />

		<!-- WEB-INF/<nome>.web.xml.servlet -->
		<fileset dir="${plugins_govwayMonitor}" id="plugins.web.xml.servlet">
			<include name="**/*.web.xml.servlet" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.web.xml.servlet" refid="plugins.web.xml.servlet">
			<map from="${plugins_govwayMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins WEB-INF/web.xml (servlet) della PdDMonitor: ${plugins.classpath.web.xml.servlet}" />

		<!-- WEB-INF/<nome>.web.xml.servlet.mapping -->
		<fileset dir="${plugins_govwayMonitor}" id="plugins.web.xml.servlet.mapping">
			<include name="**/*.web.xml.servlet.mapping" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.web.xml.servlet.mapping" refid="plugins.web.xml.servlet.mapping">
			<map from="${plugins_govwayMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins WEB-INF/web.xml (servlet.mapping) della PdDMonitor: ${plugins.classpath.web.xml.servlet.mapping}" />

	</target>

	
	
	<!-- Compilazioni dipendenze -->
	<target name="compile_dipendenze">
		<if>
			<istrue value="${buildPddMonitor}"/>
			<then>
				<runtarget target="compile_dipendenze_invoke" />
			</then>
		</if>
	</target>
	<target name="compile_dipendenze_invoke" depends="compile_users,compile_audit" description="compila le dipendenze" />

	<!-- Compilazione della PddMonitor-->
	<target name="compile_openspcoop2_govwayMonitor" depends="compile_openspcoop2_govwayMonitor_core,compile_openspcoop2_govwayMonitor_transazioni,compile_openspcoop2_govwayMonitor_statistiche,compile_openspcoop2_govwayMonitor_eventi,compile_openspcoop2_govwayMonitor_allarmi" description="compila govwayMonitor"/>
	<target name="compile_govwayMonitor" depends="init_compile_govwayMonitor,compile_dipendenze,compile_openspcoop2_govwayMonitor" description="compila govwayMonitor"/>


	<!-- Creazione del modulo .WAR -->
	<target name="build_govwayMonitor" depends="plugins_govwayMonitor,compile_dipendenze,compile_govwayMonitor,-prepare,war_openspcoop2_govwayMonitor" description="Crea la struttura del modulo WAR" >
		<!-- Per wildfly devo fornire  il modulo jsf 1.2 da installare. -->
		<if> 
			<or>
				<matches string="${as}" pattern="wildfly.*"/>
			</or>
			<then>
				<if>
					<and>
					    	<equals arg1="${buildJsfAsModule}" arg2="true"/>
					</and>
					<then>
						<copy todir="${dist_govwayMonitor}/modulo-jsf12">
    							<fileset dir="${deploy_govwayMonitor}/modulo-jsf12"/>
    						</copy>
					</then>
				</if>
			</then>
		</if>
	</target>
	
	<!-- alias -->
	<target name="build" depends="build_govwayMonitor"/>
	<target name="clean" depends="clean_govwayMonitor"/>




</project>
