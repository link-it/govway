<project name="zaproxy" basedir="." default="analizeGovWay">

	<import file="local_env.xml" />
	<import file="${openspcoop2}/ant/commons/as-check.xml" />
	<import file="${openspcoop2}/ant/commons/git-build.xml" />
	<import file="${openspcoop2}/ant/commons/compile-build.xml" />
	<import file="${openspcoop2}/ant/commons/api-build.xml" />
	<import file="${openspcoop2}/ant/commons/utils.xml" />
	
	<!-- https://www.zaproxy.org/ -->
	<!-- https://github.com/zaproxy/zap-api-java -->

	<!-- directory root -->
	<property name="gitrepo_root" location="${openspcoop2}" />

	<!-- estensione di ant (if .... ) -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${openspcoop2.lib}/ant/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<property name="zap_dir" location="." />
	<property name="src_zap" value="${zap_dir}/src" />
	<property name="build_zap" value="${zap_dir}/build" />
	<property name="tmp_zap" value="${zap_dir}/tmp" />
	<property name="scripts_zap" value="${zap_dir}/scripts" />

	<property name="run_zap" value="${scripts_zap}/runZAProxy.sh" />
	<property name="stop_zap" value="${scripts_zap}/stopZAProxy.sh" />
	<property name="wait_start_zap" value="${scripts_zap}/waitStartZAProxy.sh" />
		
	<!-- CLASSPATH -->
	<path id="classpath_run" >
                <fileset dir="${required_lib}" >
                        <exclude name="**/axis14/*"/>
                        <exclude name="**/applicationServer/**/*.jar"/>
                        <exclude name="**/swagger-codegen/*"/>
                        <exclude name="**/*README"/>
                        <exclude name="*.userlibraries"/>
                </fileset>
		<fileset dir="${openspcoop2.dist}" >
			<include name="*.jar"/>
		</fileset>
	</path>
	<path id="classpath_dist" >
		<fileset dir="${openspcoop2.dist}" >
			<include name="*.jar"/>
		</fileset>
	</path>

	<!-- Ripulisce la distribuzione -->
	<target name="clean">
		<delete dir="${build_zap}"/>
	</target>
	<target name="init">
		<mkdir dir="${build_zap}"/>
	</target>

	<!-- ZAP Proxy -->
	<target name="-checkZapProxyHome" 
        	description="Controlla che la directory HOME di ZAP Proxy sia stata definita" >

                <if>
                        <equals arg1="${zaproxy.home}" arg2="$${zaproxy.home}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.home' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.home}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.home' non definito"/>
                        </then>
                </if>
	</target>
	<target name="-runZapProxy" 
        	description="Esegue ZAP Proxy" >

                <if>
                        <equals arg1="${zaproxy.home}" arg2="$${zaproxy.home}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.home' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.home}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.home' non definito"/>
                        </then>
                </if>

		<echo message="Run ZAP Api Key: '${zap-api-key}'"/>

		<!-- Run the java code  -->
		<exec executable="${run_zap}">
			<arg value="${zaproxy.home}"/>
			<arg value="${zaproxy.session}" />
			<arg value="${zap-api-key}" />
			<arg value="${zaproxy.port}" />
			<arg value="${zaproxy.address}" />
		</exec>
	</target>
	<target name="-executeZap" depends="-checkZapProxyHome, build"
        	description="Esegue il target indicato" >
		<tstamp>
			<format property="touch.time" pattern="yyyyMMdd_HHmmssSSS" />
		</tstamp>
		<var name="zap-api-key" value="${zaproxy.api-key}_${touch.time}" />
		<exec executable="${stop_zap}" failonerror="false"> <!-- Se non esiste fa lo stesso -->
			<arg value="false" />
		</exec>
		<trycatch property="error.message">
			<try>
				<parallel timeout="${zaproxy.timeout}" failonany="true">
					<antcall target="-runZapProxy" />
					<sequential>
						<exec executable="${wait_start_zap}" failonerror="true">
							<arg value="${zaproxy.port}" />
							<arg value="${zaproxy.address}" />
						</exec>
						<antcall target="${zap_target}" />
						<exec executable="${stop_zap}" failonerror="true"/>
					</sequential>
				</parallel>
			</try>

			<catch>
				<echo message="Execute '${zap_target}' failed"/>
			</catch>

			<finally>
				<exec executable="${stop_zap}" failonerror="false"> <!-- Se non esiste fa lo stesso -->
					<arg value="false" />
				</exec>
			</finally>
		</trycatch>

	</target>


	<!-- Compilazione del ZAPClient -->
	<target name="build" depends="clean,init"
       	 description="compila il ZAPClient" >
		<!-- Compile the java code  -->
		<javac includeantruntime="false" destdir="${build_zap}" debug="true">
			<src path="${src_zap}"/>
			<classpath>
				<path refid="classpath_run"/>
			</classpath>
		</javac>
	</target>

	<!-- ReportInfos -->
	<target name="reportInfos">
		<antcall target="-executeZap">
			<param name="zap_target" value="-reportInfos"/>
		</antcall>
	</target>
	<target name="-reportInfos">
		<echo message="ReportInfos Api Key: '${zap-api-key}'"/>
		<java classname="org.openspcoop2.testsuite.zap.ReportInfos" fork="false">
			<arg value="${zaproxy.address}" />
			<arg value="${zaproxy.port}" />
			<arg value="${zaproxy.session}" />
			<arg value="${zap-api-key}" />
			<arg value="${zaproxy.debug}" />
			<classpath>
				<path refid="classpath_run" />
				<pathelement path="${build_zap}"/>
			</classpath>
		</java>
	</target>

	<!-- SessionManagementInfos -->
	<target name="sessionManagementInfos">
		<antcall target="-executeZap">
			<param name="zap_target" value="-sessionManagementInfos"/>
		</antcall>
	</target>
	<target name="-sessionManagementInfos">
		<echo message="SessionManagementInfos Api Key: '${zap-api-key}'"/>
		<java classname="org.openspcoop2.testsuite.zap.SessionManagementInfos" fork="false">
			<arg value="${zaproxy.address}" />
			<arg value="${zaproxy.port}" />
			<arg value="${zaproxy.session}" />
			<arg value="${zap-api-key}" />
			<arg value="${zaproxy.debug}" />
			<classpath>
				<path refid="classpath_run" />
				<pathelement path="${build_zap}"/>
			</classpath>
		</java>
	</target>

	<!-- AuthenticationInfos -->
	<target name="authenticationInfos">
		<antcall target="-executeZap">
			<param name="zap_target" value="-authenticationInfos"/>
		</antcall>
	</target>
	<target name="-authenticationInfos">
		<echo message="AuthenticationInfos Api Key: '${zap-api-key}'"/>
		<java classname="org.openspcoop2.testsuite.zap.AuthenticationInfos" fork="false">
			<arg value="${zaproxy.address}" />
			<arg value="${zaproxy.port}" />
			<arg value="${zaproxy.session}" />
			<arg value="${zap-api-key}" />
			<arg value="${zaproxy.debug}" />
			<classpath>
				<path refid="classpath_run" />
				<pathelement path="${build_zap}"/>
			</classpath>
		</java>
	</target>

	<!-- OpenAPI -->
	<target name="analizeOpenAPI">

                <if>
                        <equals arg1="${zaproxy.openapi}" arg2="$${zaproxy.openapi}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.openapi' (file o url) non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.openapi}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.openapi' (file o url) non definito"/>
                        </then>
                </if>

                <if>
                        <equals arg1="${zaproxy.openapi.targetUrl}" arg2="$${zaproxy.openapi.targetUrl}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.openapi.targetUrl' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.openapi.targetUrl}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.openapi.targetUrl' non definito"/>
                        </then>
                </if>

		<antcall target="-executeZap">
			<param name="zap_target" value="-analizeOpenAPI"/>
		</antcall>
	</target>
	<target name="-analizeOpenAPI">
		<echo message="OpenAPI Api Key: '${zap-api-key}'"/>
		<java classname="org.openspcoop2.testsuite.zap.OpenAPI" fork="false">
			<arg value="${zaproxy.address}" />
			<arg value="${zaproxy.port}" />
			<arg value="${zaproxy.session}" />
			<arg value="${zap-api-key}" />
			<arg value="${zaproxy.debug}" />
			<arg value="${zaproxy.openapi}" />
			<arg value="${zaproxy.openapi.targetUrl}" />
			<arg value="${zaproxy.report.title}" />
			<arg value="${zaproxy.report.description}" />
			<arg value="${zaproxy.report.includedConfidences}" />
			<arg value="${zaproxy.report.includedRisks}" />
			<arg value="${zaproxy.report.fileNamePattern}" />
			<arg value="${zaproxy.report.dir}" />
			<arg value="${zaproxy.report.display}" />
			<arg value="${zaproxy.report.templates}" />
			<classpath>
				<path refid="classpath_run" />
				<pathelement path="${build_zap}"/>
			</classpath>
		</java>
	</target>

	<!-- WSDL -->
	<target name="analizeSoap">

                <if>
                        <equals arg1="${zaproxy.soap}" arg2="$${zaproxy.soap}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.soap' (file o url) non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.soap}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.soap' (file o url) non definito"/>
                        </then>
                </if>

                <if>
                        <equals arg1="${zaproxy.soap.targetUrl}" arg2="$${zaproxy.soap.targetUrl}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.soap.targetUrl' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.soap.targetUrl}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.soap.targetUrl' non definito"/>
                        </then>
                </if>

		<antcall target="-executeZap">
			<param name="zap_target" value="-analizeSoap"/>
		</antcall>
	</target>
	<target name="-analizeSoap">
		<echo message="SOAP Api Key: '${zap-api-key}'"/>
		<java classname="org.openspcoop2.testsuite.zap.Soap" fork="false">
			<arg value="${zaproxy.address}" />
			<arg value="${zaproxy.port}" />
			<arg value="${zaproxy.session}" />
			<arg value="${zap-api-key}" />
			<arg value="${zaproxy.debug}" />
			<arg value="${zaproxy.soap}" />
			<arg value="${zaproxy.soap.targetUrl}" />
			<arg value="${zaproxy.report.title}" />
			<arg value="${zaproxy.report.description}" />
			<arg value="${zaproxy.report.includedConfidences}" />
			<arg value="${zaproxy.report.includedRisks}" />
			<arg value="${zaproxy.report.fileNamePattern}" />
			<arg value="${zaproxy.report.dir}" />
			<arg value="${zaproxy.report.display}" />
			<arg value="${zaproxy.report.templates}" />
			<classpath>
				<path refid="classpath_run" />
				<pathelement path="${build_zap}"/>
			</classpath>
		</java>
	</target>

	<!-- GovWay API -->
	<property name="govway_rest_status" value="${zap_dir}/../../core/deploy/preloading/status/govway_status.yaml" />
	<property name="govway_soap_status" value="${zap_dir}/../../core/deploy/preloading/status/govway_status.wsdl" />
	<property name="govway_api_config" value="${zap_dir}/../../tools/rs/config/server/src/schemi/merge/govway_rs-api_config.yaml" />
	<property name="govway_api_monitor" value="${zap_dir}/../../tools/rs/monitor/server/src/schemi/merge/govway_rs-api_monitor.yaml" />
	<target name="analizeGovWayAPI">

		<!-- api rest status -->
		<antcall target="-analizeGovWayAPI">
			<param name="analyzeTarget" value="analizeOpenAPI"/>
			<param name="analyzeType" value="api-rest-status"/>
			<param name="analyzeInterface" value="${govway_rest_status}"/>
			<param name="analyzeTargetUrl" value="${govway.endpoint}/govway/${govway.ente}/api-rest-status/v1"/>
			<param name="analyzeTitle" value="GovWay API REST"/>
			<param name="analyzeDescription" value="Analisi per API di tipo REST"/>
		</antcall>

		<!-- api soap status -->
		<antcall target="-analizeGovWayAPI">
			<param name="analyzeTarget" value="analizeSoap"/>
			<param name="analyzeType" value="api-soap-status"/>
			<param name="analyzeInterface" value="${govway_soap_status}"/>
			<param name="analyzeTargetUrl" value="${govway.endpoint}/govway/${govway.ente}/api-soap-status/v1"/>
			<param name="analyzeTitle" value="GovWay API SOAP"/>
			<param name="analyzeDescription" value="Analisi per API di tipo SOAP"/>
		</antcall>

		<!-- api govway config -->
		<antcall target="-analizeGovWayAPI">
			<param name="analyzeTarget" value="analizeOpenAPI"/>
			<param name="analyzeType" value="api-config"/>
			<param name="analyzeInterface" value="${govway_api_config}"/>
			<param name="analyzeTargetUrl" value="${govway.endpoint}/govway/${govway.ente}/api-config/v1"/>
			<param name="analyzeTitle" value="GovWay API di configurazione" />
			<param name="analyzeDescription" value="Analisi delle API di GovWay per la configurazione" />
		</antcall>

		<!-- api govway monitor -->
		<antcall target="-analizeGovWayAPI">
			<param name="analyzeTarget" value="analizeOpenAPI"/>
			<param name="analyzeType" value="api-monitor"/>
			<param name="analyzeInterface" value="${govway_api_monitor}"/>
			<param name="analyzeTargetUrl" value="${govway.endpoint}/govway/${govway.ente}/api-monitor/v1"/>
			<param name="analyzeTitle" value="GovWay API di monitoraggio" />
			<param name="analyzeDescription" value="Analisi delle API di GovWay per il monitoraggio" />
		</antcall>

	</target>
	<target name="-analizeGovWayAPI">
                <if>
                        <equals arg1="${zaproxy.skipTests}" arg2="$${zaproxy.skipTests}"/>
                        <then>
				<var name="_zaproxyExecute" value="true"/>                                
                        </then>
			<else>
				<condition property="_zaproxyExecute" value="false" else="true">
					<contains string="${zaproxy.skipTests}" substring="${analyzeType}"/>
				</condition>	
			</else>
                </if>
                <if>
                        <equals arg1="${_zaproxyExecute}" arg2="true"/>
                        <then>

				<delete dir="${zaproxy.report.dir}/${analyzeType}" />
				<mkdir dir="${zaproxy.report.dir}/${analyzeType}" />
                
				<if>
		                        <equals arg1="${analyzeTarget}" arg2="analizeOpenAPI"/>
		                        <then>
						<antcall target="analizeOpenAPI">
							<param name="zaproxy.openapi" value="${analyzeInterface}"/>
							<param name="zaproxy.openapi.targetUrl" value="${analyzeTargetUrl}"/>
							<param name="zaproxy.report.dir" value="${zaproxy.report.dir}/${analyzeType}" />
							<param name="zaproxy.report.fileNamePattern" value="zap_report_${analyzeType}.ext" />
							<param name="zaproxy.report.title" value="${analyzeTitle}" />
							<param name="zaproxy.report.description" value="${analyzeDescription}" />
						</antcall>
					</then>
				</if>
				<if>
		                        <equals arg1="${analyzeTarget}" arg2="analizeSoap"/>
		                        <then>
						<antcall target="analizeSoap">
							<param name="zaproxy.soap" value="${analyzeInterface}"/>
							<param name="zaproxy.soap.targetUrl" value="${analyzeTargetUrl}"/>
							<param name="zaproxy.report.dir" value="${zaproxy.report.dir}/${analyzeType}" />
							<param name="zaproxy.report.fileNamePattern" value="zap_report_${analyzeType}.ext" />
							<param name="zaproxy.report.title" value="${analyzeTitle}" />
							<param name="zaproxy.report.description" value="${analyzeDescription}" />
						</antcall>
					</then>
				</if>
			</then>
                </if>
	</target>

	<!-- GovWayConsole -->
	<target name="analizeGovWayConsole">

                <if>
                        <equals arg1="${zaproxy.govwayConsole.url}" arg2="$${zaproxy.govwayConsole.url}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayConsole.url' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.govwayConsole.url}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayConsole.url' non definito"/>
                        </then>
                </if>

                <if>
                        <equals arg1="${zaproxy.govwayConsole.username}" arg2="$${zaproxy.govwayConsole.username}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayConsole.username' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.govwayConsole.username}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayConsole.username' non definito"/>
                        </then>
                </if>

                <if>
                        <equals arg1="${zaproxy.govwayConsole.password}" arg2="$${zaproxy.govwayConsole.password}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayConsole.password' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.govwayConsole.password}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayConsole.password' non definito"/>
                        </then>
                </if>

                <if>
                        <equals arg1="${zaproxy.govwayConsole.scanTypes}" arg2="$${zaproxy.govwayConsole.scanTypes}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayConsole.scanTypes' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.govwayConsole.scanTypes}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayConsole.scanTypes' non definito"/>
                        </then>
                </if>

                <if>
                        <equals arg1="${zaproxy.govwayConsole.scanUrls}" arg2="$${zaproxy.govwayConsole.scanUrls}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayConsole.scanUrls' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.govwayConsole.scanUrls}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayConsole.scanUrls' non definito"/>
                        </then>
                </if>

                <if>
                        <equals arg1="${zaproxy.govwayConsole.falsePositives}" arg2="$${zaproxy.govwayConsole.falsePositives}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayConsole.falsePositives' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.govwayConsole.falsePositives}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayConsole.falsePositives' non definito"/>
                        </then>
                </if>

		<antcall target="-executeZap">
			<param name="zap_target" value="-analizeGovWayConsole"/>
		</antcall>
	</target>
	<target name="-analizeGovWayConsole">
		<echo message="GovWayConsole Api Key: '${zap-api-key}'"/>
		<java classname="org.openspcoop2.testsuite.zap.GovWayConsole" fork="false">
			<arg value="${zaproxy.address}" />
			<arg value="${zaproxy.port}" />
			<arg value="${zaproxy.session}" />
			<arg value="${zap-api-key}" />
			<arg value="${zaproxy.debug}" />
			<arg value="${zaproxy.govwayConsole.url}" />
			<arg value="${zaproxy.govwayConsole.username}" />
			<arg value="${zaproxy.govwayConsole.password}" />
			<arg value="${zaproxy.govwayConsole.scanTypes}" />
			<arg value="${zaproxy.govwayConsole.scanUrls}" />
			<arg value="${zaproxy.govwayConsole.falsePositives}" />
			<arg value="${zaproxy.report.title}" />
			<arg value="${zaproxy.report.description}" />
			<arg value="${zaproxy.report.includedConfidences}" />
			<arg value="${zaproxy.report.includedRisks}" />
			<arg value="${zaproxy.report.fileNamePatternConsole}" />
			<arg value="${zaproxy.report.dir}" />
			<arg value="${zaproxy.report.display}" />
			<arg value="${zaproxy.report.templates}" />
			<classpath>
				<path refid="classpath_run" />
				<pathelement path="${build_zap}"/>
			</classpath>
		</java>
	</target>

	<!-- GovWayMonitor -->
	<target name="analizeGovWayMonitor">

                <if>
                        <equals arg1="${zaproxy.govwayMonitor.url}" arg2="$${zaproxy.govwayMonitor.url}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayMonitor.url' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.govwayMonitor.url}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayMonitor.url' non definito"/>
                        </then>
                </if>

                <if>
                        <equals arg1="${zaproxy.govwayMonitor.username}" arg2="$${zaproxy.govwayMonitor.username}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayMonitor.username' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.govwayMonitor.username}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayMonitor.username' non definito"/>
                        </then>
                </if>

                <if>
                        <equals arg1="${zaproxy.govwayMonitor.password}" arg2="$${zaproxy.govwayMonitor.password}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayMonitor.password' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.govwayMonitor.password}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayMonitor.password' non definito"/>
                        </then>
                </if>

                <if>
                        <equals arg1="${zaproxy.govwayMonitor.scanTypes}" arg2="$${zaproxy.govwayMonitor.scanTypes}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayMonitor.scanTypes' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.govwayMonitor.scanTypes}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayMonitor.scanTypes' non definito"/>
                        </then>
                </if>

                <if>
                        <equals arg1="${zaproxy.govwayMonitor.scanUrls}" arg2="$${zaproxy.govwayMonitor.scanUrls}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayMonitor.scanUrls' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.govwayMonitor.scanUrls}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayMonitor.scanUrls' non definito"/>
                        </then>
                </if>

                <if>
                        <equals arg1="${zaproxy.govwayMonitor.falsePositives}" arg2="$${zaproxy.govwayMonitor.falsePositives}"/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayMonitor.falsePositives' non fornito"/>
                        </then>
                </if>
                <if>
                        <equals arg1="${zaproxy.govwayMonitor.falsePositives}" arg2=""/>
                        <then>
                                <fail message="Parametro 'zaproxy.govwayMonitor.falsePositives' non definito"/>
                        </then>
                </if>

		<antcall target="-executeZap">
			<param name="zap_target" value="-analizeGovWayMonitor"/>
		</antcall>
	</target>
	<target name="-analizeGovWayMonitor">
		<echo message="GovWayMonitor Api Key: '${zap-api-key}'"/>
		<java classname="org.openspcoop2.testsuite.zap.GovWayMonitor" fork="false">
			<arg value="${zaproxy.address}" />
			<arg value="${zaproxy.port}" />
			<arg value="${zaproxy.session}" />
			<arg value="${zap-api-key}" />
			<arg value="${zaproxy.debug}" />
			<arg value="${zaproxy.govwayMonitor.url}" />
			<arg value="${zaproxy.govwayMonitor.username}" />
			<arg value="${zaproxy.govwayMonitor.password}" />
			<arg value="${zaproxy.govwayMonitor.scanTypes}" />
			<arg value="${zaproxy.govwayMonitor.scanUrls}" />
			<arg value="${zaproxy.govwayMonitor.falsePositives}" />
			<arg value="${zaproxy.report.title}" />
			<arg value="${zaproxy.report.description}" />
			<arg value="${zaproxy.report.includedConfidences}" />
			<arg value="${zaproxy.report.includedRisks}" />
			<arg value="${zaproxy.report.fileNamePatternConsole}" />
			<arg value="${zaproxy.report.dir}" />
			<arg value="${zaproxy.report.display}" />
			<arg value="${zaproxy.report.templates}" />
			<classpath>
				<path refid="classpath_run" />
				<pathelement path="${build_zap}"/>
			</classpath>
		</java>
	</target>

	<!-- GovWay Consoles -->
	<target name="analizeGovWayConsoles" depends="analizeGovWayConsoleGestione,analizeGovWayConsoleMonitoraggio"/>
	<!-- govwayConsole -->
	<target name="analizeGovWayConsoleGestione">
		<if>
			<not>
				<or>
					<or>
				                <equals arg1="${zaproxy.jdbc.driver.className}" arg2="$${zaproxy.jdbc.connectionUrl}"/>
						<equals arg1="${zaproxy.jdbc.driver.className}" arg2="JDBC_DRIVER_CLASS_NAME"/>
					</or>
					<or>
				                <equals arg1="${zaproxy.jdbc.driver.jarPath}" arg2="$${zaproxy.jdbc.connectionUrl}"/>
						<equals arg1="${zaproxy.jdbc.driver.jarPath}" arg2="JDBC_DRIVER_PATH"/>
					</or>
					<or>
				                <equals arg1="${zaproxy.jdbc.connectionUrl}" arg2="$${zaproxy.jdbc.connectionUrl}"/>
						<equals arg1="${zaproxy.jdbc.connectionUrl}" arg2="JDBC_CONNECTION_URL"/>
					</or>
					<or>
				                <equals arg1="${zaproxy.jdbc.username}" arg2="$${zaproxy.jdbc.username}"/>
						<equals arg1="${zaproxy.jdbc.username}" arg2="JDBC_USERNAME"/>
					</or>
					<or>
				                <equals arg1="${zaproxy.jdbc.password}" arg2="$${zaproxy.jdbc.password}"/>
						<equals arg1="${zaproxy.jdbc.password}" arg2="JDBC_PASSWORD"/>
					</or>
				</or>
			</not>
                        <then>
				<runtarget target="-analizeGovWayConsoleGestioneInitTemplateVariable"/>
				<foreach param="file" target="-analizeGovWayConsoleGestioneInizialiteConfigTemplate" inheritall="true" inheritrefs="true">
					<path>
						<dirset dir="${govway.console.config.scanUrls.templates}">
							<filename name="*" />
						</dirset>
					</path>
				</foreach>
                        </then>
			<else>
				<echo message="WARN: Istanziazione template config non abilitata; verificare che tutte le variabili zaproxy.jdbc.* siano state configurate"/>
			</else>
                </if>
		<foreach param="file" target="-analizeGovWayConsoleGestioneReadConfig">
			<path>
				<dirset dir="${govway.console.config.scanUrls}">
					<filename name="*" />
				</dirset>
			</path>
		</foreach>
	</target>
	<target name="-analizeGovWayConsoleGestioneInitTemplateVariable">
		<!-- ID API SOAP -->
		<antcall target="-analizeGovWayConsoleGestioneInitTemplateVariableBySql">
			<param name="templatePropertyName" value="idApiSoap"/>
			<param name="templatePropertyQuery" value="select id from accordi where nome='api-soap-status'"/>
		</antcall>
		<loadfile property="idApiSoap" srcFile="idApiSoap.properties">
			<filterchain><striplinebreaks/></filterchain>
		</loadfile>
		<echo message="idApiSoap: ${idApiSoap}" />
		<delete file="idApiSoap.properties"/>
		<!-- ID API REST -->
		<antcall target="-analizeGovWayConsoleGestioneInitTemplateVariableBySql">
			<param name="templatePropertyName" value="idApiRest"/>
			<param name="templatePropertyQuery" value="select id from accordi where nome='api-config'"/>
		</antcall>
		<loadfile property="idApiRest" srcFile="idApiRest.properties">
			<filterchain><striplinebreaks/></filterchain>
		</loadfile>
		<echo message="idApiRest: ${idApiRest}" />
		<delete file="idApiRest.properties"/>
		<!-- ID EROGAZIONE SOAP -->
		<antcall target="-analizeGovWayConsoleGestioneInitTemplateVariableBySql">
			<param name="templatePropertyName" value="idErogazioneSoap"/>
			<param name="templatePropertyQuery" value="select s.id as id from servizi s, soggetti sog where s.id_soggetto=sog.id AND s.nome_servizio = 'api-soap-status' AND sog.nome_soggetto='${govway.ente}'"/>
		</antcall>
		<loadfile property="idErogazioneSoap" srcFile="idErogazioneSoap.properties">
			<filterchain><striplinebreaks/></filterchain>
		</loadfile>
		<echo message="idErogazioneSoap: ${idErogazioneSoap}" />
		<delete file="idErogazioneSoap.properties"/>
		<!-- ID EROGATORE SOAP -->
		<antcall target="-analizeGovWayConsoleGestioneInitTemplateVariableBySql">
			<param name="templatePropertyName" value="idErogatoreSoap"/>
			<param name="templatePropertyQuery" value="select sog.id as idSoggErogatore from servizi s, soggetti sog where s.id_soggetto=sog.id AND s.nome_servizio = 'api-soap-status' AND sog.nome_soggetto='${govway.ente}'"/>
		</antcall>
		<loadfile property="idErogatoreSoap" srcFile="idErogatoreSoap.properties">
			<filterchain><striplinebreaks/></filterchain>
		</loadfile>
		<echo message="idErogatoreSoap: ${idErogatoreSoap}" />
		<delete file="idErogatoreSoap.properties"/>
		<!-- ID EROGAZIONE REST -->
		<antcall target="-analizeGovWayConsoleGestioneInitTemplateVariableBySql">
			<param name="templatePropertyName" value="idErogazioneRest"/>
			<param name="templatePropertyQuery" value="select s.id as id from servizi s, soggetti sog where s.id_soggetto=sog.id AND s.nome_servizio = 'api-config' AND sog.nome_soggetto='${govway.ente}'"/>
		</antcall>
		<loadfile property="idErogazioneRest" srcFile="idErogazioneRest.properties">
			<filterchain><striplinebreaks/></filterchain>
		</loadfile>
		<echo message="idErogazioneRest: ${idErogazioneRest}" />
		<delete file="idErogazioneRest.properties"/>
		<!-- ID EROGATORE REST -->
		<antcall target="-analizeGovWayConsoleGestioneInitTemplateVariableBySql">
			<param name="templatePropertyName" value="idErogatoreRest"/>
			<param name="templatePropertyQuery" value="select sog.id as idSoggErogatore from servizi s, soggetti sog where s.id_soggetto=sog.id AND s.nome_servizio = 'api-config' AND sog.nome_soggetto='${govway.ente}'"/>
		</antcall>
		<loadfile property="idErogatoreRest" srcFile="idErogatoreRest.properties">
			<filterchain><striplinebreaks/></filterchain>
		</loadfile>
		<echo message="idErogatoreRest: ${idErogatoreRest}" />
		<delete file="idErogatoreRest.properties"/>
		<!-- ID FRUIZIONE REST -->
		<antcall target="-analizeGovWayConsoleGestioneInitTemplateVariableBySql">
			<param name="templatePropertyName" value="idFruizioneRest"/>
			<param name="templatePropertyQuery" value="select s.id as id from servizi_fruitori f, servizi s, soggetti ero, soggetti fru where f.id_soggetto=fru.id AND f.id_servizio=s.id AND s.id_soggetto=ero.id AND s.nome_servizio = 'api-pdnd' AND fru.nome_soggetto='${govway.ente}' AND ero.nome_soggetto='PDND'"/>
		</antcall>
		<loadfile property="idFruizioneRest" srcFile="idFruizioneRest.properties">
			<filterchain><striplinebreaks/></filterchain>
		</loadfile>
		<echo message="idFruizioneRest: ${idFruizioneRest}" />
		<delete file="idFruizioneRest.properties"/>
		<!-- ID FRUITORE REST -->
		<antcall target="-analizeGovWayConsoleGestioneInitTemplateVariableBySql">
			<param name="templatePropertyName" value="idFruitoreRest"/>
			<param name="templatePropertyQuery" value="select fru.id as idsogg from servizi_fruitori f, servizi s, soggetti ero, soggetti fru where f.id_soggetto=fru.id AND f.id_servizio=s.id AND s.id_soggetto=ero.id AND s.nome_servizio = 'api-pdnd' AND fru.nome_soggetto='${govway.ente}' AND ero.nome_soggetto='PDND'"/>
		</antcall>
		<loadfile property="idFruitoreRest" srcFile="idFruitoreRest.properties">
			<filterchain><striplinebreaks/></filterchain>
		</loadfile>
		<echo message="idFruitoreRest: ${idFruitoreRest}" />
		<delete file="idFruitoreRest.properties"/>
		<!-- ID FRUITORE REST -->
		<antcall target="-analizeGovWayConsoleGestioneInitTemplateVariableBySql">
			<param name="templatePropertyName" value="idFruitoreRest"/>
			<param name="templatePropertyQuery" value="select fru.id as idsogg from servizi_fruitori f, servizi s, soggetti ero, soggetti fru where f.id_soggetto=fru.id AND f.id_servizio=s.id AND s.id_soggetto=ero.id AND s.nome_servizio = 'api-pdnd' AND fru.nome_soggetto='${govway.ente}' AND ero.nome_soggetto='PDND'"/>
		</antcall>
		<loadfile property="idFruitoreRest" srcFile="idFruitoreRest.properties">
			<filterchain><striplinebreaks/></filterchain>
		</loadfile>
		<echo message="idFruitoreRest: ${idFruitoreRest}" />
		<delete file="idFruitoreRest.properties"/>
		<!-- MYID FRUITORE REST -->
		<antcall target="-analizeGovWayConsoleGestioneInitTemplateVariableBySql">
			<param name="templatePropertyName" value="myidFruizioneRest"/>
			<param name="templatePropertyQuery" value="select f.id as myId from servizi_fruitori f, servizi s, soggetti ero, soggetti fru where f.id_soggetto=fru.id AND f.id_servizio=s.id AND s.id_soggetto=ero.id AND s.nome_servizio = 'api-pdnd' AND fru.nome_soggetto='${govway.ente}' AND ero.nome_soggetto='PDND'"/>
		</antcall>
		<loadfile property="myidFruizioneRest" srcFile="myidFruizioneRest.properties">
			<filterchain><striplinebreaks/></filterchain>
		</loadfile>
		<echo message="myidFruizioneRest: ${myidFruizioneRest}" />
		<delete file="myidFruizioneRest.properties"/>
	</target>
	<target name="-analizeGovWayConsoleGestioneInitTemplateVariableBySql">
		<sql driver="${zaproxy.jdbc.driver.className}"
		 url="${zaproxy.jdbc.connectionUrl}"
		 userid="${zaproxy.jdbc.username}"
		 password="${zaproxy.jdbc.password}"
		 classpath="${zaproxy.jdbc.driver.jarPath}"
		 print="true" 
		 output="${templatePropertyName}.properties"
		 showheaders="false" showtrailers="false" delimitertype="row">
		${templatePropertyQuery}
		</sql>
	</target>
	<target name="-analizeGovWayConsoleGestioneInizialiteConfigTemplate">
		<basename property="configBaseName" file="${file}"/>
		<echo message="Istanziazione template govwayConsole per il pacchetto di url '${configBaseName}' ..."/>
		<delete dir="${govway.console.config.scanUrls}/${configBaseName}" />
		<copy todir="${govway.console.config.scanUrls}/${configBaseName}">
			<fileset dir="${govway.console.config.scanUrls.templates}/${configBaseName}"/>
		</copy>
		<replace dir="${govway.console.config.scanUrls}/${configBaseName}" token="NOME_ENTE" value="${govway.ente}"/>
		<replace dir="${govway.console.config.scanUrls}/${configBaseName}" token="ID_API_SOAP" value="${idApiSoap}"/>
		<replace dir="${govway.console.config.scanUrls}/${configBaseName}" token="ID_API_REST" value="${idApiRest}"/>
		<replace dir="${govway.console.config.scanUrls}/${configBaseName}" token="ID_EROGAZIONE_SOAP" value="${idErogazioneSoap}"/>
		<replace dir="${govway.console.config.scanUrls}/${configBaseName}" token="ID_EROGATORE_SOAP" value="${idErogatoreSoap}"/>
		<replace dir="${govway.console.config.scanUrls}/${configBaseName}" token="ID_EROGAZIONE_REST" value="${idErogazioneRest}"/>
		<replace dir="${govway.console.config.scanUrls}/${configBaseName}" token="ID_EROGATORE_REST" value="${idErogatoreRest}"/>
		<replace dir="${govway.console.config.scanUrls}/${configBaseName}" token="ID_FRUIZIONE_REST" value="${idFruizioneRest}"/>
		<replace dir="${govway.console.config.scanUrls}/${configBaseName}" token="ID_FRUITORE_REST" value="${idFruitoreRest}"/>
		<replace dir="${govway.console.config.scanUrls}/${configBaseName}" token="MY_FRUIZIONE_REST" value="${myidFruizioneRest}"/>
		<echo message="Istanziazione template govwayConsole per il pacchetto di url '${configBaseName}' completata"/>
	</target>
	<target name="-analizeGovWayConsoleGestioneReadConfig">
		<basename property="configBaseName" file="${file}"/>
		<dirname property="configDirName" file="${file}"/>

		<echo message="Avvio analisi govwayConsole per il pacchetto di url '${configBaseName}' ..."/>
		<echo message="ScanUrls: ${file}/scanUrls.txt"/>
		<echo message="FalsePositives: ${file}/falsePositives.txt"/>

		<delete file="${tmp_zap}/falsePositive.txt"/>
		<concat destfile="${tmp_zap}/falsePositive.txt" append="no">
			<filelist dir="${configDirName}" files="${configBaseName}/falsePositives.txt"/>
 		</concat>
		<concat destfile="${tmp_zap}/falsePositive.txt" append="yes">

# Global False Positives
		  		
</concat>
		<basename property="configBaseNameGlobalFP" file="${govway.console.config.globalFalsePositives}"/>
		<dirname property="configDirNameGlobalFP" file="${govway.console.config.globalFalsePositives}"/>
		<concat destfile="${tmp_zap}/falsePositive.txt" append="yes">
			<filelist dir="${configDirNameGlobalFP}" files="${configBaseNameGlobalFP}"/>
 		</concat>
		<echo message="FalsePositives file: '${tmp_zap}/falsePositive.txt'"/>

		<var name="scanTypeGovwayConsole" value="spider"/>   
		<if>
                        <equals arg1="${govway.console.config.scanType.ajaxSpider}" arg2="true"/>
                        <then>
				<var name="scanTypeGovwayConsole" value="${scanTypeGovwayConsole}|ajaxspider"/>                                
                        </then>
		</if>
		<if>
                        <equals arg1="${govway.console.config.scanType.active}" arg2="true"/>
                        <then>
				<var name="scanTypeGovwayConsole" value="${scanTypeGovwayConsole}|active"/>                                
                        </then>
		</if>

		<antcall target="-analizeGovWayConsoles">
			<param name="analyzeTarget" value="analizeGovWayConsole"/>
			<param name="analyzeType" value="console-configurazione"/>
			<param name="analyzeTargetUrl" value="${govway.endpoint}/govwayConsole"/>
			<param name="analyzeUsername" value="${govway.console.config.username}"/>
			<param name="analyzePassword" value="${govway.console.config.password}"/>
			<param name="analyzeScanTypes" value="${scanTypeGovwayConsole}"/>
			<param name="analyzeScanUrls" value="${file}/scanUrls.txt"/>
			<param name="analyzeFalsePositives" value="${tmp_zap}/falsePositive.txt"/>
			<param name="analyzeTitle" value="GovWay Console di Configurazione"/>
			<param name="analyzeDescription" value="Analisi per la console di configurazione di GovWay"/>
		</antcall>

		<echo message="Analisi govwayConsole per il pacchetto di url '${configBaseName}' completata"/>
	</target>
	<!-- govwayMonitor -->
	<target name="analizeGovWayConsoleMonitoraggio">
		<delete dir="${zaproxy.report.dir}/console-monitoraggio" />
		<foreach param="file" target="-analizeGovWayConsoleMonitoraggioReadConfig">
			<path>
				<dirset dir="${govway.console.monitor.scanUrls}">
					<filename name="*" />
				</dirset>
			</path>
		</foreach>
	</target>
	<target name="-analizeGovWayConsoleMonitoraggioReadConfig">
		<basename property="configBaseName" file="${file}"/>
		<dirname property="configDirName" file="${file}"/>

		<echo message="Avvio analisi govwayMonitor per il pacchetto di url '${configBaseName}' ..."/>
		<echo message="ScanUrls: ${file}/scanUrls.txt"/>
		<echo message="FalsePositives: ${file}/falsePositives.txt"/>

		<delete file="${tmp_zap}/falsePositive.txt"/>
		<concat destfile="${tmp_zap}/falsePositive.txt" append="no">
			<filelist dir="${configDirName}" files="${configBaseName}/falsePositives.txt"/>
 		</concat>
		<concat destfile="${tmp_zap}/falsePositive.txt" append="yes">

# Global False Positives
		  		
</concat>
		<basename property="configBaseNameGlobalFP" file="${govway.console.monitor.globalFalsePositives}"/>
		<dirname property="configDirNameGlobalFP" file="${govway.console.monitor.globalFalsePositives}"/>
		<concat destfile="${tmp_zap}/falsePositive.txt" append="yes">
			<filelist dir="${configDirNameGlobalFP}" files="${configBaseNameGlobalFP}"/>
 		</concat>
		<echo message="FalsePositives file: '${tmp_zap}/falsePositive.txt'"/>

		<var name="scanTypeGovwayMonitor" value="spider"/>   
		<if>
                        <equals arg1="${govway.console.monitor.scanType.ajaxSpider}" arg2="true"/>
                        <then>
				<var name="scanTypeGovwayMonitor" value="${scanTypeGovwayMonitor}|ajaxspider"/>                                
                        </then>
		</if>
		<if>
                        <equals arg1="${govway.console.monitor.scanType.active}" arg2="true"/>
                        <then>
				<var name="scanTypeGovwayMonitor" value="${scanTypeGovwayMonitor}|active"/>                                
                        </then>
		</if>

		<antcall target="-analizeGovWayConsoles">
			<param name="analyzeTarget" value="analizeGovWayMonitor"/>
			<param name="analyzeType" value="console-monitoraggio"/>
			<param name="analyzeTargetUrl" value="${govway.endpoint}/govwayMonitor"/>
			<param name="analyzeUsername" value="${govway.console.monitor.username}"/>
			<param name="analyzePassword" value="${govway.console.monitor.password}"/>
			<param name="analyzeScanTypes" value="${scanTypeGovwayMonitor}"/>
			<param name="analyzeScanUrls" value="${file}/scanUrls.txt"/>
			<param name="analyzeFalsePositives" value="${tmp_zap}/falsePositive.txt"/>
			<param name="analyzeTitle" value="GovWay Console di Monitoraggio"/>
			<param name="analyzeDescription" value="Analisi per la console di monitoraggio di GovWay"/>
		</antcall>

		<echo message="Analisi govwayMonitor per il pacchetto di url '${configBaseName}' completata"/>
	</target>
	<!-- engine-->
	<target name="-analizeGovWayConsoles">
                <if>
                        <equals arg1="${zaproxy.skipTests}" arg2="$${zaproxy.skipTests}"/>
                        <then>
				<var name="_zaproxyExecute" value="true"/>                                
                        </then>
			<else>
				<condition property="_zaproxyExecute" value="false" else="true">
					<contains string="${zaproxy.skipTests}" substring="${analyzeType}"/>
				</condition>	
			</else>
                </if>
                <if>
                        <equals arg1="${_zaproxyExecute}" arg2="true"/>
                        <then>

				<mkdir dir="${zaproxy.report.dir}/${analyzeType}" />
                
				<if>
		                        <equals arg1="${analyzeTarget}" arg2="analizeGovWayConsole"/>
		                        <then>
						<antcall target="analizeGovWayConsole">
							<param name="zaproxy.govwayConsole.url" value="${analyzeTargetUrl}"/>
							<param name="zaproxy.govwayConsole.username" value="${analyzeUsername}"/>
							<param name="zaproxy.govwayConsole.password" value="${analyzePassword}"/>
							<param name="zaproxy.govwayConsole.scanTypes" value="${analyzeScanTypes}"/>
							<param name="zaproxy.govwayConsole.scanUrls" value="${analyzeScanUrls}"/>
							<param name="zaproxy.govwayConsole.falsePositives" value="${analyzeFalsePositives}"/>
							<param name="zaproxy.report.dir" value="${zaproxy.report.dir}/${analyzeType}" />
							<param name="zaproxy.report.fileNamePattern" value="zap_report_SCAN_TYPE_${analyzeType}.ext" />
							<param name="zaproxy.report.title" value="${analyzeTitle}" />
							<param name="zaproxy.report.description" value="${analyzeDescription}" />
						</antcall>
					</then>
				</if>
				<if>
		                        <equals arg1="${analyzeTarget}" arg2="analizeGovWayMonitor"/>
		                        <then>
						<antcall target="analizeGovWayMonitor">
							<param name="zaproxy.govwayMonitor.url" value="${analyzeTargetUrl}"/>
							<param name="zaproxy.govwayMonitor.username" value="${analyzeUsername}"/>
							<param name="zaproxy.govwayMonitor.password" value="${analyzePassword}"/>
							<param name="zaproxy.govwayMonitor.scanTypes" value="${analyzeScanTypes}"/>
							<param name="zaproxy.govwayMonitor.scanUrls" value="${analyzeScanUrls}"/>
							<param name="zaproxy.govwayMonitor.falsePositives" value="${analyzeFalsePositives}"/>
							<param name="zaproxy.report.dir" value="${zaproxy.report.dir}/${analyzeType}" />
							<param name="zaproxy.report.fileNamePattern" value="zap_report_SCAN_TYPE_${analyzeType}.ext" />
							<param name="zaproxy.report.title" value="${analyzeTitle}" />
							<param name="zaproxy.report.description" value="${analyzeDescription}" />
						</antcall>
					</then>
				</if>

			</then>
                </if>
	</target>

	<!-- Effettuata tutti i test -->
	<target name="analizeGovWay" depends="analizeGovWayAPI"/> <!-- da agganciare ,analizeGovWayConsoles"/> -->
</project>
