/*
 * GovWay - A customizable API Gateway 
 * https://govway.org
 * 
 * Copyright (c) 2005-2025 Link.it srl (https://link.it).
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3, as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package org.openspcoop2.core.diagnostica.ws.client.messaggiodiagnostico.search;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;

import org.openspcoop2.utils.date.DateManager;

/**
 * This class was generated by Apache CXF 2.7.4
 * 2015-02-18T17:21:47.657+01:00
 * Generated source version: 2.7.4
 * 
 */
public final class MessaggioDiagnostico_MessaggioDiagnosticoPortSoap11_Client {

	private static final QName SERVICE_NAME = new QName("http://www.openspcoop2.org/core/diagnostica/management", "MessaggioDiagnosticoSoap11Service");

	private MessaggioDiagnostico_MessaggioDiagnosticoPortSoap11_Client() {
	}

	public static void main(String args[]) throws java.lang.Exception {
		URL wsdlURL = MessaggioDiagnosticoSoap11Service.WSDL_LOCATION;
		if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
			File wsdlFile = new File(args[0]);
			try {
				if (wsdlFile.exists()) {
					wsdlURL = wsdlFile.toURI().toURL();
				} else {
					wsdlURL = new URL(args[0]);
				}
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
		}

		MessaggioDiagnosticoSoap11Service ss = new MessaggioDiagnosticoSoap11Service(wsdlURL, MessaggioDiagnostico_MessaggioDiagnosticoPortSoap11_Client.SERVICE_NAME);
		MessaggioDiagnostico port = ss.getMessaggioDiagnosticoPortSoap11();

		new org.openspcoop2.core.diagnostica.ws.client.utils.RequestContextUtils("messaggioDiagnostico.soap11").addRequestContextParameters((javax.xml.ws.BindingProvider)port);  

		long _count__return = 0;
		{
			System.out.println("Invoking count...");
			org.openspcoop2.core.diagnostica.ws.client.messaggiodiagnostico.search.SearchFilterMessaggioDiagnostico _count_filter = new SearchFilterMessaggioDiagnostico();
			try {
				_count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);

			} catch (DiagnosticaServiceException_Exception e) { 
				System.out.println("Expected exception: diagnostica-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (DiagnosticaNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: diagnostica-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (DiagnosticaNotImplementedException_Exception e) { 
				System.out.println("Expected exception: diagnostica-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		if(_count__return>0){
			{
				System.out.println("Invoking findAll...");
				org.openspcoop2.core.diagnostica.ws.client.messaggiodiagnostico.search.SearchFilterMessaggioDiagnostico _findAll_filter = new SearchFilterMessaggioDiagnostico();
				try {
					_findAll_filter.setLimit(new BigInteger("10"));
					java.util.List<org.openspcoop2.core.diagnostica.MessaggioDiagnostico> _findAll__return = port.findAll(_findAll_filter);
					System.out.println("findAll.result=" + _findAll__return.size());
					for (org.openspcoop2.core.diagnostica.MessaggioDiagnostico messaggioDiagnostico : _findAll__return) {
						System.out.println("["+messaggioDiagnostico.getOraRegistrazione()+"]["+messaggioDiagnostico.getCodice()+"]["+messaggioDiagnostico.getIdentificativoRichiesta()+"]["+messaggioDiagnostico.getMessaggio()+"]");
					}

				} catch (DiagnosticaServiceException_Exception e) { 
					System.out.println("Expected exception: diagnostica-service-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotAuthorizedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-authorized-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotImplementedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-implemented-exception has occurred.");
					System.out.println(e.toString());
				}
			}
			
			
			{
				System.out.println("Invoking findAll (FiltroAll)...");
				org.openspcoop2.core.diagnostica.ws.client.messaggiodiagnostico.search.SearchFilterMessaggioDiagnostico _findAll_filter = new SearchFilterMessaggioDiagnostico();
				try {
					_findAll_filter.setLimit(new BigInteger("10"));
					_findAll_filter.setOffset(new BigInteger("0"));
					
					_findAll_filter.setCodice("003007");
					
					_findAll_filter.setDescOrder(true);
					
					_findAll_filter.setDominio(new DominioDiagnostico());
					_findAll_filter.getDominio().setModulo("InoltroBuste");
					_findAll_filter.getDominio().setIdentificativoPorta("MinisteroFruitoreSPCoopIT");
					_findAll_filter.getDominio().setSoggetto(new DominioSoggetto());
					_findAll_filter.getDominio().getSoggetto().setTipo("SPC");
					_findAll_filter.getDominio().getSoggetto().setBase("MinisteroFruitore");
					
					_findAll_filter.setIdentificativoRichiesta("MinisteroFruitore_MinisteroFruitoreSPCoopIT_0000020_2015-02-16_17:11");
					_findAll_filter.setIdentificativoRisposta("MinisteroErogatore_MinisteroErogatoreSPCoopIT_0000021_2015-02-16_17:11");
					
					_findAll_filter.setMessaggio("inviato alla parte destinataria");
					
					Calendar cMax = DateManager.getCalendar();
					cMax.setTime(new Date(System.currentTimeMillis()+10000));
					XMLGregorianCalendar max = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMax);
					_findAll_filter.setOraRegistrazioneMax(max);
									
					Calendar cMin = DateManager.getCalendar();
					cMin.setTime(new Date(System.currentTimeMillis()-500000000));
					XMLGregorianCalendar min = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMin);
					_findAll_filter.setOraRegistrazioneMin(min);
						
					
					_findAll_filter.setProtocollo(new Protocollo());
					_findAll_filter.getProtocollo().setIdentificativo("spcoop");
					
					_findAll_filter.setSeverita(new BigInteger("3"));
					
					java.util.List<org.openspcoop2.core.diagnostica.MessaggioDiagnostico> _findAll__return = port.findAll(_findAll_filter);
					System.out.println("findAll.result=" + _findAll__return.size());
					for (org.openspcoop2.core.diagnostica.MessaggioDiagnostico messaggioDiagnostico : _findAll__return) {
						System.out.println("["+messaggioDiagnostico.getOraRegistrazione()+"]["+messaggioDiagnostico.getCodice()+"]["+messaggioDiagnostico.getIdentificativoRichiesta()+"]["+messaggioDiagnostico.getMessaggio()+"]");
					}

				} catch (DiagnosticaServiceException_Exception e) { 
					System.out.println("Expected exception: diagnostica-service-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotAuthorizedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-authorized-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotImplementedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-implemented-exception has occurred.");
					System.out.println(e.toString());
				}
			}
		}


		System.exit(0);
	}

}
