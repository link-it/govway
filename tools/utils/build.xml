<?xml version="1.0" encoding="iso-8859-1"?>

<project name="OpenSPCoop2Utils" default="build" basedir=".">

	<description>
        	Ambiente di compilazione del Progetto OpenSPCoop2Utils
	</description>

	<import file="./local_env.xml" />
	<import file="./ant/openspcoop2-utils-build.xml" />
	<import file="./ant/openspcoop2-utils-codeGen.xml" />


	<!-- estensione di ant (if .... ) -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	<classpath>
			<pathelement location="${required_lib}/ant/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<!-- directory root -->
	<property name="gitrepo_root" location="${openspcoop2}" />
	
	<property name="src_utils" location="src" />
	<property name="build_utils" location="build" />
	<property name="dist_utils" location="dist" />
	<property name="doc_utils" location="doc" />


	<!-- CLASSPATH -->
	<path id="classpath_compile" >
		<fileset dir="${required_lib}" >
			<exclude name="**/axis14/*"/>
			<exclude name="**/applicationServer/**/*.jar"/>
			<exclude name="**/swagger-codegen/*"/>
			<exclude name="**/*README"/>
			<exclude name="*.userlibraries"/>
		</fileset>
	</path>
	<path id="classpath_dist" >
	</path>	

	<!-- Ripulisce la distribuzione -->
	<target name="clean_utils">
		<delete dir="${build_utils}" />
		<delete dir="build" />
		<delete dir="${dist_utils}" />
		<delete dir="${doc_utils}" />
	</target>

	<!-- Create the build directory structure used by compile -->
	<target name="init_compile_utils">
		<mkdir dir="${build_utils}" />
		<mkdir dir="${build_utils}/tmp" />
		<mkdir dir="${dist_utils}" />
	</target>
	
	
	
	
	<!-- Compilazione della PddConsole-->
	<target name="compile_utils" depends="init_compile_utils,compile_openspcoop2_utils" />
	
	<!-- alias -->
	<target name="build" depends="compile_utils"/>
	<target name="build_openspcoop2_utils_jar" depends="compile_openspcoop2_utils"/>
	<target name="clean" depends="clean_utils"/>
	
	
	
	<!-- Creazione del modulo WAR per il test dei datasource -->
	<target name="warTestDS" depends="clean,build" description="Crea la struttura del modulo WAR per l'esempio del package datasource">
		<war destfile="${dist_utils}/ExampleDS.war" webxml="${src_utils}/org/openspcoop2/utils/datasource/test/web.xml">
			<classes dir="${src_utils}/org/openspcoop2/utils/datasource/test">
				<include name="*.properties"/>
			</classes>
			<lib dir="${dist_utils}">
				<include name="openspcoop2_utils_*.jar"/>
			</lib>
			<!--
			<lib dir="${required_lib}/cxf">
				<include name="*.jar"/>
			</lib>
			<lib dir="${required_lib}/saaj">
				<include name="*.jar"/>
			</lib>
			-->
		</war>
	</target>
	
	<!-- Creazione del modulo WAR per il test della cache -->
	<target name="warTestCache" depends="clean,build" description="Crea la struttura del modulo WAR per l'esempio del package cache">
		<war destfile="${dist_utils}/ExampleCache.war" webxml="${src_utils}/org/openspcoop2/utils/cache/test/web.xml">
			<classes dir="${src_utils}/org/openspcoop2/utils/cache/test">
				<include name="*.ccf"/>
			</classes>
			<lib dir="${dist_utils}">
				<include name="openspcoop2_utils_*.jar"/>
			</lib>
			<lib dir="${required_lib}/shared">
				<include name="commons-jcs3-core-3.1-gov4j-2.jar"/>
				<include name="com.springsource.edu.oswego.cs.dl.util.concurrent-1.3.4.jar"/>
			</lib>
		</war>
	</target>
	
	
	<!-- Test -->
	<path id="classpath_run_dist" >
		<fileset dir="${dist_utils}" >
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${ext_lib}" >
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${required_lib}/commons">
			<include name="commons-codec-1.15.jar"/>
		</fileset>
		<fileset dir="${required_lib}/log" >
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${required_lib}/shared" >
			<include name="joda-time-2.12.0.jar"/>
		</fileset>
	</path>
	<path id="classpath_run_openapi_dist" >
		<fileset dir="${required_lib}/jackson" >
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${required_lib}/json" >
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${required_lib}/swagger" >
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${required_lib}/shared">
			<include name="snakeyaml-1.33-gov4j-1.jar"/>
		</fileset>
		<fileset dir="${required_lib}/commons">
			<include name="commons-lang3-3.12.0.jar"/>
		</fileset>
	</path>	
		
	<target name="runKeyGeneratorTest">
		<if>
			<equals arg1="${tipoDatabase}" arg2="$${tipoDatabase}"/>
			<then>
				<fail message="Parametro tipoDatabase non fornito"/>
			</then>
		</if>
		<!-- Run the java code  -->
		<java classname="org.openspcoop2.utils.jdbc.TestKeyGenerator" fork="true">
		        <arg value="${tipoDatabase}" />
			<arg value="${url}" /> <!-- opzionale -->
			<arg value="${username}" /> <!-- opzionale -->
			<arg value="${password}" /> <!-- opzionale -->
		        <arg value="${driverJdbc}" /> <!-- opzionale -->
			<classpath>
		        	<path refid="classpath_run_dist" />
		        </classpath>
		</java>
	</target>
	
	<target name="runJDBCAdapterTest">
		<if>
			<equals arg1="${tipoDatabase}" arg2="$${tipoDatabase}"/>
			<then>
				<fail message="Parametro tipoDatabase non fornito"/>
			</then>
		</if>
		<!-- Run the java code  -->
		<java classname="org.openspcoop2.utils.jdbc.TestJDBCAdapter" fork="true">
		        <arg value="${tipoDatabase}" />
			<arg value="${url}" /> <!-- opzionale -->
			<arg value="${username}" /> <!-- opzionale -->
			<arg value="${password}" /> <!-- opzionale -->
		        <arg value="${driverJdbc}" /> <!-- opzionale -->
			<classpath>
				<path refid="classpath_run_dist" />
		        </classpath>
		</java>
	</target>
	
	<target name="runSQLQueryObjectTest">
		<if>
			<equals arg1="${tipoDatabase}" arg2="$${tipoDatabase}"/>
			<then>
				<fail message="Parametro tipoDatabase non fornito"/>
			</then>
		</if>
		<!-- Run the java code  -->
		<java classname="org.openspcoop2.utils.sql.ClientTest" fork="true">
		        <arg value="${tipoDatabase}" />
			<arg value="${url}" /> <!-- opzionale -->
			<arg value="${username}" /> <!-- opzionale -->
			<arg value="${password}" /> <!-- opzionale -->
		        <arg value="${driverJdbc}" /> <!-- opzionale -->
			<classpath>
		        		<path refid="classpath_run_dist" />
		        </classpath>
		</java>
	</target>

	<target name="runSondeTest">
		<if>
			<equals arg1="${tipoDatabase}" arg2="$${tipoDatabase}"/>
			<then>
				<fail message="Parametro tipoDatabase non fornito"/>
			</then>
		</if>
		<!-- Run the java code  -->
		<java classname="org.openspcoop2.utils.sonde.ClientTest" fork="true">
		        <arg value="${tipoDatabase}" />
			<arg value="${url}" /> <!-- opzionale -->
			<arg value="${username}" /> <!-- opzionale -->
			<arg value="${password}" /> <!-- opzionale -->
			<arg value="${driverJdbc}" /> <!-- opzionale -->
			<arg value="${sondaBatchName}" /> <!-- opzionale -->
			<arg value="${sondaCodaName}" /> <!-- opzionale -->
		        <classpath>
		        		<path refid="classpath_run_dist" />
		        </classpath>
		</java>
	</target>
	
	<target name="runIdSerialTest">
		<if>
			<equals arg1="${tipoDatabase}" arg2="$${tipoDatabase}"/>
			<then>
				<fail message="Parametro tipoDatabase non fornito"/>
			</then>
		</if>
		<!-- Run the java code  -->
		<java classname="org.openspcoop2.utils.id.serial.ClientTest" fork="true">
		        <arg value="${tipoDatabase}" />
			<arg value="${url}" /> <!-- opzionale -->
			<arg value="${username}" /> <!-- opzionale -->
			<arg value="${password}" /> <!-- opzionale -->
			<arg value="${driverJdbc}" /> <!-- opzionale -->
			<arg value="${threads}" /> <!-- opzionale -->
			<arg value="${idsForThread}" /> <!-- opzionale -->
			<arg value="${printDebug}" /> <!-- opzionale -->
			<arg value="${timeWaitMs}" /> <!-- opzionale -->
			<arg value="${sizeBuffer}" /> <!-- opzionale -->
		        <classpath>
		        		<path refid="classpath_run_dist" />
		        </classpath>
		</java>
	</target>

	<target name="runSemaphoreTest">
		<if>
			<equals arg1="${tipoDatabase}" arg2="$${tipoDatabase}"/>
			<then>
				<fail message="Parametro tipoDatabase non fornito"/>
			</then>
		</if>
		<!-- Run the java code  -->
		<java classname="org.openspcoop2.utils.semaphore.ClientTest" fork="true">
		        <arg value="${tipoDatabase}" />
			<arg value="${url}" /> <!-- opzionale -->
			<arg value="${username}" /> <!-- opzionale -->
			<arg value="${password}" /> <!-- opzionale -->
			<arg value="${driverJdbc}" /> <!-- opzionale -->
			<arg value="${testIdle}" /> <!-- opzionale -->
			<arg value="${threads}" /> <!-- opzionale -->
			<arg value="${lockForThread}" /> <!-- opzionale -->
			<arg value="${printDebug}" /> <!-- opzionale -->
			<arg value="${timeWaitMs}" /> <!-- opzionale -->
		        <classpath>
		        		<path refid="classpath_run_dist" />
		        </classpath>
		</java>
	</target>

	<target name="runUniqueInterfaceGeneratorOpenAPI">
		<if>
			<equals arg1="${versioneOpenAPI}" arg2="$${versioneOpenAPI}"/>
			<then>
				<fail message="Parametro versioneOpenAPI non fornito"/>
			</then>
		</if>
		<if>
			<not>
				<or>
					<equals arg1="${versioneOpenAPI}" arg2="SWAGGER_2"/>
					<equals arg1="${versioneOpenAPI}" arg2="OPEN_API_3"/>
				</or>
			</not>
			<then>
				<fail message="Parametro versioneOpenAPI non valido, valori supportati: SWAGGER_2, OPEN_API_3"/>
			</then>
		</if>
		<if>
			<equals arg1="${destFile}" arg2="$${destFile}"/>
			<then>
				<fail message="Parametro destFile non fornito"/>
			</then>
		</if>
		<if>
			<equals arg1="${master}" arg2="$${master}"/>
			<then>
				<fail message="Parametro master non fornito"/>
			</then>
		</if>
		<if>
			<equals arg1="${attachmentsDir}" arg2="$${attachmentsDir}"/>
			<then>
				<fail message="Parametro attachmentsDir non fornito"/>
			</then>
		</if>
		<!-- Run the java code  -->
		<java classname="org.openspcoop2.utils.openapi.UniqueInterfaceGenerator" fork="true">
	        	<arg value="${versioneOpenAPI}" />
			<arg value="${destFile}" />
			<arg value="${master}" />
			<arg value="${attachmentsDir}" /> 
		        <classpath>
	        		<path refid="classpath_run_dist" />
				<path refid="classpath_run_openapi_dist" />
		        </classpath>
		</java>
	</target>
	
</project>
