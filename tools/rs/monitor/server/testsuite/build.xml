<project name="GovWayMonitorApiRSTestSuite">

	<description>
        	File di Script per la compilazione dell'interfaccia api rs per il Monitoraggio
    	</description>

	<import file="./local_env.xml" />

    <!-- estensione di ant (if .... ) -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${required_lib}/ant/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <path id="ant.classpath">
        <pathelement location="${required_lib}/ant/ant-junit.jar"/>
    </path>

    <path id="karate_testsuite">
        <fileset dir="${required_lib}/testsuite">
            <include name="hamcrest-core-1.3.jar"/>
            <include name="picocli-4.2.0.jar"/>
            <include name="logback-*.jar"/>
            <include name="spring-jdbc-*.jar"/>
            <include name="thymeleaf-*.jar"/>
            <include name="attoparser-*.jar"/>
            <include name="unbescape-*.jar"/>
            <include name="junit-jupiter-5.9.3.jar"/>
            <include name="junit-jupiter-engine-*.jar"/>
            <include name="junit-platform-engine-*.jar"/>
            <include name="junit-platform-launcher-*.jar"/>
            <include name="junit-platform-console-*.jar"/>
            <include name="junit-platform-reporting-*.jar"/>
            <include name="junit-platform-commons*.jar"/>
            <include name="junit-jupiter-api*.jar"/>
            <!-- <include name="junit-4*.jar"/> -->
            <include name="junit-vintage-engine*.jar"/>
            <include name="karate-core-1.4.1.jar"/>
            <include name="karate-netty-*"/>
            <include name="karate-apache-1.4.1.jar"/>
            <include name="karate-junit5-1.4.1.jar"/>
            <include name="postgresql-*.jar"/>
            <include name="antlr4-runtime-*.jar"/>
            <include name="netty-transport-*.jar"/>
            <include name="netty-common-*.jar"/>
            <include name="micrometer-core-*.jar"/>
            <include name="micrometer-commons-*.jar"/>
            <include name="httpclient-*.jar"/>
            <include name="graal-sdk-*"/>
            <include name="truffle-api-*"/>
            <include name="httpcore-*.jar"/>
            <include name="reactive-streams-*.jar"/>
            <include name="netty-codec-http2-*.jar"/>
            <include name="netty-codec-*.jar"/>
            <include name="netty-transport-native-unix-common-*.jar"/>
            <include name="netty-handler-*.jar"/>
            <include name="netty-buffer-4.1.*.jar"/>
            <include name="armeria-*.jar"/>
            <include name="netty-codec-http-*.jar"/>
            <include name="apiguardian-api-*.jar"/>
            <include name="js-*"/>
            <include name="opentest4j-1.2.0.jar"/>
        </fileset>

        <fileset dir="${required_lib}/jackson">
            <include name="*.jar"/>
        </fileset>

        <fileset dir="${dir_jdbc}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${required_lib}/commons">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${required_lib}/httpcore">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${required_lib}/log">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${required_lib}/json">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${required_lib}/spring">
            <include name="*.jar"/>
        </fileset>

        <fileset dir="${required_lib}/shared">
            <include name="snakeyaml-2.1-gov4j-1.jar"/>
            <include name="joda-time-2.12.5.jar"/>
        </fileset>
        <fileset dir="${required_lib}/cxf">
            <include name="asm-9.6.jar"/>
        </fileset>
        <fileset dir="${openspcoop2.dist}">
            <include name="*.jar"/>
        </fileset>

        <!-- prese dal build di java17 -->
        <fileset dir="${required_lib}/swagger">
            <include name="classgraph-*.jar"/>
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="src_testsuite" location="src"/>
    <property name="build_testsuite" location="build"/>
    <property name="dist_testsuite" location="dist"/>

    <!-- Ripulisce la distribuzione -->
    <target name="clean">
        <delete dir="${build_testsuite}"/>
        <delete dir="log"/>
        <delete dir="target"/>
    </target>

    <target name="init">
        <mkdir dir="${build_testsuite}"/>
    </target>

    <!-- Compilazione del Client -->
    <target name="build" depends="clean,init" description="compila">
        <!-- Compile the java code  -->
        <javac includeantruntime="false" destdir="${build_testsuite}" debug="${debug}">
            <src path="${src_testsuite}"/>
            <classpath>
                <path refid="karate_testsuite"/>
            </classpath>
        </javac>
        <copy todir="${build_testsuite}">
            <fileset dir="${src_testsuite}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <jar jarfile="${dist_testsuite}/govway_modi_testsuite_handlers.jar">
            <zipfileset dir="${build_testsuite}">
                <include name="org/openspcoop2/core/protocolli/modipa/testsuite/handler/*"/>
            </zipfileset>
        </jar>
        <jar jarfile="${dist_testsuite}/govway_modi_testsuite_connettore_karate.jar">
            <zipfileset dir="${build_testsuite}">
                <include name="org/openspcoop2/core/protocolli/modipa/testsuite/connettori/*"/>
            </zipfileset>
        </jar>
    </target>

    <!-- Esecuzione dei test -->
    <var name="karateparams" value=""/>

    <target name="delete_config">
        <echo message="Eliminazione configurazione in corso..."/>
        <java classname="org.openspcoop2.core.protocolli.modipa.testsuite.ConfigLoader" fork="true">
            <arg value="false"/>
            <classpath>
                <path refid="karate_testsuite"/>
                <pathelement path="${build_testsuite}"/>
            </classpath>
        </java>
        <echo message="Eliminazione configurazione effettuata"/>
    </target>

    <target name="load_config">
        <echo message="Caricamento configurazione in corso (delete)..."/>
        <java classname="org.openspcoop2.core.protocolli.modipa.testsuite.ConfigLoader" fork="true">
            <arg value="false"/>
            <classpath>
                <path refid="karate_testsuite"/>
                <pathelement path="${build_testsuite}"/>
            </classpath>
        </java>
        <echo message="Caricamento configurazione in corso (create)..."/>
        <java classname="org.openspcoop2.core.protocolli.modipa.testsuite.ConfigLoader" fork="true">
            <arg value="true"/>
            <classpath>
                <path refid="karate_testsuite"/>
                <pathelement path="${build_testsuite}"/>
            </classpath>
        </java>
        <echo message="Caricamento configurazione completata"/>
    </target>

    <target name="run-tests">
        <if>
            <isset property="karate.options"/>
            <then>
                <if>
                    <isset property="test"/>
                    <then>
                        <antcall target="run-tests-with-options"/>
                    </then>
                </if>
            </then>
            <else>
                <if>
                    <isset property="test"/>
                    <then>
                        <antcall target="run-tests-with-class"/>
                    </then>
                    <else>
                        <antcall target="run-tests-without-options"/>
                    </else>
                </if>
            </else>
        </if>
    </target>

    <taskdef name="junitlauncher" classname="org.apache.tools.ant.taskdefs.optional.junitlauncher.confined.JUnitLauncherTask">
        <classpath>
            <pathelement location="${required_lib}/testsuite/ant-junitlauncher-1.10.12.jar"/>
        </classpath>
    </taskdef>

    <taskdef name="junitreport" classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator">
        <classpath refid="ant.classpath"/>
    </taskdef>

    <target name="run-tests-with-class">
        <property name="filtertrace" value="true"/>
        <mkdir dir="${output}/jreports"/>
        <junitlauncher>
            <classpath>
                <path refid="karate_testsuite"/>
                <pathelement path="${build_testsuite}"/>
                <pathelement path="${required_lib}"/>
            </classpath>
            <testclasses outputdir="${output}/jreports">
                <fileset dir="${build_testsuite}">
                    <include name="**/${test}.class"/>
                </fileset>
                <fork>
                    <jvmarg value="-Dnashorn.args=- -no-deprecation-warning"/>
                    <jvmarg value="-Djdk.module.illegalAccess=permit"/>
                </fork>
                <listener type="legacy-brief" sendSysErr="false" sendSysOut="false" useLegacyReportingName="false"/>
                <listener type="legacy-xml" sendSysErr="false" sendSysOut="false" useLegacyReportingName="false"/>
                <listener type="legacy-plain" sendSysErr="false" sendSysOut="false" useLegacyReportingName="false"/>
            </testclasses>
        </junitlauncher>
    </target>

    <target name="run-tests-with-options">
        <property name="filtertrace" value="true"/>
        <mkdir dir="${output}/jreports"/>
        <var name="karateparams" value="${karate.options}"/>
        <junitlauncher>
            <classpath>
                <path refid="karate_testsuite"/>
                <pathelement path="${build_testsuite}"/>
                <pathelement path="${required_lib}"/>
            </classpath>
            <testclasses outputdir="${output}/jreports">
                <fileset dir="${build_testsuite}">
                    <include name="**/${test}.class"/>
                </fileset>
                <fork>
                    <jvmarg value="-Dkarate.options=${karateparams}"/>
                    <jvmarg value="-Dnashorn.args=- -no-deprecation-warning"/>
                    <jvmarg value="-Djdk.module.illegalAccess=permit"/>
                </fork>
                <listener type="legacy-brief" sendSysErr="false" sendSysOut="false" useLegacyReportingName="false"/>
                <listener type="legacy-xml" sendSysErr="false" sendSysOut="false" useLegacyReportingName="false"/>
                <listener type="legacy-plain" sendSysErr="false" sendSysOut="false" useLegacyReportingName="false"/>
            </testclasses>
        </junitlauncher>
    </target>

    <target name="run-tests-without-options">
        <property name="filtertrace" value="true"/>
        <mkdir dir="${output}/jreports"/>
        <junitlauncher>
            <classpath>
                <path refid="karate_testsuite"/>
                <pathelement path="${build_testsuite}"/>
                <pathelement path="${required_lib}"/>
            </classpath>
            <testclasses outputdir="${output}/jreports">
                <fileset dir="${build_testsuite}">
                    <include name="**/*Test.class"/>
                                                            <include name="**/*Test*.class"/>
                </fileset>
                <fork>
                    <jvmarg value="-Dnashorn.args=- -no-deprecation-warning"/>
                    <jvmarg value="-Djdk.module.illegalAccess=permit"/>
                </fork>
                <listener type="legacy-brief" sendSysErr="false" sendSysOut="false" useLegacyReportingName="false"/>
                <listener type="legacy-xml" sendSysErr="false" sendSysOut="false" useLegacyReportingName="false"/>
                <listener type="legacy-plain" sendSysErr="false" sendSysOut="false" useLegacyReportingName="false"/>
            </testclasses>
        </junitlauncher>
    </target>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${required_lib}/ant/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <target name="process-file">
        <exec executable="./filter-reports.sh"/>
    </target>

    <!-- Task per generare il report HTML -->
    <target name="reports">
        <antcall target="process-file"/>
        <mkdir dir="${output}/html"/>
        <junitreport todir="${output}/html">
            <fileset dir="${output}/jreports">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${output}/html/"/>
        </junitreport>
    </target>

</project>

