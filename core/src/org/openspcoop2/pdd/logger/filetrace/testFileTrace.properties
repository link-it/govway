# Topic
topic.erogazioni=request,requestBody,response,responseBody
topic.fruizioni=request,requestBody,response,responseBody

# Topic personalizzazione
# sintassi: log.topic.<erogazioni/fruizioni>.<nomeTopic>.<nomePropriet‡>=<valorePropriet‡>
# Di seguito le propriet‡ utilizzabili:
# - requestSent (true/false): se abilitata il topic verr‡ invocato solamente se GovWay Ë riuscito a spedire la richiesta verso il backend
# - inRequestContentDefined (true/false): se abilitata il topic verr‡ invocato se la richiesta in ingresso possiede un payload http
# - outRequestContentDefined (true/false): se abilitata il topic verr‡ invocato se la richiesta in uscita possiede un payload http
# - inResponseContentDefined (true/false): se abilitata il topic verr‡ invocato se la risposta in ingresso possiede un payload http
# - inResponseContentDefined (true/false): se abilitata il topic verr‡ invocato se la risposta in uscita possiede un payload http

# I topic delle fruizioni devono essere invocati solamente se la richiesta Ë stata inoltrata al backend
topic.fruizioni.request.requestSent=true
topic.fruizioni.requestBody.requestSent=true
topic.fruizioni.response.requestSent=true
topic.fruizioni.responseBody.requestSent=true

# I topic delle richieste (body) devono essere invocati solamente se Ë presente un payload http 
topic.erogazioni.requestBody.inRequestContentDefined=true
topic.fruizioni.requestBody.outRequestContentDefined=true


# *** LOG4J ***

# Log4j2 Configuration File
log.config.file=/org/openspcoop2/pdd/logger/filetrace/testfileTrace.log4j2.properties

# trace/debug/info/warn/error
log.severity=info

# Category per ogni topic delle erogazioni
# sintassi: log.topic.erogazioni.<nomeTopic>=<categoryLog4j2>
category.topic.erogazioni.request=fileTrace.request
category.topic.erogazioni.requestBody=fileTrace.requestBody
category.topic.erogazioni.response=fileTrace.response
category.topic.erogazioni.responseBody=fileTrace.responseBody
# Category per ogni topic delle fruizioni
# sintassi: log.topic.fruizioni.<nomeTopic>=<categoryLog4j2>
category.topic.fruizioni.request=fileTrace.request
category.topic.fruizioni.requestBody=fileTrace.requestBody
category.topic.fruizioni.response=fileTrace.response
category.topic.fruizioni.responseBody=fileTrace.responseBody



# *** FORMAT ***

# Escape dei caratteri speciali
# sintassi: format.escape.<CHAR>=<CHAR_ESCAPED>
# Per indicare i caratteri '=' e '\' usare l'escape '\' nel properties. 
# Ad esempio per fare l'escape del carattere '=':
# format.escape.\==\\\=
format.escape."=\\"

# Formato degli headers
#format.headers.separator=,
#format.headers.header.prefix=
#format.headers.header.suffix=
#format.headers.header.separator=


# Propriet‡
# sintassi: format.property.<position>.<nomeProperty>=...
# Le propriet√† verranno risolte in ordine lessicografico di posizionamento; l'ordine Ë importante se si hanno propriet‡† che sono definite tramite altre propriet‡

# Informazioni comuni
format.property.000a.commons.server.ip=10.114.32.21
format.property.000b.commons.server.hostname=prova
format.property.000c.commons.server.port=8443
format.property.000d.commons.server.encoding=${log:javaProperty(file.encoding)}
format.property.000e.commons.user=${log:requestProperty(ProprietaTest)}

# Identificativo di transazione e applicativo
format.property.001a.commons.id="${log:transactionId}"|"${log:applicationId}"|"${log:javaProperty(javaProperty.1)}"|"${log:javaProperty(javaProperty.2)}"
format.property.001b.commons.id.body=${log:transactionId}.${log:applicationId(****)}

# Data composta da due campi: Request Timestamp (UTC) e Local Time zone (ISO8601)
format.property.002a.commons.dataRichiestaErogazione="${log:inRequestDateZ(yyyy-MM-dd HH:mm:ss:SSS,UTC)}"|"${log:inRequestDate(Z)}"
format.property.002b.commons.dataRispostaErogazione="${log:outResponseDateZ(yyyy-MM-dd HH:mm:ss:SSS,UTC)}"|"${log:outResponseDate(Z)}"
format.property.002c.commons.dataRichiestaFruizione="${log:outRequestDateZ(yyyy-MM-dd HH:mm:ss:SSS,UTC)}"|"${log:outRequestDate(Z)}"
format.property.002d.commons.dataRispostaFruizione="${log:inResponseDateZ(yyyy-MM-dd HH:mm:ss:SSS,UTC)}"|"${log:inResponseDate(Z)}"

# Data base64 ISO8601 Request Time
format.property.003a.commons.dataRichiestaErogazioneBase64=${logBase64:inRequestDate(yyyy-MM-dd'T'HH:mm:ss.SSSZ)}
format.property.003b.commons.dataRispostaErogazioneBase64=${logBase64:outResponseDate(yyyy-MM-dd'T'HH:mm:ss.SSSZ)}
format.property.003c.commons.dataRichiestaFruizioneBase64=${logBase64:outRequestDate(yyyy-MM-dd'T'HH:mm:ss.SSSZ)}
format.property.003d.commons.dataRispostaFruizioneBase64=${logBase64:inResponseDate(yyyy-MM-dd'T'HH:mm:ss.SSSZ)}

# Remote IP - Protocol - Method
format.property.004a.commons.remoteIP-protocol-method="${log:clientIP}"|"${log:forwardedIP}"|"HTTP/1.1"|"${log:httpMethod}"

# URL Invocazione
format.property.005a.commons.urlErogazione="https://${log:property(commons.server.hostname)}:${log:property(commons.server.port)}${log:inURL}"
format.property.005b.commons.urlFruizione="${log:outURL}"

# Status Code
format.property.006a.commons.httpStatusErogazione="${log:outHttpStatus}"
format.property.006b.commons.httpStatusFruizione="${log:inHttpStatus}"
# Intestazioni HTTP Status per il file body response
format.property.006c.commons.httpStatusErogazione.body=HTTP/1.1 ${log:outHttpStatus} ${log:outHttpReason}
format.property.006d.commons.httpStatusFruizione.body=HTTP/1.1 ${log:inHttpStatus} ${log:inHttpReason}

# Elapsed Time espressi in microsecondi
format.property.007a.commons.elapsedTimeErogazione="${log:elapsedTimeUs}"
format.property.007b.commons.elapsedTimeFruizione="${log:apiElapsedTimeUs}"


# Campi Custom 'Liberi'
format.property.100a.custom.govway=versione_api = ${log:apiVersion}; api = ${log:api}; operazione = ${log:action}; erogatore = ${log:provider}; soggetto_fruitore = ${log:sender}; applicativo_fruitore = ${log:application}; id_messaggio_richiesta = ${log:requestId}; id_messaggio_risposta = ${log:responseId}; id_collaborazione = ${log:correlationId}; esito = ${log:result};

# Campi Custom da utilizzare per il log degli header e per la registrazione del file body response
format.property.101a.custom.headers="X-GovWay-APP-SERVER=${log:property(commons.server.ip)}"|"X-GovWay-HOSTNAME-APP-SERVER=${log:property(commons.server.hostname)}"|"X-GovWay-SERVER-ENCODING=${log:property(commons.server.encoding)}"|"X-GovWay-APP-SERVER-PORT=${log:property(commons.server.port)}"|"X-GovWay-USER=${log:property(commons.user)}"|"X-GovWay-COMPLEX=${log:property(custom.govway)}"
format.property.101b.custom.headers.body=X-GovWay-APP-SERVER: ${log:property(commons.server.ip)}\nX-GovWay-HOSTNAME-APP-SERVER: ${log:property(commons.server.hostname)}\nX-GovWay-SERVER-ENCODING: ${log:property(commons.server.encoding)}\nX-GovWay-APP-SERVER-PORT: ${log:property(commons.server.port)}\nX-GovWay-USER: ${log:property(commons.user)}\nX-GovWay-COMPLEX: ${log:property(custom.govway)}

# Headers complessivi per il file body response
format.property.102a.headers.erogazioneBody=${log:property(commons.httpStatusErogazione.body)}\n${log:outResponseHeaders(\n,: ,,)}\n${log:property(custom.headers.body)}
format.property.102b.headers.fruizioneBody=${log:property(commons.httpStatusFruizione.body)}\n${log:inResponseHeaders(\n,: ,,)}\n${log:property(custom.headers.body)}

# mittente
format.property.200.commons.mittente="${log:credentials}"|"${log:principal}"|"${log:tokenIssuer}"|"${log:tokenSubject}"|"${log:tokenClientId}"|"${log:tokenUsername}"|"${log:tokenMail}"|"${log:tokenClaim(iss)}"|"${log:tokenClaim(exp)}"

# retrievedAccessToken
format.property.300.commons.retrievedTokenInfo="${log:retrievedAccessToken}"|"${log:retrievedTokenClaim(token_type)}"|"${log:retrievedTokenRequestTransactionId}"|"${log:retrievedTokenRequestGrantType}"|"${log:retrievedTokenRequestJwtClientAssertion}"|"${log:retrievedTokenRequestGrantType}"|"${log:retrievedTokenRequestClientId}"|"${log:retrievedTokenRequestClientToken}"|"${log:retrievedTokenRequestUsername}"|"${log:retrievedTokenRequestUrl}"

# Formato del log per ogni topic

# EROGAZIONI-RICHIESTA
format.topic.erogazioni.request="${log:inFunction}"|"${log:apiProtocol}"|"${log:role}"|"esempioCostanteRichiestaErogazione"|${log:property(commons.id)}|${log:property(commons.dataRichiestaErogazione)}|${log:property(commons.remoteIP-protocol-method)}|${log:property(commons.mittente)}|${log:property(commons.urlErogazione)}|"${log:inRequestContentType}"|"${log:inRequestSize}"|"HEADERS"|${log:inRequestHeaders(|,=,",")}|"${log:attribute(a1)}"|"${log:attribute(a2)}"|${log:property(commons.retrievedTokenInfo)}
format.topic.erogazioni.requestBody=${log:property(commons.id.body)}.${log:property(commons.dataRichiestaErogazioneBase64)}.${logBase64:inRequestContentType}.${logBase64:inRequestContent}

# EROGAZIONI-RISPOSTA
format.topic.erogazioni.response="esempioCostanteRispostaErogazione"|"${log:token}"|${log:property(commons.id)}|${log:property(commons.dataRispostaErogazione)}|${log:property(commons.remoteIP-protocol-method)}|${log:property(commons.urlErogazione)}|${log:property(commons.httpStatusErogazione)}|${log:property(commons.elapsedTimeErogazione)}|"${log:outResponseContentType}"|"${log:outResponseSize}"|"HEADERS"|${log:outResponseHeaders(|,=,",")}|${log:property(custom.headers)}
format.topic.erogazioni.responseBody=${log:property(commons.id.body)}.${log:property(commons.dataRispostaErogazioneBase64)}.${logBase64:property(headers.erogazioneBody)}.${logBase64:outResponseContent}

# FRUIZIONE-RICHIESTA
format.topic.fruizioni.request="${log:inFunction}"|"${log:apiProtocol}"|"${log:role}"|"esempioCostanteRichiestaFruizione"|${log:property(commons.id)}|${log:property(commons.dataRichiestaFruizione)}|${log:property(commons.remoteIP-protocol-method)}|${log:property(commons.mittente)}|${log:property(commons.urlFruizione)}|"${log:outRequestContentType}"|"${log:outRequestSize}"|"HEADERS"|${log:outRequestHeaders(|,=,",")}|"${log:attributeByAA(AA1,a1)}"|"${log:attributeByAA(AA2,a2)}"|${log:property(commons.retrievedTokenInfo)}
format.topic.fruizioni.requestBody=${log:property(commons.id.body)}.${log:property(commons.dataRichiestaFruizioneBase64)}.${logBase64:outRequestContentType}.${logBase64:outRequestContent}

# FRUIZIONE-RISPOSTA
format.topic.fruizioni.response="esempioCostanteRispostaFruizione"|"${log:token}"|${log:property(commons.id)}|${log:property(commons.dataRispostaFruizione)}|${log:property(commons.remoteIP-protocol-method)}|${log:property(commons.urlFruizione)}|${log:property(commons.httpStatusFruizione)}|${log:property(commons.elapsedTimeFruizione)}|"${log:inResponseContentType}"|"${log:inResponseSize}"|"HEADERS"|${log:inResponseHeaders(|,=,",")}|${log:property(custom.headers)}
format.topic.fruizioni.responseBody=${log:property(commons.id.body)}.${log:property(commons.dataRispostaFruizioneBase64)}.${logBase64:property(headers.fruizioneBody)}.${logBase64:inResponseContent}

