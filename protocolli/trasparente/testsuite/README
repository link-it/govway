TestSuite di OpenSPCoop2 per il protocollo Trasparente
location: protocolli/trasparente/testsuite



1. Overview

L'applicazione permette di testare le funzionalita' base di GovWay con il protocollo Trasparente

L'applicazione e' suddivisa in
- Servizio Applicativo govwayTestSuiteServer (server fornito con la testsuite base di OpenSPCoop2)
- Batteria di test (TestNG) che verificano le varie funzionalita'




1.1 Quick Start

Questo paragrafo illustra come utilizzare la testsuite su di una Porta di Dominio con configurazione e registro dei servizi in formato XML.
La porta di dominio deve essere configurata per tracciare le buste gestite sul database tracciamento (./core/deploy/sql/<tipo_database>/archiviComunicazioni/ArchivioTracce.sql) e i messaggi diagnostici gestiti sul database msg diagnostici (core/deploy/sql/<tipo_database>/archiviComunicazioni/ArchivioMessaggiDiagnostici.sql).
Deve essere attivata la registrazione delle tracce e dei msg diagnostici per mezzo degli 'OpenSPCoopAppender'.
Un esempio lo si puo' trovare in ./protocolli/trasparente/testsuite/deploy/config_file/configurazioneDefault.xml 


Installare l'applicazione govwayTestSuiteServer copiando il file testsuite/dist/govwayTestSuite.war nell'Application Server in JBOSS/server/default/deploy/
L'applicazione richiede l'installazione dei datasource
- org.govway.datasource: database di gestione dei messaggi della Porta di Dominio
- org.govway.datasource.tracciamento: database di tracciamento della Porta di Dominio

L'esecuzione dei test comporta una fase di pre-configurazione dove vengono installati in /etc/openspcoop le configurazioni necessarie per i test
Per configurare la porta con gli scenari di esempio utilizzare il comando:
  ant preparazioneAmbiente -DtipoDatabase=<tipo_database>
NOTA: per gli utenti Windows, cambiare il path di default della configurazione in ./protocolli/trasparente/testsuite/local_env.xml attraverso la proprieta': openspcoop_configuration_dir
NOTA: Per default vengono soscritti i file di configurazione XML della porta. Se si desidera' configurare una porta configurata tramite un registro dei servizi od una configurazione non XML, e' possibile agire nel file ./protocolli/trasparente/testsuite/local_env.xml, attraverso le proprieta' tipoConfigurazione e tipoRegistroServizi.
I parametri di resetConfigurazione/resetRegistroServizi indicano se deve essere effettuata prima della configurazione un reset.
I parametri proprietaConfigurazione/proprietaRegistroServizi indicano come la testsuite puo' collegarsi alla configurazione/registro 

Lanciare i test spostandosi in ./protocolli/trasparente/testsuite/ e lanciando il comando:
  ant run_test -Dgroup=FUNZIONALITADATESTARE

Ad esempio 'ant run_testsuite -Dgroup=PortaDelegata' verifica le funzionalita' di invocazione della Porta Delegata

L'elenco completo delle funzionalita' da testare sono descritte nel paragrafo 1.3




1.2 Servizio Applicativo govwayTestSuiteServer

Il servizio applicativo e' una servlet che fornisce i servizi funzionali ai test del protocollo Trasparente

L'applicazione necessita di accedere al database dei messaggi della porta di dominio ( org.govway.datasource ) e al database del tracciamento ( org.govway.datasource.tracciamento )
Le configurazioni di accesso ai dataSource possono essere indicati:
- versione sorgente, ./testsuite/deploy/properties/database.properties prima della compilazione
- versione binaria, file database.properties presente in govwayTestSuite.war/WEB-INF/classes

L'applicazione puo' essere configurata nei parametri di integrazione con la porta di dominio attraverso:
- versione sorgente, ./testsuite/deploy/properties/testsuite.properties prima della compilazione
- versione binaria, file testsuite.properties presente in govwayTestSuite.war/WEB-INF/classes

L'applicazione produce un file di log che registra le operazioni effettuate, in /var/govway/log/govway_testsuite.log. 
È possibile personalizzare la produzione dei log attraverso la modifica del file ./testsuite/deploy/properties/testsuite.log4j2.properties
prima della compilazione dei sorgenti o modificando il file all'interno dell'applicazione govwayTestSuite.war

Prerequisito:
La porta di dominio deve essere configurata in maniera che le tracce e i messaggi diagnostici vengano registrati su Database
Le tabelle tracciamento e messaggi diagnostici sono definiti in:
- ./core/deploy/sql/<tipo_database>/archiviComunicazioni/ArchivioTracce.sql
- ./core/deploy/sql/<tipo_database>/archiviComunicazioni/ArchivioMessaggiDiagnostici.sql
Deve essere attivata la registrazione delle tracce e dei msg diagnostici per mezzo degli 'OpenSPCoopAppender'.
Un esempio lo si puo' trovare in ./protocolli/trasparente/testsuite/deploy/config_file/configurazioneDefault.xml




1.3 Batteria di Test (TestNG)

Le batterie di test sono situate nella distribuzione in ./protocolli/trasparente/testsuite/

Le configurazioni dei test, comprendenti soggetti/servizi/porteDelegate/porteApplicative sono presenti in:
- protocolli/trasparente/testsuite/deploy/config_file/registroServizi.xml
- protocolli/trasparente/testsuite/deploy/config_file/configurazioneSoggetti.xml
Le configurazioni assumono che i vari soggetti dei test sia gestiti da un unica porta di dominio multisoggetto.
Inoltre la configurazione della Porta viene gestita da una delle seguenti configurazioni (a seconda del test lanciato):
- protocolli/trasparente/testsuite/configurazioneDefault.xml
- protocolli/trasparente/testsuite/configurazioneNewConnectionForResponse.xml: dove la porta e' configurata per far tornare le risposte su connessioni http nuove, e non sulla connection reply (a meno del profilo sincrono)

La configurazione della porta di dominio e del registro possono essere create (a meno di impostazione a 'none') dal task 'preparazioneAmbiente -DtipoDatabase=TIPODATABASE'.
Il task ant utilizza la configurazione indicata nel file local_env.xml:
CONFIGURAZIONE
  - <property name="tipoConfigurazione" value="xml" /> indica il tipo di configurazione da creare, xml, db o none.
  - <property name="proprietaConfigurazione" location="deploy/properties/configurazione.properties" /> contiene i parametri di accesso alla configurazione (per db)
  - <property name="gestioneSezioneConfigurazione" value="false" /> Indicazione se deve essere gestita la configurazione della Porta di Dominio (lasciare a false per db)
REGISTRO
  - <property name="tipoRegistroServizi" value="xml" /> indica il tipo di registro da creare, xml, web, uddi, db o none.
  - <property name="proprietaRegistroServizi" location="deploy/properties/registroServizi.properties" /> contiene i parametri di accesso al registro (per uddi,web o db)

Per lanciare i test e' possibile utilizzare in testsuite/test il comando:
  ant run_testsuite -Dgroup=FUNZIONALITADATESTARE

NOTA: 
Al termino di una batteria di test vieno verificato la consistenza dell'ambiente, attraverso i seguenti controlli:
- Controllo che le tabelle 'runtime' di OpenSPCoop non possiedano messaggi e/o buste in carico
- I messaggi diagnostici non contengano:
  . NullPointer message
  . @KEYWORD@ non risolte
  . messaggi senza un codice
  . messaggi che indicano un tracciamento non riuscito
- Controllo risorse JMX:
  . non siano rimaste connessioni al database allocate
  . non siano rimaste connessioni http attive verso PD e PA
  . non siano rimaste connessioni al broker jms
La batteria di verifica dell'ambiente può anche essere eseguita singolarmente usando come nome del gruppo 'RisorseEsterne' 
!! Requesito !! : si richiede che sia disponibile un accesso remoto sulle risorse jmx dell'application server (tomcat o jboss).
Eventuali indicazioni su come abilitare l'accesso remoto sono indicate in protocolli/trasparente/testsuite/deploy/jmx/README

Le batterie di test fornite permettono di testare diverse funzionalita' elencate di seguito.

Requisiti globali:
1) JMX protocolli/trasparente/testsuite/deploy/jmx/README
2) Configurazione PdD. La configurazione della PdD richiesta dai test deve essere attuata attraverso i seguenti step:
	2.a) Deve essere copiato il contenuto del file ./protocolli/trasparente/testsuite/src/govway_local.classRegistry.properties in /etc/govway
	2.b) Deve essere copiato il contenuto del file ./protocolli/trasparente/testsuite/src/govway_local.properties in /etc/govway
        2.c) Deve essere copiato il contenuto del file ./protocolli/trasparente/testsuite/src/testsuite_local.properties in /etc/govway
3) Impostare un tempo di rispedizione per la coda JMS 'toInoltroBuste' e 'toConsegnaContenutiApplicativi' a 15 secondi
   (<attribute name="RedeliveryDelay">15000</attribute>)

** Porta Delegata (SOAP) **

(NOTA1: Provarlo anche con Dump disabilitato: vi sono differenze!!)
(NOTA2: Provarlo anche con MultipartParsing abilitato + DumpBinarioBinarioAbilitato:soloSuFile)

Batterie di test che verificano la normale gestione del servizio Porta Delegata
- 'PortaDelegata':  vengono eseguiti tutti i test riguardanti la PortaDelegata
Altrimenti e' possibile lanciare per sottogruppi i test attraverso i seguenti gruppi:
- 'PortaDelegataNonAutenticato': viene verificato il profilo di collaborazione oneway e sincrono utilizzando messaggi SOAP 1.1 e 1.2 sia con che senza attachments. Vengono inoltre verificate sia la modalita' stateless che la modalita' stateful
- 'PortaDelegataAutenticato': vengono effettuate le stesse verifiche del gruppo 'PortaDelegataNonAutenticato', previa autenticazione/autorizzazione del servizio applicativo fruitore.
- 'PortaDelegataLocalForward': vengono effettuate le stesse verifiche del gruppo 'PortaDelegataNonAutenticato', con configurazione in local-forward.
- 'PortaDelegataFault200': vengono effettuate le stesse verifiche del gruppo 'PortaDelegataNonAutenticato', dove il servizio applicativo invocato restituisce un SOAPFault con codice di trasporto 200
- 'PortaDelegataFault500': vengono effettuate le stesse verifiche del gruppo 'PortaDelegataNonAutenticato', dove il servizio applicativo invocato restituisce un SOAPF
ault con codice di trasporto 500

** Porta Applicativa (SOAP) **

(NOTA1: Provarlo anche con Dump disabilitato: vi sono differenze!!)
(NOTA2: Provarlo anche con MultipartParsing abilitato + DumpBinarioBinarioAbilitato:soloSuFile)

Batterie di test che verificano la normale gestione del servizio Porta Delegata
- 'PortaApplicativa':  vengono eseguiti tutti i test riguardanti la PortaApplicativa
Altrimenti e' possibile lanciare per sottogruppi i test attraverso i seguenti gruppi:
- 'PortaApplicativaNonAutenticato': viene verificato il profilo di collaborazione oneway e sincrono utilizzando messaggi SOAP 1.1 e 1.2 sia con che senza attachments. Vengono inoltre verificate sia la modalita' stateless che la modalita' stateful
- 'PortaApplicativaAutenticato': vengono effettuate le stesse verifiche del gruppo 'PortaApplicativaNonAutenticato', previa autenticazione/autorizzazione del servizio applicativo fruitore.
- 'PortaApplicativaFault200': vengono effettuate le stesse verifiche del gruppo 'PortaApplicativaNonAutenticato', dove il servizio applicativo invocato restituisce un SOAPFault con codice di trasporto 200
- 'PortaApplicativaFault500': vengono effettuate le stesse verifiche del gruppo 'PortaApplicativaNonAutenticato', dove il servizio applicativo invocato restituisce un SOAPF
ault con codice di trasporto 500

** Porta Delegata e Applicativa (REST) **

!! Pre-requisito !!
a. Deve essere abilitato il TRACE METHOD http, altrimenti risulta '405 Not Allowed'
Per farlo su wildfly aggiungere l'attributo disallowed-methods valorizzato vuoto:
  <http-listener name="default" socket-binding="http" redirect-socket="https" disallowed-methods=""/>
Per farlo su tomcat aggiungere l'attributo allowTrace="true" nel'elemento Connector:
  <Connector port="8080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" allowTrace="true" />

(NOTA1: Provarlo anche con Dump disabilitato: vi sono differenze!!)
(NOTA2: Provarlo anche con MultipartParsing abilitato + DumpBinarioBinarioAbilitato:soloSuFile)

Batterie di test che verificano la normale gestione del servizio REST:
- 'REST.PD': vengono eseguiti tutti i test riguardanti la PortaDelegata
- 'REST.PA': vengono eseguiti tutti i test riguardanti la PortaApplicativa
Altrimenti e' possibile lanciare per sottogruppi i test attraverso i seguenti gruppi:
- 'REST.[PD/PA].DELETE': test che riguardano l'http method 'DELETE'
- 'REST.[PD/PA].GET': test che riguardano l'http method 'GET'
- 'REST.[PD/PA].HEAD': test che riguardano l'http method 'HEAD'
- 'REST.[PD/PA].POST': test che riguardano l'http method 'POST'
- 'REST.[PD/PA].PUT': test che riguardano l'http method 'PUT'
- 'REST.[PD/PA].TRACE': test che riguardano l'http method 'TRACE'
- 'REST.[PD/PA].OPTIONS': test che riguardano l'http method 'OPTIONS'
- 'REST.[PD/PA].PATCH': test che riguardano l'http method 'PATCH'
- 'REST.[PD/PA].METHOD_OVERRIDE': test che riguardano la verifica dell'inoltro dell'header http 'X-HTTP-Method-Override' durante una POST


** Integrazione **

Vengono verificate le richieste che contengono particolarità:
- ContentType con altri parametri
- ContentType strutturalmente errati

(NOTA1: Provarlo anche con Dump disabilitato: vi sono differenze!!)
(NOTA2: Provarlo anche con MultipartParsing abilitato + DumpBinarioBinarioAbilitato:soloSuFile)

Tutti i test sono avviabili con il gruppo 'Integrazione'.
In alternativa sono eseguibili singolarmente con i seguenti gruppi:
- RESTIntegrazionePortaDelegata
- RESTIntegrazionePortaApplicativa
- SOAPIntegrazionePortaDelegata
- SOAPIntegrazionePortaApplicativa


** Autenticazione e Autorizzazione **

!! Pre-requisiti!!
a. Aggiunta di connettori https specifici per i test nella configurazione web (in jboss in server.xml del tomcat integrato)
- Un connettore HTTPS che non esegue autenticazione client (La configurazione di default della testsuite, assume questo connettore attivo sulla porta 8445)
  Esempio in ./protocolli/trasparente/testsuite/deploy/https_examples/ConnettoreHTTPS_noClientAuth.xml
  La configurazione del connettore assume che il keystore ./protocolli/spcoop/testsuite/deploy/https_examples/jks/erogatore.jks sia stato copiato in /etc/govway/keys
- un connettore HTTPS che esegue autenticazione client (La configurazione di default della testsuite, assume questo connettore attivo sulla porta 8444)
  Esempio in ./protocolli/trasparente/testsuite/deploy/https_examples/ConnettoreHTTPS_withClientAuth.xml
  La configurazione del connettore assume che il keystore ./protocolli/spcoop/testsuite/deploy/https_examples/jks/erogatore.jks sia stato copiato in /etc/govway/keys
b. Installazione dei keystore in /etc/govway/keys
- ./protocolli/trasparente/testsuite/deploy/https_examples/jks/client1.jks
- ./protocolli/trasparente/testsuite/deploy/https_examples/jks/client2.jks
- ./protocolli/trasparente/testsuite/deploy/https_examples/jks/client3.jks
c. Configurazione della JVM dell'A.S. in modo che utilizzi il keystore ./protocolli/trasparente/testsuite/deploy/https_examples/jks/erogatore.jks
  Indicazioni descritte per JBoss in ./protocolli/trasparente/testsuite/deploy/https_examples/configurazioneTrustStoreJBOSS.txt
d. Configurare nuove utenze nel container per poter gestire l'autenticazione tramite principal.
   Seguire le indicazioni presenti in Esempio in ./protocolli/trasparente/testsuite/deploy/principal/README.txt

Batterie di test:
- 'AutenticazionePortaDelegata': verifica le funzionalità di autenticazione sulla PortaDelegata attraverso servizi SOAP
- 'AutenticazionePortaApplicativa': verifica le funzionalità di autenticazione sulla PortaApplicativa attraverso servizi SOAP
- 'AutorizzazionePortaDelegata': verifica le funzionalità di autorizzazione sulla PortaDelegata attraverso servizi SOAP
- 'AutorizzazionePortaApplicativa': verifica le funzionalità di autorizzazione sulla PortaApplicativa attraverso servizi SOAP
- 'RESTAutenticazionePortaDelegata': verifica i dettagli che non potevano essere verificati tramite servizi SOAP, come il forward degli header 'Authorization' o 'WWW-Authenticate' o il consumo dell'header in caso di autenticazione 'basic'.
- 'RESTAutenticazionePortaApplicativa': uguale al test precedente per la porta applicativa

NOTA!!! Da wildfly25 compreso in differenziare i test che richiedono l'application-security-domain 'other' da quelli che non lo richiedono con i seguenti comandi.
        Per far attivare l'autenticazione tramite container, da wildfly25 è necessario editare il file standalone-full.xml e attivare l'application-security-domain come segue. 
	Poichè però causa un 401 per le altre richieste con credenziali non valide, deve essere abilitato solamente per i test seguenti dove indicato che il security domain è necessario.

(Default) non richiesto:
Security domain richiesto:
       <subsystem xmlns="urn:jboss:domain:undertow:12.0" default-server="default-server" .....>
           ....
            <handlers>
                ....
            </handlers>
            <application-security-domains>
               <!-- <application-security-domain name="other" security-domain="ApplicationDomain"/> -->
            </application-security-domains>
        </subsystem>
- 'AutenticazionePortaDelegataNoPrincipal'
- 'AutenticazionePortaApplicativaNoPrincipal'
- 'AutorizzazionePortaDelegataNoPrincipal'
- 'AutorizzazionePortaApplicativaNoPrincipal'
- 'RESTAutenticazionePortaDelegataNoPrincipal'
- 'RESTAutenticazionePortaApplicativaNoPrincipal'

Security domain richiesto:
       <subsystem xmlns="urn:jboss:domain:undertow:12.0" default-server="default-server" .....>
           ....
            <handlers>
                ....
            </handlers>
            <application-security-domains>
               <application-security-domain name="other" security-domain="ApplicationDomain"/>
            </application-security-domains>
        </subsystem>
- 'AutenticazionePortaDelegataPrincipal'
- 'AutenticazionePortaApplicativaPrincipal'
- 'AutorizzazionePortaDelegataPrincipal'
- 'AutorizzazionePortaApplicativaPrincipal'
- 'RESTAutenticazionePortaDelegataPrincipal'
- 'RESTAutenticazionePortaApplicativaPrincipal'

** MTOM **

Prerequisito: 
copiare tutti gli xsd e wsdl presenti in ./protocolli/trasparente/example/server/MTOMExample/configurazionePdD/wsdl/ 
nella directory /etc/govway/mtom/

(NOTA1: Provarlo anche con Dump disabilitato: vi sono differenze!!)
(NOTA2: Provarlo anche con MultipartParsing abilitato + DumpBinarioBinarioAbilitato:soloSuFile)

Batterie di test che verificano la gestione di MTOM all'interno della PdD
- 'MTOMPortaDelegata':  vengono eseguiti tutti i test riguardanti la PortaDelegata
- 'MTOMPortaApplicativa':  vengono eseguiti tutti i test riguardanti la PortaApplicativa


** CORS **

Prerequisito:
Abilitazione degli header disabilitati per default nella classe HttpUrlConnection (sun.net.http.allowRestrictedHeaders=true)
Se non viene abilitata la proprietà di sistema, la gestione CORS via gateway trasparente non potrà funzionare poichè non vengono forwardati gli header 'Origin', 'Access-Control-Request-Headers' e 'Access-Control-Request-Method' tramite la classe HttpUrlConnection.
Impostare nelle proprietà java:
JAVA_OPTS="$JAVA_OPTS -Dsun.net.http.allowRestrictedHeaders=true"

Batterie di test che verificano la gestione del CORS all'interno della PdD
- 'CORSPortaApplicativa': vengono eseguiti tutti i test riguardanti la PortaApplicativa
- 'CORSPortaDelegata': vengono eseguiti tutti i test riguardanti la PortaDelegata


** ResponseCaching **

Batterie di test che verificano la gestione del response caching all'interno della PdD
- 'ResponseCachingPortaApplicativa': vengono eseguiti tutti i test riguardanti la PortaApplicativa
- 'ResponseCachingPortaDelegata': vengono eseguiti tutti i test riguardanti la PortaDelegata



** JOSE **

Prerequisito:

a. Installazione dei keystore in /etc/govway/keys
- ./protocolli/trasparente/testsuite/deploy/jose/jks/*

b. Installazione delle properties in /etc/govway/properties
- ./protocolli/trasparente/testsuite/deploy/jose/properties/*

c. Installazione del certificato 'JOSE.cer' e del JWKSet 'jose_truststore_example.jwks' in modo che sia esposto dal server sul contesto di root.
Ad esempio su wildfly:
cp ./protocolli/trasparente/testsuite/deploy/jose/cer/JOSE.cer wildfly-14.0.1.Final.TEST/welcome-content/
cp ./protocolli/trasparente/testsuite/deploy/jose/jks/jose_truststore_example.jwks wildfly-14.0.1.Final.TEST/welcome-content/

Batterie di test:
- 'JOSESignature': vengono verificate le funzionalità JWS in modalità compact e json, con payload encoding abilitato/disabilitato e detached della firma.
- 'JOSEEncrypt': vengono verificate le funzionalità JWE in modalità compact e json (con e senza deflate)




2. Installazione



2.1 Versione Sorgente

Per creare il servizio applicativo di test, eseguire in testsuite/ il comando 'ant build'.
Verra creato:
- govwayTestSuite.war
Copiare il file govwayTestSuite.war in JBOSS/server/default/deploy/
Inoltre copiare in govwayTestSuite.war/WEB-INF/lib il jar relativo al protocollo 'trasparente'.
Tale jar lo si puo' produrre eseguendo in protocolli/trasparente il comando 'ant build'.

Per creare i binari della batteria di test eseguire in protocolli/trasparente/testsuite il comando 'ant build'.



2.2 Versione Binaria

Copiare il file testsuite/govwayTestSuite.war in JBOSS/server/default/deploy/ ed installare in govwayTestSuite.war/WEB-INF/lib il jar relativo al protocollo 'trasparente' situato in protocolli/trasparente/dist/
