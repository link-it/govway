- Su application server wildfly realizzare quanto descritto in https://govway.org/documentazione/installazione/finalizzazione/wildflyUrlEncoded.html

  Per poter gestire correttamente richieste con Content-Type “application/x-www-form-urlencoded” su application server “WildFly”, 
  è richiesto di abilitare l’attributo “allow-non-standard-wrappers” nell’elemento “servlet-container” della configurazione di WildFly (es. in standalone/configuration/standalone.xml).

  <servlet-container name="default" allow-non-standard-wrappers="true">
        ...
  </servlet-container>

- Su application server wildfly realizzare quanto descritto in https://govway.org/documentazione/installazione/finalizzazione/rateLimiting/dimensioneMassimaMessaggi.html

  L’application server, per default, limita la dimensione del payload delle richieste a 10MB. Per poter modificare il livello di soglia bisogna agire sull’attributo “max-post-size” nell’elemento “http-listener” della configurazione di WildFly (es. in standalone/configuration/standalone.xml): indica il numero di bytes massimo che un payload può contenere per essere processato. Se non presente l’attributo assume il valore di default 10485760 (10MB). È anche possibile disabilitare il limite impostando l’attributo al valore “0”.

   <server name="default-server">
         <http-listener name="default" socket-binding="http" max-post-size="0" .../>
         ...
   </server>

- Su application server tomcat9 abilitare la gestione dei cookies tramite 'LegacyCookieProcessor'.
  Il processore di default 'Rfc6265CookieProcessor' non supporta il formato richiesto dai parametri OpenAPI dei cookie 'form/explode' e 'form/unexplode' (https://swagger.io/docs/specification/serialization/)
  Per farlo editare il file: /opt/apache-tomcat-9.xxx/conf/context.xml
  Impostando il processore come segue:

  <!-- The contents of this file will be loaded for each web application -->
  <Context>
     ...

    <CookieProcessor className="org.apache.tomcat.util.http.LegacyCookieProcessor" />
  </Context>

- Impostare a <15> il massimo numero di richieste simultanee generali nella console di govway sotto 
		
		Configurazione->Controllo del Traffico->Limitazione Numero di Richieste Complessive

- Editare il file <govway_local.properties> impostando le seguenti proprietà:

		# ====================================================
		#	Parametri per testsuite trasparente
		# Consentono di far passare i parametri url dal client al backend della erogazione
		org.openspcoop2.pdd.soap.urlParameters.forward.enable=true
		org.openspcoop2.pdd.soap.urlParameters.blackList.internal=*
		org.openspcoop2.pdd.soap.urlParameters.whiteList=fault*,returnCode,sleep,reply*,GovWay-TestSuite-*

- Abilitare la congestione del traffico impostando una soglia del 55% in modo
  che il sistema venga considerato congestionato con 8 richieste simultanee.
	
	Configurazione-Controllo del Traffico->Controllo della congestione
	
  Assicurarsi che la proprietà "soglia_congestione" in <testsuite.properties> abbia
  il valore impostato sopra


- Impostare nella console di GovWay:
		 Controllo Traffico->Tempi Risposta->Tempo MedioRisposta = 3000
	Sia per Erogazione che per Fruizione
	Questo per ridurre il tempo necessario ad entrare in situazione di degrado prestazionale


- Nella console Andare su Tracciamento->Superamento Limite Richieste e impostarlo su <abilitato>
	 Questo perchè di base govway non traccia le transazioni quando è stata superata la soglia globale.

- Impostare in govway_local.properties 
	org.openspcoop2.pdd.statistiche.generazione.baseOraria.timer.intervalloSecondi=8
	org.openspcoop2.pdd.statistiche.generazione.baseGiornaliera.timer.intervalloSecondi=8
	org.openspcoop2.pdd.statistiche.generazione.baseSettimanale.timer.intervalloSecondi=8
	org.openspcoop2.pdd.statistiche.generazione.baseMensile.timer.intervalloSecondi=8

	Questo per consentire di controllare in un tempo accettabile le metriche dipendenti da statistiche,
	in particolare quando si abilitano in presenza di degrado prestazionale. 

- Inoltre è necessario disabilitare la cache delle informazioni statistiche:
	Console -> Controllo del Traffico -> Configurazione Cache Controllo del Traffico -> Stato = Disabilitato

- Aggiungere nel govway_local.properties la seguente impostazione:

	org.openspcoop2.pdd.controlloTraffico.statistiche.finestraScorrevole.gestioneUltimoIntervallo=true

  Questo perchè di base govway controlla i tempi medi risposta sulla finestra di tempo precedente per evitare di bloccare il sistema quando
	una sola richiesta ha fatto superare il tempo medio risposta.

- Modificare le properties del config_loader in modo che vengano caricate le policy utente.
	Impostare in <.../distrib/properties/config_loader.cli.properties>

		policy.enable=true

- Per variare il ritardo con cui vengono scritti gli eventi sul database:
	In <govway_local.properties>:
		org.openspcoop2.pdd.eventi.timer.seconds=3
	In <testsuite.properties>:
		eventi_db_delay=3

- Copiare o linkare sotto /etc/govway/keys il keystore in:
	/protocolli/spcoop/testsuite/deploy/wss_examples/jks/pa.p12

	Serve per verificare il raggruppamento per token policy
	
- I test sui connettori richiedono che sull'host '127.0.2.2' nella porta '7777', se viene instaurata una connessione, questa viene lasciata sospesa in modo da causare un 'ConnectTimedOut'.
  Su sistema operativo 'Fedora', ad esempio, si puo' utilizzare il comando, in caso si abbia attivo il servizio 'iptables':
      	'iptables -A INPUT -p tcp -d 127.0.2.2 --dport 7777 -j DROP'
  o su fedora più recenti:
	'iptables -I INPUT 1 -p tcp -d 127.0.2.2 --destination-port 7777 -j DROP'
	
- HSM per TLS Keystore. Seguire le indicazioni descritte in PKCS11.README
  Poi 'cp tools/utils/src/org/openspcoop2/utils/certificate/test/govway_test_hsm.properties  /etc/govway/hsm.properties'

- Per i test sulle integrazione 'template' copiare i seguenti file in /etc/govway/
	- src/org/openspcoop2/core/protocolli/trasparente/testsuite/integrazione/template/IntegrazioneTemplateTrasformazione.ftl
	- src/org/openspcoop2/core/protocolli/trasparente/testsuite/integrazione/template/IntegrazioneTemplateTrasformazioneRisposta.ftl

- Per i test sulle trasformazioni di protocollo rest to soap e viceversa copiare la directory test_trasformazioni/ in /etc/govway

- Per i test sulle credenziali aggiungere in govway_local.properties la configurazione che si trova in 'src/org/openspcoop2/core/protocolli/trasparente/testsuite/autenticazione/gestore_credenziali/govway_local.properties.adjunct'.

- Configurare l'application server in modo tale da supportare connessioni ssl sulla porta 8444 e 8445 utilizzando le configurazioni presenti nella directory config_https:
  a) un connettore HTTPS che esegue autenticazione client (La configurazione di default della testsuite, assume questo connettore attivo sulla porta 8444)
        Esempio in config_https/ConnettoreHTTPS_withClientAuth.xml
        La configurazione del connettore assume che il keystore config_https/jks/erogatore.jks sia stato copiato in /etc/govway/keys
  b) un connettore HTTPS senza autenticazione client (La configurazione di default della testsuite, assume questo connettore attivo sulla porta 8445)
        Esempio in config_https/ConnettoreHTTPS_noClientAuth.xml
        La configurazione del connettore assume che il keystore config_https/jks/erogatore.jks sia stato copiato in /etc/govway/keys
  c) Configurazione della JVM dell'A.S. in modo che utilizzi il truststore config_https/jks/erogatore.jks
       Indicazioni descritte per JBoss in config_https/configurazioneTrustStoreJBOSS.txt

- Configurare nuove utenze nel container per poter gestire l'autenticazione tramite principal.
  Seguire le indicazioni presenti in Esempio in ./protocolli/trasparente/testsuite/deploy/principal/README.txt

- Impostare in <console_local.properties>:
	# Indicazione se nella Consegna Condizionale è possibile associare lo stesso filtro a differenti connettori (per test)
        connettoriMultipli.consegnaCondizionale.stessoFiltro=true
   In modo che la console consenta di assegnare più volte lo stesso filtro a connettori diversi in una consegna condizionale e rilevare l'errore a runtime durante una richiesta.

- Impostare in <console_local.properties>:
	# Gestore Policy
	controlloTraffico.policyRateLimiting.tipiGestori=LOCAL,LOCAL_DIVIDED_BY_NODES,HAZELCAST,HAZELCAST_NEAR_CACHE,HAZELCAST_NEAR_CACHE_UNSAFE_SYNC_MAP,HAZELCAST_NEAR_CACHE_UNSAFE_ASYNC_MAP,HAZELCAST_LOCAL_CACHE,DATABASE
   In modo che la console consenta di impostare il gestore 'DATABASE'

- Impostare in govway_local.properties la seguente proprietà per poter effettuare il test sul claim iat
	
	org.openspcoop2.pdd.gestioneToken.iat=120

- Impostare in govway_local.properties se seguenti proprietà richieste da vari test (tra cui i connettori asincroni)

	# Identificativo univoco della macchina, indicare IDGW come identificativo:
	org.openspcoop2.pdd.cluster_id=IDGW

	# Abilitazione metodi jmx
        org.openspcoop2.pdd.check.readJMXResources.enabled=true
        org.openspcoop2.pdd.check.readJMXResources.username=admin
        org.openspcoop2.pdd.check.readJMXResources.password=admin

- Impostare in govway_local.properties le seguenti proprietà richieste dai test sui connettori asincroni

	# opzione valida solamente per tipologia 'soap', consente il passaggio di statusCode diversi da 202 e 200
	org.openspcoop2.pdd.connettori.inoltroBuste.returnCode.2xx.acceptOnly_202_200=false
	org.openspcoop2.pdd.connettori.consegnaContenutiApplicativi.returnCode.2xx.acceptOnly_202_200=false

	# prefigge l'id messaggio con la data
	org.openspcoop2.pdd.integrationManager.idWithDate=true

	# ogni quanti secondi verifica se ci sono NUOVI messaggi da consegnare più vecchi di X secondi (proprietà successiva)
	org.openspcoop2.pdd.timer.consegnaContenutiApplicativi.coda.DEFAULT.nextMessages.intervalloControllo=5
	# età minima, in secondi, in cui vengono considerati i nuovi messaggi
	org.openspcoop2.pdd.timer.consegnaContenutiApplicativi.coda.DEFAULT.nextMessages.scheduleNewMessageAfter=6
	# ogni quanti secondi verifica se ci sono messaggi precedentemente falliti in consegna
	org.openspcoop2.pdd.timer.consegnaContenutiApplicativi.coda.DEFAULT.nextMessages.consegnaFallita.intervalloControllo=2
	# i secondi minimi in cui riconsegnare un messaggio fallito
	org.openspcoop2.pdd.timer.consegnaContenutiApplicativi.coda.DEFAULT.consegnaFallita.intervalloMinimoRiconsegna=2
	org.openspcoop2.pdd.timer.consegnaContenutiApplicativi.coda.DEFAULT.debug=true

- Per modificare i tempi e il numero di operazioni effettuate per i connettori multipli agire sul <testsuite.properties>:

	Le opzioni seguenti consentono di tonificare i test sul load balancer:

	# Quanti millisecondi tenere bloccato un connettore durante i test di least_connections
	connettori.load_balancer.least_connections.durata_bloccante=1000
	# Millisecondi necessari a tenere bloccato un connettore dall'inizio alla fine dei test di least_connections
	connettori.load_balancer.least_connections.durata_bloccante_lunga=4000
	# Attesa tra una richiesta e l'altra per attendere che venga contata e presa in carico dalla strategia least_connections
	connettori.load_balancer.least_connections.delay_richieste_background=300
	# Numero di richieste da eseguire nei test che verificano le strategie random
	# Per far si che venga generata una distribuzione casuale accettabile dei connettori scelti dalle politiche casuali
	connettori.load_balancer.numero_richieste_random=500
	# Numero di secondi per cui un id sessione viene legato ad uno specifico connettore nella sessione sticky
	connettori.load_balancer.sessione_sticky.max_age=4
	# Numero di secondi per cui un connettore viene escluso dal pool dal momento in cui genera un errore di connessione
	connettori.load_balancer.health_check.intervallo_esclusione=4

	Le opzioni seguenti consentono di tonificare i test sulle consegne asincrone:

	NOTA: per quanto concerne i 4 parametri seguenti devono corrispondere ai valori omonimi indicati in org.openspcoop2.pdd.timer.consegnaContenutiApplicativi.coda.DEFAULT.* nel file govway_local.properties
	connettori.consegna_multipla.next_messages.intervallo_controllo=5
	connettori.consegna_multipla.next_messages.schedule_new_after=6
	connettori.consegna_multipla.next_messages.consegna_fallita.intervallo_controllo=2
	connettori.consegna_multipla.next_messages.consegna_fallita.intervallo_minimo_riconsegna=2

- Creare la cartella /tmp/govway-testsuite dove l'application server deve avere i permessi di scrittura


Per eseguire i test:
	ant run_test

	Parametri:
		-Dload=false (default: true) Carica la configurazione di govway all'inizio del test	
		-Ddelete=false (default: true) Elimina la configurazione di govway alla fine del test
		-Dwait=false (default:true) Non aspetta lo scoccare della nuova finestra di tempo nei test di rate limiting

Per eseguire solo una classe, indicare il package e il metodo:

    ant run_test -Dpackage=rate_limiting.numero_richieste -Dtest=SoapTest

Per eseguire solo un metodo, indicare il nome del metodo e il sottopackage+classe

	ant run_test -Dmethods=richiesteSimultaneeGlobali -Dtest=rate_limiting.numero_richieste.SoapTest 


Di seguito vengono descritti i test del package 'rate_limiting':

- 'congestione', verifica policy che usano l'applicabilità con degrado prestazionale e/o congestione (invocarli separati tra rest e soap per non incorrere in errori di sincronizzazione temporale). Verifica anche gli eventi:
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.congestione -Dtest=RestTest
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.congestione -Dtest=SoapTest

- 'custom policy', verifica policy che usano intervalli statistici (invocarli separati tra rest e soap per non incorrere in errori di sincronizzazione temporale):
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.custom_policy -Dtest=RestTest
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.custom_policy -Dtest=SoapTest

- 'global_policy', verifica policy definite a livello globale
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.global_policy

- 'numero_richieste', verifica policy definite con metriche basate sul numero di richieste simultanee e in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.numero_richieste

- 'numero_richieste_fallite', verifica policy definite con metriche basate sul numero di richieste fallite in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.numero_richieste_fallite

- 'numero_richieste_fallite_o_fault', verifica policy definite con metriche basate sul numero di richieste fallite o fault in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.numero_richieste_fallite_o_fault

- 'numero_richieste_fault', verifica policy definite con metriche basate sul numero di fault in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.numero_richieste_fault

- 'numero_richieste_completate_con_successo', verifica policy definite con metriche basate sul numero di richieste completate con successo in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.numero_richieste_completate_con_successo

- 'dimensione_messaggi', verifica policy definite con metriche basate sulla dimensione massima delle richieste e delle risposte
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.dimensione_messaggi -Dtest=RestTest
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.dimensione_messaggi -Dtest=SoapTest

- 'occupazione_banda', verifica policy definite con metriche basate sull'occupazine di banda in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.occupazione_banda

- 'tempo_complessivo_risposta', verifica policy definite con metriche basate sul tempo complessivo di risposta in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.tempo_complessivo_risposta

- 'tempo_medio_risposta', verifica policy definite con metriche basate sul tempo medio di risposta in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.tempo_medio_risposta

- 'filtri', verifica policy definite con filtri
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.filtri

- 'raggruppamento', verifica policy definite con raggruppamento dei contatori
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.raggruppamento

- 'flusso', verifica policy definite rispetto ad un ordinamento di applicabilità
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.flusso

- 'warning_only', verifica policy definite con stato warning_only (verifica anche gli eventi)
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.warning_only                                         


Di seguito vengono descritti i test del package 'validazione':

- 'parametri', verifica la serializzazione descritta in 'https://swagger.io/docs/specification/serialization/' oltre alla verifica che sia header che parametri possono esistere molteplici volte nella richiesta e nella risposta.
   ant run_test -Ddelete=false -Dload=false -Dpackage=validazione.parametri  

- 'multipart', verifica la funzionalità descritta in 'https://swagger.io/docs/specification/describing-request-body/multipart-requests/' e 'https://swagger.io/docs/specification/describing-request-body/file-upload/'.
  ant run_test -Ddelete=false -Dload=false -Dpackage=validazione.multipart   

Di seguito vengono descritti i test del package 'trasformazione':

- 'form', verifica la trasformazione utilizzata per riconoscere casi di errori generati durante la certificazione di uno SPIDProvider 
  ant run_test -Ddelete=false -Dload=false -Dpackage=trasformazione.form

- 'soap_action', verifica la trasformazione utilizzata per adeguare la soapAction su messaggi soap
  ant run_test -Ddelete=false -Dload=false -Dpackage=trasformazione.soap_action

- 'protocollo', verifica la trasformazione utilizzata per effettuare trasformazioni di protocollo rest->soap e viceversa
  ant run_test -Ddelete=false -Dload=false -Dpackage=trasformazione.protocollo

Di seguito vengono descritti i test del package 'registrazione_messaggi':

- 'dump_binario', verifica la registrazione dei messaggi in modalità 'binaria'
   ant run_test -Ddelete=false -Dload=false -Dpackage=registrazione_messaggi.dump_binario

- 'dump_normale', verifica la registrazione dei messaggi in modalità 'normale'. Si tratta della vecchia modalità in cui era il gateway ad analizzare in realtime la struttura multipart.
   ant run_test -Ddelete=false -Dload=false -Dpackage=registrazione_messaggi.dump_normale

Di seguito vengono descritti i test del package 'connettori':

- 'timeout', verifica i timeout di connessione e lettura dei messaggi di richiesta e risposta
   ant run_test -Ddelete=false -Dload=false -Dpackage=connettori.timeout

- 'errori', verifica che, su API SOAP, eventuali risposte di errore senza un payload o con un payload html vengano gestite correttamente. 
   Vengono inoltre verificate risposte contenenti Content-Type non validi.
   ant run_test -Ddelete=false -Dload=false -Dpackage=connettori.errori

- 'applicativo_server', verifica il funzionamento degli applicativi di tipo server 
   ant run_test -Ddelete=false -Dload=false -Dpackage=connettori.applicativo_server

- 'redirect', verifica il funzionamento delle funzionalità di follow redirect e renaming dell'header Location 
   ant run_test -Ddelete=false -Dload=false -Dpackage=connettori.redirect

- 'consegna_condizionale', verifica la funzionalità dei connettori multipli con tipo 'Consegna Condizionale'
   ant run_test -Ddelete=false -Dload=false -Dpackage=connettori.consegna_condizionale

- 'load_balancer', verifica la funzionalità dei connettori multipli con tipo 'Load Balancer'
   ant run_test -Ddelete=false -Dload=false -Dpackage=connettori.load_balancer

- 'consegna_multipla', verifica la funzionalità dei connettori multipli con tipo 'Consegna Multipla'
   ant run_test -Ddelete=false -Dload=false -Dpackage=connettori.consegna_multipla

- 'consegna_con_notifiche', verifica la funzionalità dei connettori multipli con tipo 'Consegna con Notifiche'
   ant run_test -Ddelete=false -Dload=false -Dpackage=connettori.consegna_con_notifiche

Di seguito vengono descritti i test del package 'token':

- 'attribute_authority', verifica l'interazione con le AttributeAuthority
   ant run_test -Ddelete=false -Dload=false -Dpackage=token.attribute_authority

- 'negoziazione', verifica le funzionalità di negoziazione dei token con un AttributeAuthority
   ant run_test -Ddelete=false -Dload=false -Dpackage=token.negoziazione

- 'validazione', verifica le funzionalità di validazione di un access token
   ant run_test -Ddelete=false -Dload=false -Dpackage=token.validazione

Di seguito vengono descritti i test del package 'encoding':

- 'charset', verifica le comunicazioni in stream, con dump, la costruzione di oggetti in memoria read only e per trasformazioni, con charset UTF-8, UTF-16 e ISO-8859-1
   ant run_test -Ddelete=false -Dload=false -Dpackage=encoding.charset

- 'entity_reference', verifica le comunicazioni in stream, con dump, e la costruzioni di header con richieste consistenti di xml entity reference (2MB) 
   che se trattate come contenuto SAAJ fanno salire il carico per il lavoro richiesto al GC (G1 Humongous Allocation).
   ant run_test -Ddelete=false -Dload=false -Dpackage=encoding.entity_reference

Di seguito vengono descritti i test del package 'integrazione':

- 'autenticazione', verifica  l'integrazione 'autenticazione' che consente di generare Header HTTP utilizzabili dal backend per autenticare l'API Gateway.
   ant run_test -Ddelete=false -Dload=false -Dpackage=integrazione.autenticazione

- 'template', verifica  l'integrazione 'template' che consente di applicare una trasformazione al messaggio.
   ant run_test -Ddelete=false -Dload=false -Dpackage=integrazione.template

Di seguito vengono descritti i test del package 'autenticazione':

- 'gestore_credenziali', verifica la gestione di credenziali inoltrate da un frontend che si occupa del processo di autenticazione tramite header HTTP.
   ant run_test -Ddelete=false -Dload=false -Dpackage=autenticazione.gestore_credenziali

- 'gestore_credenziali_principal', si tratta di un test simile a quelli effettuati nel gruppo precedente, dove però il frontend web viene autenticato tramite container principal.
   NOTA: su wildfly25 o superiore è necessario abilitare il l'application-security-domain 'other' prima di eseguire il test
   ant run_test -Ddelete=false -Dload=false -Dpackage=autenticazione.gestore_credenziali_principal

Di seguito vengono descritti i test del package 'pkcs11':

Per questi test dopo aver caricare la configurazione con 
	ant load_config
eseguire lo script in pkcs11
	bash updateCertificatiConfigurazione.sh <NOME_SOGGETTO>

- 'x509', verifica l'utilizzo di chiavi private e certificati presenti in HSM
   ant run_test -Ddelete=false -Dload=false -Dpackage=pkcs11.x509
