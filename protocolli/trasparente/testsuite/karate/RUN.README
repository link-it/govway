- Su application server wildfly realizzare quanto descritto in https://govway.org/documentazione/installazione/finalizzazione/wildflyUrlEncoded.html

  Per poter gestire correttamente richieste con Content-Type “application/x-www-form-urlencoded” su application server “WildFly”, 
  è richiesto di abilitare l’attributo “allow-non-standard-wrappers” nell’elemento “servlet-container” della configurazione di WildFly (es. in standalone/configuration/standalone.xml).

  <servlet-container name="default" allow-non-standard-wrappers="true">
        ...
  </servlet-container>

- Su application server wildfly realizzare quanto descritto in https://govway.org/documentazione/installazione/finalizzazione/rateLimiting/dimensioneMassimaMessaggi.html

  L’application server, per default, limita la dimensione del payload delle richieste a 10MB. Per poter modificare il livello di soglia bisogna agire sull’attributo “max-post-size” nell’elemento “http-listener” della configurazione di WildFly (es. in standalone/configuration/standalone.xml): indica il numero di bytes massimo che un payload può contenere per essere processato. Se non presente l’attributo assume il valore di default 10485760 (10MB). È anche possibile disabilitare il limite impostando l’attributo al valore “0”.

   <server name="default-server">
         <http-listener name="default" socket-binding="http" max-post-size="0" .../>
         ...
   </server>

- Su application server tomcat9 abilitare la gestione dei cookies tramite 'LegacyCookieProcessor'.
  Il processore di default 'Rfc6265CookieProcessor' non supporta il formato richiesto dai parametri OpenAPI dei cookie 'form/explode' e 'form/unexplode' (https://swagger.io/docs/specification/serialization/)
  Per farlo editare il file: /opt/apache-tomcat-9.xxx/conf/context.xml
  Impostando il processore come segue:

  <!-- The contents of this file will be loaded for each web application -->
  <Context>
     ...

    <CookieProcessor className="org.apache.tomcat.util.http.LegacyCookieProcessor" />
  </Context>

- Impostare a <15> il massimo numero di richieste simultanee generali nella console di govway sotto 
		
		Configurazione->Controllo del Traffico->Limitazione Numero di Richieste Complessive

- Editare il file <govway_local.properties> impostando le seguenti proprietà:

		# ====================================================
		#	Parametri per testsuite trasparente
		# Consentono di far passare i parametri url dal client al backend della erogazione
		org.openspcoop2.pdd.soap.urlParameters.forward.enable=true
		org.openspcoop2.pdd.soap.urlParameters.blackList.internal=*
		org.openspcoop2.pdd.soap.urlParameters.whiteList=fault*,returnCode,sleep

- Abilitare la congestione del traffico impostando una soglia del 55% in modo
  che il sistema venga considerato congestionato con 8 richieste simultanee.
	
	Configurazione-Controllo del Traffico->Controllo della congestione
	
  Assicurarsi che la proprietà "soglia_congestione" in <testsuite.properties> abbia
  il valore impostato sopra


- Impostare nella console di GovWay:
		 Controllo Traffico->Tempi Risposta->Tempo MedioRisposta = 3000
	Sia per Erogazione che per Fruizione
	Questo per ridurre il tempo necessario ad entrare in situazione di degrado prestazionale


- Nella console Andare su Tracciamento->Superamento Limite Richieste e impostarlo su <abilitato>
	 Questo perchè di base govway non traccia le transazioni quando è stata superata la soglia globale.

- Impostare in govway_local.properties 
	org.openspcoop2.pdd.statistiche.generazione.baseOraria.timer.intervalloSecondi=8
	org.openspcoop2.pdd.statistiche.generazione.baseGiornaliera.timer.intervalloSecondi=8
	org.openspcoop2.pdd.statistiche.generazione.baseSettimanale.timer.intervalloSecondi=8
	org.openspcoop2.pdd.statistiche.generazione.baseMensile.timer.intervalloSecondi=8


	
	Questo per consentire di controllare in un tempo accettabile le metriche dipendenti da statistiche,
	in particolare quando si abilitano in presenza di degrado prestazionale. 

- Inoltre è necessario disabilitare la cache delle informazioni statistiche:
	Console -> Controllo del Traffico -> Configurazione Cache Controllo del Traffico -> Stato = Disabilitato

- Aggiungere nel govway_local.properties la seguente impostazione:

	org.openspcoop2.pdd.controlloTraffico.statistiche.finestraScorrevole.gestioneUltimoIntervallo=true

  Questo perchè di base govway controlla i tempi medi risposta sulla finestra di tempo precedente per evitare di bloccare il sistema quando
	una sola richiesta ha fatto superare il tempo medio risposta.

- Modificare le properties del config_loader in modo che vengano caricate le policy utente.
	Impostare in <.../distrib/properties/config_loader.cli.properties>

		policy.enable=true

- Per variare il ritardo con cui vengono scritti gli eventi sul database:
	In <govway_local.properties>:
		org.openspcoop2.pdd.eventi.timer.seconds=3
	In <testsuite.properties>:
		eventi_db_delay=3

- Copiare o linkare sotto /etc/govway/keys il keystore in:
	/protocolli/spcoop/testsuite/deploy/wss_examples/jks/pa.p12

	Serve per verificare il raggruppamento per token policy
	
- I test sui connettori richiedono che sull'host '127.0.2.2' nella porta '7777', se viene instaurata una connessione, questa viene lasciata sospesa in modo da causare un 'ConnectTimedOut'.
  Su sistema operativo 'Fedora', ad esempio, si puo' utilizzare il comando, in caso si abbia attivo il servizio 'iptables':
      	'iptables -A INPUT -p tcp -d 127.0.2.2 --dport 7777 -j DROP'
  o su fedora più recenti:
	'iptables -I INPUT 1 -p tcp -d 127.0.2.2 --destination-port 7777 -j DROP'
	
- HSM per TLS Keystore. I certificati generati con il readme tools/utils/src/org/openspcoop2/utils/certificate/hsm/HSM.example vanno aggiunti al keystore erogatore.jks messo in /etc/govway/keys per poter effettuare il trust di tutti gli utilizzi delle chiavi HSM come certificato client TLS. 
Per farlo:
mkdir /tmp/HSM_ADD
pushd /tmp/HSM_ADD
keytool -exportcert -rfc -alias client1_hsm -file client1_hsm.pem  -keystore NONE -storetype PKCS11 -storepass 123456 -providerClass sun.security.pkcs11.SunPKCS11 -providerArg $HOME/lib/softhsm/softhsm_java_client1.conf
keytool -exportcert -rfc -alias client2_hsm -file client2_hsm.pem -keystore NONE -storetype PKCS11 -storepass 123456 -providerClass sun.security.pkcs11.SunPKCS11 -providerArg "--name = softhsm-client2\nlibrary = /usr/lib64/libsofthsm2.so\nslotListIndex = 1"
keytool -exportcert -rfc -alias server_hsm -file server_hsm.pem -keystore NONE -storetype PKCS11 -storepass 123456 -providerClass sun.security.pkcs11.SunPKCS11 -providerArg $HOME/lib/softhsm/softhsm_java_server.conf
keytool -exportcert -rfc -alias server2_hsm -file server2_hsm.pem -keystore NONE -storetype PKCS11 -storepass 123456 -providerClass sun.security.pkcs11.SunPKCS11 -providerArg $HOME/lib/softhsm/softhsm_java_server.conf 
cp /etc/govway/keys/erogatore.jks .
keytool -importcert -alias client1_hsm -file client1_hsm.pem -keystore erogatore.jks -storepass openspcoop
keytool -importcert -alias client2_hsm -file client2_hsm.pem -keystore erogatore.jks -storepass openspcoop
keytool -importcert -alias server_hsm -file server_hsm.pem -keystore erogatore.jks -storepass openspcoop
keytool -importcert -alias server2_hsm -file server2_hsm.pem -keystore erogatore.jks -storepass openspcoop
cp erogatore.jks /etc/govway/keys/
popd

Per eseguire i test:
	ant run_test

	Parametri:
		-Dload=false (default: true) Carica la configurazione di govway all'inizio del test	
		-Ddelete=false (default: true) Elimina la configurazione di govway alla fine del test
		-Dwait=false (default:true) Non aspetta lo scoccare della nuova finestra di tempo nei test di rate limiting

Per eseguire solo una classe, indicare il package e il metodo:

    ant run_test -Dpackage=rate_limiting.numero_richieste -Dtest=SoapTest

Per eseguire solo un metodo, indicare il nome del metodo e il sottopackage+classe

	ant run_test -Dmethods=richiesteSimultaneeGlobali -Dtest=rate_limiting.numero_richieste.SoapTest 


Di seguito vengono descritti i test del package 'rate_limiting':

- 'congestione', verifica policy che usano l'applicabilità con degrado prestazionale e/o congestione (invocarli separati tra rest e soap per non incorrere in errori di sincronizzazione temporale). Verifica anche gli eventi:
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.congestione -Dtest=RestTest
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.congestione -Dtest=SoapTest

- 'custom policy', verifica policy che usano intervalli statistici (invocarli separati tra rest e soap per non incorrere in errori di sincronizzazione temporale):
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.custom_policy -Dtest=RestTest
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.custom_policy -Dtest=SoapTest

- 'global_policy', verifica policy definite a livello globale
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.global_policy

- 'numero_richieste', verifica policy definite con metriche basate sul numero di richieste simultanee e in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.numero_richieste

- 'numero_richieste_fallite', verifica policy definite con metriche basate sul numero di richieste fallite in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.numero_richieste_fallite

- 'numero_richieste_fallite_o_fault', verifica policy definite con metriche basate sul numero di richieste fallite o fault in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.numero_richieste_fallite_o_fault

- 'numero_richieste_fault', verifica policy definite con metriche basate sul numero di fault in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.numero_richieste_fault

- 'numero_richieste_completate_con_successo', verifica policy definite con metriche basate sul numero di richieste completate con successo in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.numero_richieste_completate_con_successo

- 'dimensione_messaggi', verifica policy definite con metriche basate sulla dimensione massima delle richieste e delle risposte
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.dimensione_messaggi -Dtest=RestTest
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.dimensione_messaggi -Dtest=SoapTest

- 'occupazione_banda', verifica policy definite con metriche basate sull'occupazine di banda in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.occupazione_banda

- 'tempo_complessivo_risposta', verifica policy definite con metriche basate sul tempo complessivo di risposta in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.tempo_complessivo_risposta

- 'tempo_medio_risposta', verifica policy definite con metriche basate sul tempo medio di risposta in un intervallo
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.tempo_medio_risposta

- 'filtri', verifica policy definite con filtri
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.filtri

- 'raggruppamento', verifica policy definite con raggruppamento dei contatori
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.raggruppamento

- 'flusso', verifica policy definite rispetto ad un ordinamento di applicabilità
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.flusso

- 'warning_only', verifica policy definite con stato warning_only (verifica anche gli eventi)
  ant run_test -Ddelete=false -Dload=false -Dpackage=rate_limiting.warning_only                                         


Di seguito vengono descritti i test del package 'validazione':

- 'parametri', verifica la serializzazione descritta in 'https://swagger.io/docs/specification/serialization/' oltre alla verifica che sia header che parametri possono esistere molteplici volte nella richiesta e nella risposta.
   ant run_test -Ddelete=false -Dload=false -Dpackage=validazione.parametri     

Di seguito vengono descritti i test del package 'trasformazione':

- 'form', verifica la trasformazione utilizzata per riconoscere casi di errori generati durante la certificazione di uno SPIDProvider 
  ant run_test -Ddelete=false -Dload=false -Dpackage=trasformazione.form

- 'soap_action', verifica la trasformazione utilizzata per adeguare la soapAction su messaggi soap
  ant run_test -Ddelete=false -Dload=false -Dpackage=trasformazione.soap_action

Di seguito vengono descritti i test del package 'registrazione_messaggi':

- 'dump_binario', verifica la registrazione dei messaggi in modalità 'binaria'
   ant run_test -Ddelete=false -Dload=false -Dpackage=registrazione_messaggi.dump_binario

- 'dump_normale', verifica la registrazione dei messaggi in modalità 'normale'. Si tratta della vecchia modalità in cui era il gateway ad analizzare in realtime la struttura multipart.
   ant run_test -Ddelete=false -Dload=false -Dpackage=registrazione_messaggi.dump_normale

Di seguito vengono descritti i test del package 'connettori':

- 'timeout', verifica i timeout di connessione e lettura dei messaggi di richiesta e risposta
   ant run_test -Ddelete=false -Dload=false -Dpackage=connettori.timeout

- 'errori', verifica che, su API SOAP, eventuali risposte di errore senza un payload o con un payload html vengano gestite correttamente. 
   ant run_test -Ddelete=false -Dload=false -Dpackage=connettori.errori

Di seguito vengono descritti i test del package 'token':

- 'attribute_authority', verifica l'interazione con le AttributeAuthority
   ant run_test -Ddelete=false -Dload=false -Dpackage=token.attribute_authority

Di seguito vengono descritti i test del package 'pkcs11':

- 'x509', verifica l'utilizzo di chiavi private e certificati presenti in HSM
   ant run_test -Ddelete=false -Dload=false -Dpackage=pkcs11.x509
