<?xml version="1.0"?>

<project name="RPCLiteralExample"  basedir=".">

	<import file="local_env.xml"/>
	
	<!-- estensione di ant (if .... ) -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${openspcoop2_lib}/ant/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<!-- set properties for this build -->
	<property name="src_rpc_literal_example" location="src" />
	<property name="build_rpc_literal_example" location="build/audit" />
	<property name="dist_rpc_literal_example" location="dist" />

	
	<!-- CLASSPATH -->
	<path id="classpath_compile" >
		<fileset dir="${openspcoop2_lib}" >
			<include name="**/wss4j/*"/>
			<include name="**/log/*"/>
			<include name="**/cxf/*"/>
			<include name="**/saaj/*"/>
			<include name="**/jetty/*"/>
			<include name="**/security/*"/>
			<include name="**/httpcore/*"/>
			<include name="**/commons/*"/>
			<exclude name="**/shared/Saxon*"/>
			<include name="**/shared/*"/>
            		<include name="**/spring/*"/>
			<include name="**/jaxb/*"/>
			<include name="**/jakarta/jakarta.activation-api-2.1.3.jar"/>
			<include name="**/jakarta/jakarta.servlet-api-5.0.0.jar"/>
			<include name="**/jakarta/jakarta.jws-api-3.0.0.jar"/>
			<include name="**/jakarta/jakarta.xml.ws-api-3.0.1.jar"/>
			<include name="**/jakarta/jakarta.xml.bind-api-3.0.1.jar"/>
			<include name="**/jakarta/jakarta.annotation-api-2.1.1.jar"/>
			<include name="**/angus/*"/>
		</fileset>
	</path>
	<path id="classpath_dist" >
		<fileset dir="${dist_rpc_literal_example}" >
			<include name="*.jar"/>
		</fileset>
	</path>
	<path id="classpath_stub" >
		<fileset dir="deploy/stub" >
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<!-- Ripulisce la distribuzione -->
	<target name="-clean_rpc_literal_example">
		<delete dir="${build_rpc_literal_example}" />
		<delete dir="${dist_rpc_literal_example}" />
		<delete dir="${doc_rpc_literal_example}" />
	</target>

	<!-- Create the build directory structure used by compile -->
	<target name="-init_compile_rpc_literal_example">
		<mkdir dir="${build_rpc_literal_example}/stub" />
		<mkdir dir="${build_rpc_literal_example}/skeleton" />
		<mkdir dir="${dist_rpc_literal_example}" />
	</target>
	
	
	
	<!-- Compilazione del Servizio -->
	<target name="-compile_compile_rpc_literal_example" depends="-init_compile_rpc_literal_example" description="compila il servizio">
		<!-- Compile the java code  -->
		<javac destdir="${build_rpc_literal_example}/stub" debug="${debug}">
			<!--<compilerarg value="-Xlint:unchecked"/>
                        <compilerarg value="-Xlint:deprecation"/>-->
			<src path="${src_rpc_literal_example}/org/openspcoop2/example/server/rpc/literal/stub" />
			<classpath refid="classpath_compile" />
		</javac>
		<javac destdir="${build_rpc_literal_example}/stub" debug="${debug}">
			<!--<compilerarg value="-Xlint:unchecked"/>
                        <compilerarg value="-Xlint:deprecation"/>-->
			<src path="${src_rpc_literal_example}/org/openspcoop2/example/server/rpc/literal/stub_namespace_ridefinito" />
			<classpath refid="classpath_compile" />
		</javac>
		<jar jarfile="${dist_rpc_literal_example}/openspcoop2_protocol-trasparente_rpc_literal_example_stub.jar">
			<zipfileset dir="${build_rpc_literal_example}/stub" />
			<zipfileset dir="config" prefix="config" />
	    </jar>
		<copy file="${dist_rpc_literal_example}/openspcoop2_protocol-trasparente_rpc_literal_example_stub.jar" tofile="deploy/stub/openspcoop2_protocol-trasparente_rpc_literal_example_stub.jar"/>


<!-- Compile the java code  -->
		<javac destdir="${build_rpc_literal_example}/skeleton" debug="${debug}">
			<!--<compilerarg value="-Xlint:unchecked"/>
                        <compilerarg value="-Xlint:deprecation"/>-->
			<src path="${src_rpc_literal_example}/org/openspcoop2/example/server/rpc/literal/skeleton" />
			<classpath refid="classpath_compile" />
		</javac>
		<javac destdir="${build_rpc_literal_example}/skeleton" debug="${debug}">
			<!--<compilerarg value="-Xlint:unchecked"/>
                        <compilerarg value="-Xlint:deprecation"/>-->
			<src path="${src_rpc_literal_example}/org/openspcoop2/example/server/rpc/literal/skeleton_namespace_ridefinito" />
			<classpath refid="classpath_compile" />
		</javac>
		<jar jarfile="${dist_rpc_literal_example}/openspcoop2_protocol-trasparente_rpc_literal_example_skeleton.jar">
			<zipfileset dir="${build_rpc_literal_example}/skeleton" />
			<zipfileset dir="config" prefix="config" />
	    </jar>
		<copy file="${dist_rpc_literal_example}/openspcoop2_protocol-trasparente_rpc_literal_example_skeleton.jar" tofile="deploy/stub/openspcoop2_protocol-trasparente_rpc_literal_example_skeleton.jar"/>
	</target>
	
	
	<!-- Esecuzione del server -->
	<target name="-run_server_rpc_literal_example" description="esegue il servizio">
		 <java classname="org.openspcoop2.example.server.rpc.literal.skeleton.ServiceRPCLiteral_ServiceRPCLiteral_Server" fork="yes">
            <classpath>
                <path refid="classpath_compile"/>
            	<path refid="classpath_stub"/>
                <pathelement location="." />
            </classpath>
	    <jvmarg value="-Dcom.sun.xml.ws.transport.http.client.HttpTransportPipe.dump=true" />
        </java>
	</target>

	<target name="-run_server_rpc_literal_example_namespace_ridefinito" description="esegue il servizio">
		 <java classname="org.openspcoop2.example.server.rpc.literal.skeleton_namespace_ridefinito.ServiceRPCLiteral_ServiceRPCLiteral_Server" fork="yes">
            <classpath>
                <path refid="classpath_compile"/>
            	<path refid="classpath_stub"/>
                <pathelement location="." />
            </classpath>
	    <jvmarg value="-Dcom.sun.xml.ws.transport.http.client.HttpTransportPipe.dump=true" />
        </java>
	</target>

	
	
	<!-- Esecuzione del client -->
	<target name="-run_client_rpc_literal_example" description="esegue il client che fruisce del servizio">
		 <java classname="org.openspcoop2.example.server.rpc.literal.stub.ServiceRPCLiteral_ServiceRPCLiteral_Client" fork="yes">
            <classpath>
                <path refid="classpath_compile"/>
            	<path refid="classpath_stub"/>
                <pathelement location="." />
            </classpath>
	    <jvmarg value="-Dcom.sun.xml.ws.transport.http.client.HttpTransportPipe.dump=true" />
        </java>
	</target>

	<target name="-run_client_rpc_literal_example_namespace_ridefinito" description="esegue il client che fruisce del servizio">
		 <java classname="org.openspcoop2.example.server.rpc.literal.stub_namespace_ridefinito.ServiceRPCLiteral_ServiceRPCLiteral_Client" fork="yes">
            <classpath>
                <path refid="classpath_compile"/>
            	<path refid="classpath_stub"/>
                <pathelement location="." />
            </classpath>
	    <jvmarg value="-Dcom.sun.xml.ws.transport.http.client.HttpTransportPipe.dump=true" />
        </java>
	</target>
	
	
	
	<!-- alias -->
	<target name="build" depends="-compile_compile_rpc_literal_example" />
	<target name="clean" depends="-clean_rpc_literal_example" />
	<target name="run_server" depends="-run_server_rpc_literal_example" />
	<target name="run_client" depends="-run_client_rpc_literal_example" />
	<target name="run_client_namespace_ridefinito" depends="-run_client_rpc_literal_example_namespace_ridefinito" />
	<target name="run_server_namespace_ridefinito" depends="-run_server_rpc_literal_example_namespace_ridefinito" />
	
</project>
