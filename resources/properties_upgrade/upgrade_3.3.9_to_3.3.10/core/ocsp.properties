# Consente di inizializzare una o più policy di validazione dei certificati tramite servizi OCSP
#
# La configurazione di ogni policy deve essere effettuata tramite la seguente sintassi:
# ocsp.<idPolicy>.type: [required] identificativo univoco associato alla policy.
# ocsp.<idPolicy>.label: [required] label associata alla policy e visualizzata nelle console.
# ocsp.<idPolicy>.certificateChainVerify: [optional, default:true] indicazione se deve essere verificata l'intera catena di certificati.
# ocsp.<idPolicy>.checkValidity: [optional, default:true] indicazione se deve essere effettuato un controllo di validità delle date del certificato prima di validarlo tramite OCSP.
# ocsp.<idPolicy>.checkCAValidity: [optional, default:true] consente di impostare un controllo identico a quello precedente, ma relativamente ai certificati che rappresentano CA.
#
# ocsp.<idPolicy>.ca.source: [required] indicazione sulle modalità con cui reperire i certificati CA che corrispondono all'issuer del certificato in fase di verifica. 
#                            È possibile indicare più modalità separate da virgola, e in tal caso vengono provate nell'ordine configurato fino a che non viene trovato il certificato di CA.
#                            Le modalità utilizzabili sono le seguenti:
#                            - AUTHORITY_INFORMATION_ACCESS: se presente nel certificato viene acceduta l'extension 'AuthorityInformationAccess' allo scopo di recuperare il certificato dichiarato come 'CA Issuer';
#                            - CONFIG: il certificato viene cercato nel truststore indicato nella configurazione dove viene riferita la policy OCSP;
#                            - ALTERNATIVE_CONFIG: il certificato viene cercato nel truststore indicato nella proprietà 'ocsp.<idPolicy>.ca.alternativeTrustStore'.
# ocsp.<idPolicy>.ca.alternativeTrustStore: [optional] consente di indicare un truststore dove viene ricercato il certificato CA che corrisponde all'issuer del certificato in fase di verifica, 
#                                           in caso di modalità 'ALTERNATIVE_CONFIG' indicata nella proprietà 'ocsp.<idPolicy>.ca.source'. 
#                                           Il tipo di truststore e la password devono essere indicate rispettivamente 
#                                           nelle proprietà 'ocsp.<idPolicy>.ca.alternativeTrustStore.type' [optional, default:jks] e 'ocsp.<idPolicy>.ca.alternativeTrustStore.password' [required].
# ocsp.<idPolicy>.ca.notFound.rejectsCertificate: [optional, default:true] nel caso non sia possibile recuperare il certificato CA tramite una delle modalità indicate in 'ocsp.<idPolicy>.ca.source' la validazione fallisce.
#                                                 Disabilitando la proprietà il processo di validazione termina correttamente senza segnalare anomalie (il servizio OCSP non verrà invocato).
#
# ocsp.<idPolicy>.nonce.enabled: [optional, default:true]: indicazione se nella richiesta inviata al provider OCSP deve essere aggiunta una extension contenente un identificativo univoco non predicibile 
#                                (nonce: https://www.rfc-editor.org/rfc/rfc6960#section-4.4.1).
#                                Se una extensions 'nonce' viene restituita anche nella risposta viene attuato un controllo di uguaglianze rispetto a quello inviato nella richiesta.
# ocsp.<idPolicy>.secureRandomAlgorithm: [optional, default:SHA1PRNG] indicazione sull'algoritmo utilizzato per generare il nonce. 
#                                        I valori indicati devono corrispondere ad uno tra quelli definiti nell'enumeration 'org.openspcoop2.utils.random.SecureRandomAlgorithm'.
# ocsp.<idPolicy>.response.date.toleranceMilliseconds: [optional, default:600000ms=10minuti] indicazione in millisecondi della tolleranza nel controllo di validità delle date 
#                                                      in caso in cui non venga attuata una verifica di uguaglianza tra nonce della richiesta e nonce della risposta.
#
# ocsp.<idPolicy>.signer.trustStore: [optional] consente di indicare un truststore dove viene ricercato il certificato CA che corrisponde all'issuer del certificato di firma utilizzato dal OCSP responder per firmare la risposta.
#                                    Questa opzione è necessaria quando la risposta viene firmata dal OCSP Responder utilizzando un certificato diverso dal certificato CA che ha emesso il certificato in fase di validazione.
#                                    Il tipo di truststore e la password devono essere indicate rispettivamente 
#                                    nelle proprietà 'ocsp.<idPolicy>.signer.type' [optional, default:jks] e 'ocsp.<idPolicy>.signer.password' [required].
# ocsp.<idPolicy>.signer.alias: [optional] insieme alla definizione della proprietà 'ocsp.<idPolicy>.signer.trustStore' consente l'autorizzazione puntuale di un certificato di firma atteso nelle risposte firmate dal servizio OCSP.
# ocsp.<idPolicy>.extendedKeyUsage: [optional, default:OCSP_SIGNING] extendedKeyUsage richiesti al certificato di firma dell'OCSP, 
#                                   nel caso in cui la risposta viene firmata dal OCSP Responder utilizzando un certificato diverso dal certificato CA che ha emesso il certificato in fase di validazione.
#                                   Se la proprietà viene definita vuota, non verrà attuato alcun controllo, ma se ne sconsiglia l'attuazione poichè il controllo è fondamentale per prevenire attacchi man in the middle (http), 
#                                   dove l'attaccante potrebbe firmare con un altro certificato in suo possesso rilasciato dalla stessa CA, certificato però non adibito a firmare risposte OCSP.
#
# ocsp.<idPolicy>.url.source: [required] indicazione sulle modalità con cui reperire la url del servizio OCSP. 
#                            È possibile indicare più modalità separate da virgola tra le seguenti:
#                            - AUTHORITY_INFORMATION_ACCESS: se presente nel certificato viene acceduta l'extension 'AuthorityInformationAccess' allo scopo di recuperare le url dei servizi 'OCSP';
#                            - ALTERNATIVE_CONFIG: gli endpoint dei servizi OCSP vengono indicati nella proprietà 'ocsp.<idPolicy>.url.alternative'.
# ocsp.<idPolicy>.url.alternative: [optional] consente di indicare l'endpoint del servizio OCSP da utilizzare per la verifica del certificato; è possibile indicare più endpoint, separati da virgola.
# ocsp.<idPolicy>.url.alternative.ca: [optional] identico alla precedente proprietà, ma utilizzati per validare i certificati che rappresentano CA.
# ocsp.<idPolicy>.url.notFound.rejectsCertificate: [optional, default:true] nel caso non sia possibile recuperare l'endpoint del servizio OCSP tramite una delle modalità indicate in 'ocsp.<idPolicy>.url.source' la validazione fallisce.
#                                                  Disabilitando la proprietà il processo di validazione termina correttamente senza segnalare anomalie (il servizio OCSP non verrà invocato).
# ocsp.<idPolicy>.url.notFound.rejectsCA: [optional, default:false] nel caso non sia possibile recuperare l'endpoint del servizio OCSP di un certificato di CA, la validazione termina correttamente.
#                                         Abilitando la proprietà è possibile far fallire il processo di validazione.
# ocsp.<idPolicy>.url.returnCodeOk: [optional, default:200] consente di indicare i codici http delle risposte del servizio OCSP che devono essere considerate valide.
#                                   Solamente nelle risposte valide viene poi validata e considerata la risposta ottenuta; è possibile indicare più codici separati da virgola.
# ocsp.<idPolicy>.url.breakStatus: [optional] nel caso di più endpoint OCSP disponibili, i servizi vengono invocati nell'ordine recuperato dalle modalità indicate nella proprietà 'ocsp.<idPolicy>.url.source'.
#                                  Una invocazione di un servizio OCSP può fallire per svariati motivi, definiti nell'enumeration 'org.openspcoop2.utils.certificate.ocsp.OCSPResponseCode'.
#                                  Per default qualsiasi sia il motivo del fallimento, la validazione termina con errore.
#                                  La proprietà seguente consente di indicare gli stati di errore, separati da virgola, per cui il processo di validazione si interrompe e non prova ad invocare il successivo endpoint disponibile.
#                                  Ad esempio, ocsp.<idPolicy>.url.breakStatus=OCSP_BUILD_REQUEST_FAILED
#
# Le seguenti opzione vengono utilizzate sia durante l'invocazione del servizio OCSP che per il retrieve di certificati indicati in extension 'AuthorityInformationAccess'.
# ocsp.<idPolicy>.connectTimeout: [optional, default:10000ms] indicazione in millisecondi sul tempo di instaurazione della connessione.
# ocsp.<idPolicy>.readTimeout: [optional, default:15000ms] indicazione in millisecondi sul tempo di attesa di una risposta dal servizio OCSP.
#
# Opzioni aggiuntive nel caso in cui le url da contattare siano in https.
# ocsp.<idPolicy>.https.trustAllCerts: [optional, default:false] consente di accettare qualsiasi certificato restituito dal server.
# ocsp.<idPolicy>.https.trustStore: [optional] consente di indicare un truststore dove viene ricercato il certificato server.
#                                   Il tipo di truststore e la password devono essere indicate rispettivamente 
#                                   nelle proprietà 'ocsp.<idPolicy>.https.trustStore.type' [optional, default:jks] e 'ocsp.<idPolicy>.https.trustStore.password' [required].
#
# -- CRL --
# ocsp.<idPolicy>.crl.signingCert.check: [optional, default:false] il certificato di firma utilizzato per la risposta OCSP può contenere indicazioni di CRL per la sua validazione. Se presenti verranno verificate se viene abilitata la seguente opzione.
# ocsp.<idPolicy>.crl.ca.check: [optional, default:true] il certificato di CA presente nella certificate chain può contenere indicazioni di CRL per la sua validazione, invece che OCSP. Se presenti verranno verificate se viene abilitata la seguente opzione.
# ocsp.<idPolicy>.crl.enabled: [optional, default:false] consente di attivare una validazione alternativa a OCSP che utilizza solamente CRL per la validazione del certificato
#
# Nei casi sopra indicati, se viene abilitato un controllo CRL, vengono utilizzate le seguenti configurazioni.
#
# ocsp.<idPolicy>.crl.source: [optional, default:AUTHORITY_INFORMATION_ACCESS] indicazione sulle modalità con cui reperire i CRL.
#                             È possibile indicare più modalità separate da virgola tra le seguenti:
#                             - AUTHORITY_INFORMATION_ACCESS: se presente nel certificato viene acceduta l'extension 'CRLDistributionPoints' allo scopo di recuperare l'url dove recuperare la CRL;
#                             - CONFIG: crl indicata nella configurazione dove viene riferita la policy OCSP;
#                             - ALTERNATIVE_CONFIG: la crl viene recuperata accedendo alla url indicata nella proprietà 'ocsp.<idPolicy>.crl.alternative'.
#                             NOTA: nel caso di proprietà 'ocsp.<idPolicy>.crl.signingCert.check' o 'ocsp.<idPolicy>.crl.ca.check' abilitata, la modalità 'AUTHORITY_INFORMATION_ACCESS' è obbligatoria.
# ocsp.<idPolicy>.crl.alternative: [optional] consente di indicare un indirizzo dove recuperare la CRL; è possibile indicare più endpoint, separati da virgola.
# ocsp.<idPolicy>.crl.notFound.rejectsCertificate: [optional, default:false] nel caso non sia possibile recuperare CRL tramite una delle modalità indicate in 'ocsp.<idPolicy>.crl.source' la validazione termina correttamente.
#                                                   Abilitando la proprietà è possibile far fallire il processo di validazione.
# ocsp.<idPolicy>.crl.notFound.rejectsCA: [optional, default:false] consente di impostare un controllo identico a quello precedente, ma relativamente ai certificati che rappresentano CA.
#
# ocsp.<idPolicy>.crl.trustStore.source: [optional, default:AUTHORITY_INFORMATION_ACCESS] indicazione sulle modalità con cui costruire il truststore utilizzato per la verifica delle CRL.
#                            È possibile indicare più modalità separate da virgola, e in tal caso vengono costruito un truststore contenente tutti i certificati recuperati.
#                            Le modalità utilizzabili sono le seguenti:
#                            - AUTHORITY_INFORMATION_ACCESS: se presente nel certificato viene acceduta l'extension 'AuthorityInformationAccess' e l'extension 'CRLDistributionPoints' 
#                                                            allo scopo di recuperare in entrambe il certificato dichiarato come 'CA Issuer'.
#                            - CONFIG: il certificato viene cercato nel truststore indicato nella configurazione dove viene riferita la policy OCSP;
#                            - ALTERNATIVE_CONFIG: il certificato viene cercato nel truststore indicato nella proprietà 'ocsp.<idPolicy>.crl.alternativeTrustStore'.
# ocsp.<idPolicy>.crl.alternativeTrustStore: [optional] consente di indicare un truststore utilizzato per la verifica delle CRL.
#                                   Il tipo di truststore e la password devono essere indicate rispettivamente 
#                                   nelle proprietà 'ocsp.<idPolicy>.crl.alternativeTrustStore.type' [optional, default:jks] e 'ocsp.<idPolicy>.crl.alternativeTrustStore.password' [required].


# --------------------------------------
# Configurazione Default
ocsp.default.type=default
ocsp.default.label=Certificate Only
#
# Verifica di tutti i certificati della catena
ocsp.default.certificateChainVerify=false
#
# Verifica la validità del certificato prima di intraprendere la validazione tramite OCSP/CRL
ocsp.default.checkValidity=true
ocsp.default.checkCAValidity=true
#
# Issuer
ocsp.default.ca.source=CONFIG,AUTHORITY_INFORMATION_ACCESS
#
# OCSP Responder URL
ocsp.default.url.source=AUTHORITY_INFORMATION_ACCESS
ocsp.default.url.breakStatus=OCSP_BUILD_REQUEST_FAILED
#
# Il certificato di firma utilizzato per la risposta OCSP può contenere indicazioni di CRL per la sua validazione
ocsp.default.crl.signingCert.check=true
# 
ocsp.default.crl.source=AUTHORITY_INFORMATION_ACCESS
# 
# Il truststore utilizzato per attuare la verifica CRL viene definito tramite le seguenti opzioni
ocsp.default.crl.trustStore.source=CONFIG,AUTHORITY_INFORMATION_ACCESS
# --------------------------------------

# --------------------------------------
# Configurazione Default
ocsp.defaultCertificateChain.type=defaultCertificateChain
ocsp.defaultCertificateChain.label=Certificate Chain
#
# Verifica di tutti i certificati della catena
ocsp.defaultCertificateChain.certificateChainVerify=true
#
# Verifica la validità del certificato prima di intraprendere la validazione tramite OCSP/CRL
ocsp.defaultCertificateChain.checkValidity=true
ocsp.defaultCertificateChain.checkCAValidity=true
#
# Issuer
ocsp.defaultCertificateChain.ca.source=CONFIG,AUTHORITY_INFORMATION_ACCESS
#
# OCSP Responder URL
ocsp.defaultCertificateChain.url.source=AUTHORITY_INFORMATION_ACCESS
ocsp.defaultCertificateChain.url.breakStatus=OCSP_BUILD_REQUEST_FAILED
#
# Il certificato di firma utilizzato per la risposta OCSP può contenere indicazioni di CRL per la sua validazione
ocsp.defaultCertificateChain.crl.signingCert.check=true
#
# il certificato di CA presente nella certificate chain può contenere indicazioni di CRL per la sua validazione, invece che OCSP. Se presenti verranno verificate se viene abilitata la seguente opzione.
ocsp.default.crl.ca.check=true
# 
ocsp.defaultCertificateChain.crl.source=AUTHORITY_INFORMATION_ACCESS
# 
# Il truststore utilizzato per attuare la verifica CRL viene definito tramite le seguenti opzioni
ocsp.defaultCertificateChain.crl.trustStore.source=CONFIG,AUTHORITY_INFORMATION_ACCESS
# --------------------------------------
